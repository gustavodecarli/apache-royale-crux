/**
 * Generated by Apache Royale Compiler from mx/logging/LogLogger.as
 * mx.logging.LogLogger
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.logging.LogLogger');
/* Royale Dependency List: mx.logging.LogEvent,mx.logging.LogEventLevel,mx.messaging.errors.ArgumentError,mx.resources.IResourceManager,mx.resources.ResourceManager,XML*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('mx.logging.ILogger');



/**
 *  Constructor.
 *
 *  @asparam category The category for which this log sends messages.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {mx.logging.ILogger}
 * @param {string} category
 */
mx.logging.LogLogger = function(category) {
  
  this.mx_logging_LogLogger_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.logging.LogLogger.base(this, 'constructor');
  this.mx_logging_LogLogger__category = category;
};
goog.inherits(mx.logging.LogLogger, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.logging.LogLogger', mx.logging.LogLogger);


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.logging.LogLogger.prototype.mx_logging_LogLogger_resourceManager;


/**
 * @private
 * @type {string}
 */
mx.logging.LogLogger.prototype.mx_logging_LogLogger__category;


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} level
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.log = function(level, msg, rest) {
  rest = Array.prototype.slice.call(arguments, 2);
  if (level < mx.logging.LogEventLevel.DEBUG) {
    var /** @type {string} */ message = this.mx_logging_LogLogger_resourceManager.getString("logging", "levelLimit");
    throw new mx.messaging.errors.ArgumentError(message);
  }
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, level));
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.debug = function(msg, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, mx.logging.LogEventLevel.DEBUG));
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.error = function(msg, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, mx.logging.LogEventLevel.ERROR));
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.fatal = function(msg, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, mx.logging.LogEventLevel.FATAL));
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.info = function(msg, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, mx.logging.LogEventLevel.INFO));
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} msg
 * @param {...} rest
 */
mx.logging.LogLogger.prototype.warn = function(msg, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (this.hasEventListener(mx.logging.LogEvent.LOG)) {
    for (var /** @type {number} */ i = 0; i < rest.length; i++) {
      msg = msg.replace(new RegExp("\\{" + i + "\\}", "g"), rest[i]);
    }
    this.dispatchEvent(new mx.logging.LogEvent(msg, mx.logging.LogEventLevel.WARN));
  }
};


mx.logging.LogLogger.prototype.get__category = function() {
  return this.mx_logging_LogLogger__category;
};


Object.defineProperties(mx.logging.LogLogger.prototype, /** @lends {mx.logging.LogLogger.prototype} */ {
/**
  * @export
  * @type {string} */
category: {
get: mx.logging.LogLogger.prototype.get__category}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.logging.LogLogger.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LogLogger', qName: 'mx.logging.LogLogger', kind: 'class' }], interfaces: [mx.logging.ILogger] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.logging.LogLogger.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'category': { type: 'String', access: 'readonly', declaredBy: 'mx.logging.LogLogger'}
      };
    },
    methods: function () {
      return {
        'LogLogger': { type: '', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ]; }},
        'log': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'int', false ,'String', false ,'Array', false ]; }},
        'debug': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        'error': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        'fatal': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        'info': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        'warn': { type: 'void', declaredBy: 'mx.logging.LogLogger', parameters: function () { return [ 'String', false ,'Array', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.logging.LogLogger.prototype.ROYALE_COMPILE_FLAGS = 26;
