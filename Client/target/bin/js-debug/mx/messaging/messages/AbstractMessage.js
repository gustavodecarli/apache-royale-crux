/**
 * Generated by Apache Royale Compiler from mx/messaging/messages/AbstractMessage.as
 * mx.messaging.messages.AbstractMessage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.messages.AbstractMessage');
/* Royale Dependency List: mx.core.mx_internal,mx.utils.RPCStringUtil,mx.utils.RPCUIDUtil,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.BinaryData,org.apache.royale.utils.net.IDataInput,org.apache.royale.utils.net.IDataOutput,org.apache.royale.utils.Language,XML*/

goog.require('mx.messaging.messages.IMessage');



/**
 *  Constructs an instance of an AbstractMessage with an empty body and header.
 *  This message type should not be instantiated or used directly.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3
 * @constructor
 * @implements {mx.messaging.messages.IMessage}
 */
mx.messaging.messages.AbstractMessage = function() {
  
  this.mx_messaging_messages_AbstractMessage__body = {};
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.messages.AbstractMessage', mx.messaging.messages.AbstractMessage);


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.DESTINATION_CLIENT_ID_HEADER = "DSDstClientId";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.ENDPOINT_HEADER = "DSEndpoint";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.FLEX_CLIENT_ID_HEADER = "DSId";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.PRIORITY_HEADER = "DSPriority";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_HEADER = "DSRemoteCredentials";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_CHARSET_HEADER = "DSRemoteCredentialsCharset";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.REQUEST_TIMEOUT_HEADER = "DSRequestTimeout";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.STATUS_CODE_HEADER = "DSStatusCode";


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.HAS_NEXT_FLAG = 128;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.BODY_FLAG = 1;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.CLIENT_ID_FLAG = 2;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.DESTINATION_FLAG = 4;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.HEADERS_FLAG = 8;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.MESSAGE_ID_FLAG = 16;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.TIMESTAMP_FLAG = 32;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.TIME_TO_LIVE_FLAG = 64;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.CLIENT_ID_BYTES_FLAG = 1;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.MESSAGE_ID_BYTES_FLAG = 2;


/**
 * @private
 * @type {Object}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__body;


/**
 * @private
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__clientId;


/**
 * @private
 * @type {org.apache.royale.utils.BinaryData}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage_clientIdBytes;


/**
 * @private
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__destination = "";


/**
 * @private
 * @type {Object}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__headers;


/**
 * @private
 * @type {string}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__messageId;


/**
 * @private
 * @type {org.apache.royale.utils.BinaryData}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage_messageIdBytes;


/**
 * @private
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__timestamp = 0;


/**
 * @private
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.prototype.mx_messaging_messages_AbstractMessage__timeToLive = 0;


/**
 * @asprivate
 *
 * While this class itself does not implement flash.utils.IExternalizable,
 * ISmallMessage implementations will typically use IExternalizable to
 * serialize themselves in a smaller form. This method supports this
 * functionality by implementing IExternalizable.readExternal(IDataInput) to
 * deserialize the properties for this abstract base class.
 * @export
 * @param {org.apache.royale.utils.net.IDataInput} input
 */
mx.messaging.messages.AbstractMessage.prototype.readExternal = function(input) {
  var /** @type {Array} */ flagsArray = this.readFlags(input);
  for (var /** @type {number} */ i = 0; i < flagsArray.length; i++) {
    var /** @type {number} */ flags = (org.apache.royale.utils.Language.as(flagsArray[i], org.apache.royale.utils.Language.synthType('uint'))) >>> 0;
    var /** @type {number} */ reservedPosition = 0;
    if (i == 0) {
      if ((flags & mx.messaging.messages.AbstractMessage.BODY_FLAG) != 0)
        this.readExternalBody(input);
      else
        this.body = null;
      if ((flags & mx.messaging.messages.AbstractMessage.CLIENT_ID_FLAG) != 0)
        this.clientId = org.apache.royale.utils.Language.string(input.readObject());
      if ((flags & mx.messaging.messages.AbstractMessage.DESTINATION_FLAG) != 0)
        this.destination = org.apache.royale.utils.Language.as(input.readObject(), String);
      if ((flags & mx.messaging.messages.AbstractMessage.HEADERS_FLAG) != 0)
        this.headers = input.readObject();
      if ((flags & mx.messaging.messages.AbstractMessage.MESSAGE_ID_FLAG) != 0)
        this.messageId = org.apache.royale.utils.Language.as(input.readObject(), String);
      if ((flags & mx.messaging.messages.AbstractMessage.TIMESTAMP_FLAG) != 0)
        this.timestamp = org.apache.royale.utils.Language.as(input.readObject(), Number);
      if ((flags & mx.messaging.messages.AbstractMessage.TIME_TO_LIVE_FLAG) != 0)
        this.timeToLive = org.apache.royale.utils.Language.as(input.readObject(), Number);
      reservedPosition = 7;
    } else if (i == 1) {
      if ((flags & mx.messaging.messages.AbstractMessage.CLIENT_ID_BYTES_FLAG) != 0) {
        this.mx_messaging_messages_AbstractMessage_clientIdBytes = org.apache.royale.utils.Language.as(input.readObject(), org.apache.royale.utils.BinaryData);
        this.clientId = mx.utils.RPCUIDUtil.fromBinary(this.mx_messaging_messages_AbstractMessage_clientIdBytes);
      }
      if ((flags & mx.messaging.messages.AbstractMessage.MESSAGE_ID_BYTES_FLAG) != 0) {
        this.mx_messaging_messages_AbstractMessage_messageIdBytes = org.apache.royale.utils.Language.as(input.readObject(), org.apache.royale.utils.BinaryData);
        this.messageId = mx.utils.RPCUIDUtil.fromBinary(this.mx_messaging_messages_AbstractMessage_messageIdBytes);
      }
      reservedPosition = 2;
    }
    if ((flags >> reservedPosition) != 0) {
      for (var /** @type {number} */ j = reservedPosition; j < 6; j++) {
        if (((flags >> j) & 1) != 0) {
          input.readObject();
        }
      }
    }
  }
};


/**
 * @asprivate
 *
 * While this class itself does not implement flash.utils.IExternalizable,
 * ISmallMessage implementations will typically use IExternalizable to
 * serialize themselves in a smaller form. This method supports this
 * functionality by implementing IExternalizable.writeExternal(IDataOutput)
 * to efficiently serialize the properties for this abstract base class.
 * @export
 * @param {org.apache.royale.utils.net.IDataOutput} output
 */
mx.messaging.messages.AbstractMessage.prototype.writeExternal = function(output) {
  var /** @type {number} */ flags = 0;
  var /** @type {string} */ checkForMessageId = this.messageId;
  if (this.mx_messaging_messages_AbstractMessage_clientIdBytes == null)
    this.mx_messaging_messages_AbstractMessage_clientIdBytes = mx.utils.RPCUIDUtil.toBinary(this.mx_messaging_messages_AbstractMessage__clientId);
  if (this.mx_messaging_messages_AbstractMessage_messageIdBytes == null)
    this.mx_messaging_messages_AbstractMessage_messageIdBytes = mx.utils.RPCUIDUtil.toBinary(this.mx_messaging_messages_AbstractMessage__messageId);
  if (this.body != null)
    flags |= mx.messaging.messages.AbstractMessage.BODY_FLAG;
  if (this.clientId != null && this.mx_messaging_messages_AbstractMessage_clientIdBytes == null)
    flags |= mx.messaging.messages.AbstractMessage.CLIENT_ID_FLAG;
  if (this.destination != null)
    flags |= mx.messaging.messages.AbstractMessage.DESTINATION_FLAG;
  if (this.headers != null)
    flags |= mx.messaging.messages.AbstractMessage.HEADERS_FLAG;
  if (this.messageId != null && this.mx_messaging_messages_AbstractMessage_messageIdBytes == null)
    flags |= mx.messaging.messages.AbstractMessage.MESSAGE_ID_FLAG;
  if (this.timestamp != 0)
    flags |= mx.messaging.messages.AbstractMessage.TIMESTAMP_FLAG;
  if (this.timeToLive != 0)
    flags |= mx.messaging.messages.AbstractMessage.TIME_TO_LIVE_FLAG;
  if (this.mx_messaging_messages_AbstractMessage_clientIdBytes != null || this.mx_messaging_messages_AbstractMessage_messageIdBytes != null)
    flags |= mx.messaging.messages.AbstractMessage.HAS_NEXT_FLAG;
  output.writeByte((flags) >> 0);
  flags = 0;
  if (this.mx_messaging_messages_AbstractMessage_clientIdBytes != null)
    flags |= mx.messaging.messages.AbstractMessage.CLIENT_ID_BYTES_FLAG;
  if (this.mx_messaging_messages_AbstractMessage_messageIdBytes != null)
    flags |= mx.messaging.messages.AbstractMessage.MESSAGE_ID_BYTES_FLAG;
  if (flags != 0)
    output.writeByte((flags) >> 0);
  if (this.body != null)
    this.writeExternalBody(output);
  if (this.clientId != null && this.mx_messaging_messages_AbstractMessage_clientIdBytes == null)
    output.writeObject(this.clientId);
  if (this.destination != null)
    output.writeObject(this.destination);
  if (this.headers != null)
    output.writeObject(this.headers);
  if (this.messageId != null && this.mx_messaging_messages_AbstractMessage_messageIdBytes == null)
    output.writeObject(this.messageId);
  if (this.timestamp != 0)
    output.writeObject(this.timestamp);
  if (this.timeToLive != 0)
    output.writeObject(this.timeToLive);
  if (this.mx_messaging_messages_AbstractMessage_clientIdBytes != null)
    output.writeObject(this.mx_messaging_messages_AbstractMessage_clientIdBytes);
  if (this.mx_messaging_messages_AbstractMessage_messageIdBytes != null)
    output.writeObject(this.mx_messaging_messages_AbstractMessage_messageIdBytes);
};


/**
 *  @asprivate
 * @export
 * @param {Object} attributes
 */
mx.messaging.messages.AbstractMessage.prototype.addDebugAttributes = function(attributes) {
  attributes["body"] = this.body;
  attributes["clientId"] = this.clientId;
  attributes["destination"] = this.destination;
  attributes["headers"] = this.headers;
  attributes["messageId"] = this.messageId;
  attributes["timestamp"] = this.timestamp;
  attributes["timeToLive"] = this.timeToLive;
};


/**
 *  @asprivate
 * @export
 * @return {string}
 */
mx.messaging.messages.AbstractMessage.prototype.getDebugString = function() {
  var /** @type {string} */ result = "(" + org.apache.royale.reflection.getQualifiedClassName(this) + ")";
  var /** @type {Object} */ attributes = {};
  this.addDebugAttributes(attributes);
  var /** @type {Array} */ propertyNames = [];
  for (var /** @type {string} */ propertyName in attributes) {
    propertyNames.push(propertyName);
  }
  propertyNames.sort();
  var /** @type {number} */ length = (propertyNames.length) >> 0;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {string} */ name = String(propertyNames[i]);
    var /** @type {Object} */ attrValue = attributes[name];
    var /** @type {string} */ value = org.apache.royale.utils.Language.string(attrValue == null ? "null" : attrValue.toString());
    result += mx.utils.RPCStringUtil.substitute("\n  {0}={1}", name, value);
  }
  return result;
};


/**
 * @export
 * @return {string}
 */
mx.messaging.messages.AbstractMessage.prototype.toString = function() {
  return this.getDebugString();
};


/**
 * @asprivate
 * @export
 * @param {org.apache.royale.utils.net.IDataInput} input
 */
mx.messaging.messages.AbstractMessage.prototype.readExternalBody = function(input) {
  this.body = input.readObject();
};


/**
 * @asprivate
 * To support efficient serialization for ISmallMessage implementations,
 * this utility method reads in the property flags from an IDataInput
 * stream. Flags are read in one byte at a time. Flags make use of
 * sign-extension so that if the high-bit is set to 1 this indicates that
 * another set of flags follows.
 *
 * @asreturn The Array of property flags. Each flags byte is stored as a uint
 * in the Array.
 * @export
 * @param {org.apache.royale.utils.net.IDataInput} input
 * @return {Array}
 */
mx.messaging.messages.AbstractMessage.prototype.readFlags = function(input) {
  var /** @type {boolean} */ hasNextFlag = true;
  var /** @type {Array} */ flagsArray = [];
  while (hasNextFlag && input.bytesAvailable > 0) {
    var /** @type {number} */ flags = input.readUnsignedByte();
    flagsArray.push(flags);
    if ((flags & mx.messaging.messages.AbstractMessage.HAS_NEXT_FLAG) != 0)
      hasNextFlag = true;
    else
      hasNextFlag = false;
  }
  return flagsArray;
};


/**
 * @asprivate
 * @export
 * @param {org.apache.royale.utils.net.IDataOutput} output
 */
mx.messaging.messages.AbstractMessage.prototype.writeExternalBody = function(output) {
  output.writeObject(this.body);
};


mx.messaging.messages.AbstractMessage.prototype.get__body = function() {
  return this.mx_messaging_messages_AbstractMessage__body;
};


mx.messaging.messages.AbstractMessage.prototype.set__body = function(value) {
  this.mx_messaging_messages_AbstractMessage__body = value;
};


mx.messaging.messages.AbstractMessage.prototype.get__clientId = function() {
  return this.mx_messaging_messages_AbstractMessage__clientId;
};


mx.messaging.messages.AbstractMessage.prototype.set__clientId = function(value) {
  this.mx_messaging_messages_AbstractMessage__clientId = value;
  this.mx_messaging_messages_AbstractMessage_clientIdBytes = null;
};


mx.messaging.messages.AbstractMessage.prototype.get__destination = function() {
  return this.mx_messaging_messages_AbstractMessage__destination;
};


mx.messaging.messages.AbstractMessage.prototype.set__destination = function(value) {
  this.mx_messaging_messages_AbstractMessage__destination = value;
};


mx.messaging.messages.AbstractMessage.prototype.get__headers = function() {
  if (this.mx_messaging_messages_AbstractMessage__headers == null)
    this.mx_messaging_messages_AbstractMessage__headers = {};
  return this.mx_messaging_messages_AbstractMessage__headers;
};


mx.messaging.messages.AbstractMessage.prototype.set__headers = function(value) {
  this.mx_messaging_messages_AbstractMessage__headers = value;
};


mx.messaging.messages.AbstractMessage.prototype.get__messageId = function() {
  if (this.mx_messaging_messages_AbstractMessage__messageId == null)
    this.mx_messaging_messages_AbstractMessage__messageId = mx.utils.RPCUIDUtil.createUID();
  return this.mx_messaging_messages_AbstractMessage__messageId;
};


mx.messaging.messages.AbstractMessage.prototype.set__messageId = function(value) {
  this.mx_messaging_messages_AbstractMessage__messageId = value;
  this.mx_messaging_messages_AbstractMessage_messageIdBytes = null;
};


mx.messaging.messages.AbstractMessage.prototype.get__timestamp = function() {
  return this.mx_messaging_messages_AbstractMessage__timestamp;
};


mx.messaging.messages.AbstractMessage.prototype.set__timestamp = function(value) {
  this.mx_messaging_messages_AbstractMessage__timestamp = value;
};


mx.messaging.messages.AbstractMessage.prototype.get__timeToLive = function() {
  return this.mx_messaging_messages_AbstractMessage__timeToLive;
};


mx.messaging.messages.AbstractMessage.prototype.set__timeToLive = function(value) {
  this.mx_messaging_messages_AbstractMessage__timeToLive = value;
};


Object.defineProperties(mx.messaging.messages.AbstractMessage.prototype, /** @lends {mx.messaging.messages.AbstractMessage.prototype} */ {
/**
  * @export
  * @type {Object} */
body: {
get: mx.messaging.messages.AbstractMessage.prototype.get__body,
set: mx.messaging.messages.AbstractMessage.prototype.set__body},
/**
  * @export
  * @type {string} */
clientId: {
get: mx.messaging.messages.AbstractMessage.prototype.get__clientId,
set: mx.messaging.messages.AbstractMessage.prototype.set__clientId},
/**
  * @export
  * @type {string} */
destination: {
get: mx.messaging.messages.AbstractMessage.prototype.get__destination,
set: mx.messaging.messages.AbstractMessage.prototype.set__destination},
/**
  * @export
  * @type {Object} */
headers: {
get: mx.messaging.messages.AbstractMessage.prototype.get__headers,
set: mx.messaging.messages.AbstractMessage.prototype.set__headers},
/**
  * @export
  * @type {string} */
messageId: {
get: mx.messaging.messages.AbstractMessage.prototype.get__messageId,
set: mx.messaging.messages.AbstractMessage.prototype.set__messageId},
/**
  * @export
  * @type {number} */
timestamp: {
get: mx.messaging.messages.AbstractMessage.prototype.get__timestamp,
set: mx.messaging.messages.AbstractMessage.prototype.set__timestamp},
/**
  * @export
  * @type {number} */
timeToLive: {
get: mx.messaging.messages.AbstractMessage.prototype.get__timeToLive,
set: mx.messaging.messages.AbstractMessage.prototype.set__timeToLive}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.messages.AbstractMessage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AbstractMessage', qName: 'mx.messaging.messages.AbstractMessage', kind: 'class' }], interfaces: [mx.messaging.messages.IMessage] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.messages.AbstractMessage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'body': { type: 'Object', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'clientId': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'destination': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'headers': { type: 'Object', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'messageId': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'timestamp': { type: 'Number', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'timeToLive': { type: 'Number', access: 'readwrite', declaredBy: 'mx.messaging.messages.AbstractMessage'}
      };
    },
    methods: function () {
      return {
        'AbstractMessage': { type: '', declaredBy: 'mx.messaging.messages.AbstractMessage'},
        'readExternal': { type: 'void', declaredBy: 'mx.messaging.messages.AbstractMessage', parameters: function () { return [ 'org.apache.royale.utils.net.IDataInput', false ]; }},
        'writeExternal': { type: 'void', declaredBy: 'mx.messaging.messages.AbstractMessage', parameters: function () { return [ 'org.apache.royale.utils.net.IDataOutput', false ]; }},
        'toString': { type: 'String', declaredBy: 'mx.messaging.messages.AbstractMessage'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.messages.AbstractMessage.prototype.ROYALE_COMPILE_FLAGS = 26;
