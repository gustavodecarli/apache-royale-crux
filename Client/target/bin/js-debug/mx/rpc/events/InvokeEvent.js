/**
 * Generated by Apache Royale Compiler from mx/rpc/events/InvokeEvent.as
 * mx.rpc.events.InvokeEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.events.InvokeEvent');
/* Royale Dependency List: mx.messaging.messages.IMessage,mx.rpc.AsyncToken,org.apache.royale.events.Event,XML*/

goog.require('mx.rpc.events.AbstractEvent');



/**
 * Create a new InvokeEvent.
 * @asparam type The event type; indicates the action that triggered the event.
 * @asparam bubbles Specifies whether the event can bubble up the display list hierarchy.
 * @asparam cancelable Specifies whether the behavior associated with the event can be prevented.
 * @asparam token Token that represents the call to the method. Used in the asynchronous 
 *     completion token pattern.
 * @asparam message Source Message of the request.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.events.AbstractEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {mx.rpc.AsyncToken=} token
 * @param {mx.messaging.messages.IMessage=} message
 */
mx.rpc.events.InvokeEvent = function(type, bubbles, cancelable, token, message) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  token = typeof token !== 'undefined' ? token : null;
  message = typeof message !== 'undefined' ? message : null;
  mx.rpc.events.InvokeEvent.base(this, 'constructor', type, bubbles, cancelable, token, message);
};
goog.inherits(mx.rpc.events.InvokeEvent, mx.rpc.events.AbstractEvent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.events.InvokeEvent', mx.rpc.events.InvokeEvent);


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.events.InvokeEvent.INVOKE = "invoke";


/**
 * @asprivate
 * @export
 * @param {mx.rpc.AsyncToken=} token
 * @param {mx.messaging.messages.IMessage=} message
 * @return {mx.rpc.events.InvokeEvent}
 */
mx.rpc.events.InvokeEvent.createEvent = function(token, message) {
  token = typeof token !== 'undefined' ? token : null;
  message = typeof message !== 'undefined' ? message : null;
  return new mx.rpc.events.InvokeEvent(mx.rpc.events.InvokeEvent.INVOKE, false, false, token, message);
};


/** 
 * Because this event can be re-dispatched we have to implement clone to
 * return the appropriate type, otherwise we will get just the standard
 * event type.
 * @asprivate
 * @export
 * @override
 */
mx.rpc.events.InvokeEvent.prototype.clone = function() {
  return new mx.rpc.events.InvokeEvent(this.type, this.bubbles, this.cancelable, this.token, this.message);
};


/**
 * Returns a string representation of the InvokeEvent.
 *
 * @asreturn String representation of the InvokeEvent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.events.InvokeEvent.prototype.toString = function() {
  return this.formatToString("InvokeEvent", "messageId", "type", "bubbles", "cancelable", "eventPhase");
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.events.InvokeEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'InvokeEvent', qName: 'mx.rpc.events.InvokeEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.events.InvokeEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'InvokeEvent': { type: '', declaredBy: 'mx.rpc.events.InvokeEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'mx.rpc.AsyncToken', true ,'mx.messaging.messages.IMessage', true ]; }},
        '|createEvent': { type: 'mx.rpc.events.InvokeEvent', declaredBy: 'mx.rpc.events.InvokeEvent', parameters: function () { return [ 'mx.rpc.AsyncToken', true ,'mx.messaging.messages.IMessage', true ]; }},
        'clone': { type: 'org.apache.royale.events.Event', declaredBy: 'mx.rpc.events.InvokeEvent'},
        'toString': { type: 'String', declaredBy: 'mx.rpc.events.InvokeEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.events.InvokeEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
