/**
 * Generated by Apache Royale Compiler from mx/messaging/Consumer.as
 * mx.messaging.Consumer
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.Consumer');
/* Royale Dependency List: mx.core.mx_internal,mx.events.PropertyChangeEvent,mx.messaging.messages.AsyncMessage,mx.messaging.messages.CommandMessage,mx.messaging.messages.IMessage,XML*/

goog.require('mx.messaging.AbstractConsumer');



/**
 *  Constructor.
 * 
 *  @asparam messageType The alias for the message type processed by the service
 *                     hosting the remote destination the Consumer will subscribe to.
 *                     This parameter is deprecated and it is ignored by the
 *                     constructor.
 * 
 *  @example
 *  <listing version="3.0">
 *   function initConsumer():void
 *   {
 *       var consumer:Consumer = new Consumer();
 *       consumer.destination = "NASDAQ";
 *       consumer.selector = "operation IN ('Bid','Ask')";
 *       consumer.addEventListener(MessageEvent.MESSAGE, messageHandler);
 *       consumer.subscribe();
 *   }
 *
 *   function messageHandler(event:MessageEvent):void
 *   {
 *       var msg:IMessage = event.message;
 *       var info:Object = msg.body;
 *       trace("-App recieved message: " + msg.toString());
 *   }
 *   </listing>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @constructor
 * @extends {mx.messaging.AbstractConsumer}
 * @param {string=} messageType
 */
mx.messaging.Consumer = function(messageType) {
  messageType = typeof messageType !== 'undefined' ? messageType : "flex.messaging.messages.AsyncMessage";
  mx.messaging.Consumer.base(this, 'constructor');
};
goog.inherits(mx.messaging.Consumer, mx.messaging.AbstractConsumer);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.Consumer', mx.messaging.Consumer);


/**
 * @private
 * @type {string}
 */
mx.messaging.Consumer.prototype.mx_messaging_Consumer__selector = "";


/**
 * @private
 * @type {string}
 */
mx.messaging.Consumer.prototype.mx_messaging_Consumer__subtopic = "";


/**
 * @asprivate
 * @export
 * @override
 */
mx.messaging.Consumer.prototype.internalSend = function(message, waitForClientId) {
  waitForClientId = typeof waitForClientId !== 'undefined' ? waitForClientId : true;
  if (this.subtopic.length > 0)
    message.headers[mx.messaging.messages.AsyncMessage.SUBTOPIC_HEADER] = this.subtopic;
  if (this.mx_messaging_Consumer__selector.length > 0)
    message.headers[mx.messaging.messages.CommandMessage.SELECTOR_HEADER] = this.mx_messaging_Consumer__selector;
  mx.messaging.Consumer.superClass_.internalSend.apply(this, [ message, waitForClientId] );
};


mx.messaging.Consumer.prototype.get__selector = function() {
  return this.mx_messaging_Consumer__selector;
};


mx.messaging.Consumer.prototype.set__selector = function(value) {
  if (this.mx_messaging_Consumer__selector !== value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "selector", this.mx_messaging_Consumer__selector, value);
    var /** @type {boolean} */ resetSubscription = false;
    if (this.subscribed) {
      this.unsubscribe();
      resetSubscription = true;
    }
    this.mx_messaging_Consumer__selector = value;
    if (resetSubscription)
      this.subscribe(this.clientId);
    this.dispatchEvent(event);
  }
};


mx.messaging.Consumer.prototype.get__subtopic = function() {
  return this.mx_messaging_Consumer__subtopic;
};


mx.messaging.Consumer.prototype.set__subtopic = function(value) {
  if (this.subtopic != value) {
    var /** @type {boolean} */ resetSubscription = false;
    if (this.subscribed) {
      this.unsubscribe();
      resetSubscription = true;
    }
    this.mx_messaging_Consumer__subtopic = value;
    if (resetSubscription)
      this.subscribe();
  }
};


Object.defineProperties(mx.messaging.Consumer.prototype, /** @lends {mx.messaging.Consumer.prototype} */ {
/**
  * @export
  * @type {string} */
selector: {
get: mx.messaging.Consumer.prototype.get__selector,
set: mx.messaging.Consumer.prototype.set__selector},
/**
  * @export
  * @type {string} */
subtopic: {
get: mx.messaging.Consumer.prototype.get__subtopic,
set: mx.messaging.Consumer.prototype.set__subtopic}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.Consumer.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Consumer', qName: 'mx.messaging.Consumer', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.Consumer.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'selector': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.Consumer', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'subtopic': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.Consumer', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'Consumer': { type: '', declaredBy: 'mx.messaging.Consumer', parameters: function () { return [ 'String', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.Consumer.prototype.ROYALE_COMPILE_FLAGS = 26;
