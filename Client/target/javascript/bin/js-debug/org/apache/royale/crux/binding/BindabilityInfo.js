/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/binding/BindabilityInfo.as
 * org.apache.royale.crux.binding.BindabilityInfo
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.binding.BindabilityInfo');
/* Royale Dependency List: org.apache.royale.events.ValueChangeEvent,org.apache.royale.reflection.DefinitionWithMetaData,org.apache.royale.reflection.MetaDataArgDefinition,org.apache.royale.reflection.MetaDataDefinition,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.utils.filterForMetaTags,org.apache.royale.reflection.utils.getMembersWithNameMatch,org.apache.royale.utils.Language*/




/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @param {org.apache.royale.reflection.TypeDefinition} typeDefinition
 */
org.apache.royale.crux.binding.BindabilityInfo = function(typeDefinition) {
  
  this.org_apache_royale_crux_binding_BindabilityInfo_childChangeEvents = {};
  ;
  this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition = typeDefinition;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.binding.BindabilityInfo', org.apache.royale.crux.binding.BindabilityInfo);


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.crux.binding.BindabilityInfo.BINDABLE = "Bindable";


/**
 * @private
 * @type {org.apache.royale.reflection.TypeDefinition}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_childChangeEvents;


/**
 *  Object containing { eventName: true } for each change event
 *  (class- or child-level) that applies to the specified child.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} childName
 * @return {Object}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.getChangeEvents = function(childName) {
  var /** @type {Object} */ changeEvents = this.org_apache_royale_crux_binding_BindabilityInfo_childChangeEvents[childName];
  if (!changeEvents) {
    changeEvents = this.org_apache_royale_crux_binding_BindabilityInfo_copyProps(this.org_apache_royale_crux_binding_BindabilityInfo_getClassChangeEvents(), {});
    var /** @type {Array} */ accessorsAndMethods = [];
    org.apache.royale.reflection.utils.getMembersWithNameMatch(this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.accessors, childName, accessorsAndMethods);
    org.apache.royale.reflection.utils.getMembersWithNameMatch(this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.methods, childName, accessorsAndMethods);
    var /** @type {number} */ numChildren = (accessorsAndMethods.length) >> 0;
    if (numChildren == 0) {
      org.apache.royale.utils.Language.trace("warning: no describeType entry for '" + childName + "' on non-dynamic type '" + this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.name + "'");
    } else {
      if (numChildren > 1) {
        org.apache.royale.utils.Language.trace("warning: multiple describeType entries for '" + childName + "' on type '" + this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.name + "':\n" + accessorsAndMethods);
      }
      this.org_apache_royale_crux_binding_BindabilityInfo_addBindabilityEvents(accessorsAndMethods, changeEvents);
    }
    this.org_apache_royale_crux_binding_BindabilityInfo_childChangeEvents[childName] = changeEvents;
  }
  return changeEvents;
};


/**
 *  @asprivate
 *  Build or return cached class change events object.
 * @private
 * @return {Object}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_getClassChangeEvents = function() {
  if (!this.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents) {
    this.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents = {};
    if (this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.retrieveMetaDataByName('Bindable').length) {
      this.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents[org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE] = true;
    }
    if (this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.retrieveMetaDataByName('Managed').length) {
      this.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents[org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE] = true;
    }
  }
  return this.org_apache_royale_crux_binding_BindabilityInfo_classChangeEvents;
};


/**
 *  @asprivate
 * @private
 * @param {Array} members
 * @param {Object} eventListObj
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_addBindabilityEvents = function(members, eventListObj) {
  var /** @type {Array} */ metaNames = [org.apache.royale.crux.binding.BindabilityInfo.BINDABLE];
  var /** @type {Array} */ changeEvents = org.apache.royale.reflection.utils.filterForMetaTags(members, metaNames);
  this.org_apache_royale_crux_binding_BindabilityInfo_addChangeEvents(changeEvents, eventListObj);
};


/**
 *  @asprivate
 *  Transfer change events from a list of change-event-carrying metadata
 *  to an event list object.
 *  Note: metadata's first arg value is assumed to be change event name.
 * @private
 * @param {Array} members
 * @param {Object} eventListObj
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_addChangeEvents = function(members, eventListObj) {
  var foreachiter0_target = members;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var md = foreachiter0_target[foreachiter0];
  {
    var /** @type {Array} */ metaNames = [org.apache.royale.crux.binding.BindabilityInfo.BINDABLE];
    var foreachiter1_target = metaNames;
    for (var foreachiter1 in foreachiter1_target) 
    {
    var meta = foreachiter1_target[foreachiter1];
    {
      var /** @type {Array} */ metaItems = md.retrieveMetaDataByName(meta);
      if (metaItems.length) {
        var foreachiter2_target = metaItems;
        for (var foreachiter2 in foreachiter2_target) 
        {
        var metaItem = foreachiter2_target[foreachiter2];
        {
          if (metaItem.args.length) {
            eventListObj[org.apache.royale.utils.Language.as(metaItem.args[0], org.apache.royale.reflection.MetaDataArgDefinition, true).value] = true;
          } else {
            if (meta == org.apache.royale.crux.binding.BindabilityInfo.BINDABLE) {
              eventListObj[org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE] = true;
            } else {
              org.apache.royale.utils.Language.trace("warning: unconverted change events metadata in class '" + this.org_apache_royale_crux_binding_BindabilityInfo_typeDefinition.name + "'", metaItem);
            }
          }
        }}
        
      }
    }}
    
  }}
  
};


/**
 *  @asprivate
 *  Copy properties from one object to another.
 * @private
 * @param {Object} from
 * @param {Object} to
 * @return {Object}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.org_apache_royale_crux_binding_BindabilityInfo_copyProps = function(from, to) {
  for (var /** @type {string} */ propName in from) {
    to[propName] = from[propName];
  }
  return to;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BindabilityInfo', qName: 'org.apache.royale.crux.binding.BindabilityInfo', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'BindabilityInfo': { type: '', declaredBy: 'org.apache.royale.crux.binding.BindabilityInfo', parameters: function () { return [ 'org.apache.royale.reflection.TypeDefinition', false ]; }},
        'getChangeEvents': { type: 'Object', declaredBy: 'org.apache.royale.crux.binding.BindabilityInfo', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.binding.BindabilityInfo.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./BindabilityInfo.js.map
