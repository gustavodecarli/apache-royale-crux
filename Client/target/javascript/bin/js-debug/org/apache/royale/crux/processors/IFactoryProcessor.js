/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/processors/IFactoryProcessor.as
 * org.apache.royale.crux.processors.IFactoryProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.processors.IFactoryProcessor');
/* Royale Dependency List: org.apache.royale.crux.IBeanFactory*/

goog.require('org.apache.royale.crux.processors.IProcessor');



/**
 * @interface
 * @extends {org.apache.royale.crux.processors.IProcessor}
 */
org.apache.royale.crux.processors.IFactoryProcessor = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.IFactoryProcessor', org.apache.royale.crux.processors.IFactoryProcessor);
/**
 * Process the crux bean factory itself. Executes after all beans are loded but NOT yet set up.
 *
 * @asparam factory: the IBeanFactory instance to process
 * @export
 * @param {org.apache.royale.crux.IBeanFactory} factory
 */
org.apache.royale.crux.processors.IFactoryProcessor.prototype.setUpFactory = function(factory) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.IFactoryProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IFactoryProcessor', qName: 'org.apache.royale.crux.processors.IFactoryProcessor', kind: 'interface' }], interfaces: [org.apache.royale.crux.processors.IProcessor] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.IFactoryProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'setUpFactory': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.IFactoryProcessor', parameters: function () { return [ 'org.apache.royale.crux.IBeanFactory', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.IFactoryProcessor.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./IFactoryProcessor.js.map
