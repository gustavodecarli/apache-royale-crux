/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/processors/InjectProcessor.as
 * org.apache.royale.crux.processors.InjectProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.processors.InjectProcessor');
/* Royale Dependency List: QName,org.apache.royale.crux.Bean,org.apache.royale.crux.ICruxAware,org.apache.royale.crux.binding.BindabilityInfo,org.apache.royale.crux.binding.BindableChainInfo,org.apache.royale.crux.binding.BindingUtils,org.apache.royale.crux.binding.CruxBinding,org.apache.royale.crux.metadata.InjectMetadataTag,org.apache.royale.crux.processors.ProcessorPriority,org.apache.royale.crux.reflection.IMetadataTag,org.apache.royale.crux.reflection.MetadataHostClass,org.apache.royale.crux.reflection.MetadataHostMethod,org.apache.royale.crux.reflection.MetadataHostProperty,org.apache.royale.crux.reflection.MethodParameter,org.apache.royale.crux.utils.services.IServiceHelper,org.apache.royale.crux.utils.services.IURLRequestHelper,org.apache.royale.crux.utils.services.MockDelegateHelper,org.apache.royale.crux.utils.services.ServiceHelper,org.apache.royale.crux.utils.services.URLRequestHelper,org.apache.royale.reflection.AccessorDefinition,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.utils.getMembersWithNameMatch,org.apache.royale.utils.UIDUtil,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.crux.processors.BaseMetadataProcessor');



/**
 * Constructor
 * @constructor
 * @extends {org.apache.royale.crux.processors.BaseMetadataProcessor}
 * @param {Array=} metadataNames
 */
org.apache.royale.crux.processors.InjectProcessor = function(metadataNames) {
  metadataNames = typeof metadataNames !== 'undefined' ? metadataNames : null;
  
  this.injectByProperty = {};
  this.uidDict = new WeakMap();
  org.apache.royale.crux.processors.InjectProcessor.base(this, 'constructor', metadataNames == null ? [org.apache.royale.crux.processors.InjectProcessor.INJECT] : metadataNames, org.apache.royale.crux.metadata.InjectMetadataTag);
};
goog.inherits(org.apache.royale.crux.processors.InjectProcessor, org.apache.royale.crux.processors.BaseMetadataProcessor);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.InjectProcessor', org.apache.royale.crux.processors.InjectProcessor);


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.InjectProcessor.INJECT = "Inject";


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.injectByProperty;


/**
 * @protected
 * @type {org.apache.royale.crux.utils.services.IServiceHelper}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.sharedServiceHelper;


/**
 * @protected
 * @type {org.apache.royale.crux.utils.services.IURLRequestHelper}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.sharedURLRequestHelper;


/**
 * @protected
 * @type {org.apache.royale.crux.utils.services.MockDelegateHelper}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.sharedMockDelegateHelper;


/**
 * @protected
 * @type {WeakMap}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.uidDict;


/**
 * Add Inject
 * @export
 * @override
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.setUpMetadataTag = function(metadataTag, bean) {
  var /** @type {org.apache.royale.crux.metadata.InjectMetadataTag} */ injectTag = org.apache.royale.utils.Language.as(metadataTag, org.apache.royale.crux.metadata.InjectMetadataTag);
  if (injectTag.source == null) {
    this.addInjectByType(injectTag, bean);
  } else {
    var /** @type {org.apache.royale.crux.Bean} */ namedBean = this.getBeanByName(org.apache.royale.utils.Language.string(injectTag.source.split(".")[0]));
    if (namedBean == null) {
      if (injectTag.required)
        throw new Error("InjectionProcessorError: bean not found: " + injectTag.source);
      else
        org.apache.royale.utils.Language.trace("InjectProcessor could not fulfill {0} tag on {1}", injectTag.asTag, bean);
      return;
    }
    var /** @type {Object} */ destObject = (injectTag.destination == null) ? bean.source : this.getDestinationObject(bean.source, injectTag.destination);
    var /** @type {*} */ destPropName = this.getDestinationPropertyName(injectTag);
    var /** @type {string} */ chain = injectTag.source.substr(injectTag.source.indexOf(".") + 1);
    var /** @type {boolean} */ bind = injectTag.bind && !org.apache.royale.utils.Language.is(destPropName, QName);
    if (injectTag.source.indexOf(".") < 0) {
      this.setDestinationValue(injectTag, bean, namedBean.source);
    } else if (!bind) {
      var /** @type {Object} */ sourceObject = this.getDestinationObject(namedBean.source, chain);
      this.setDestinationValue(injectTag, bean, sourceObject[injectTag.source.split(".").pop()]);
      if (org.apache.royale.utils.Language.is(destPropName, QName) && injectTag.bind == true) {
        var /** @type {string} */ errorStr = "Cannot create a binding for " + metadataTag.asTag + " because " + injectTag.source.split(".").pop() + " is not public. ";
        errorStr += "Add bind=false to your Inject tag or make the property public.";
        throw new Error(errorStr);
      }
    } else {
      this.addPropertyBinding(destObject, org.apache.royale.utils.Language.string(destPropName), namedBean, injectTag);
    }
  }
  org.apache.royale.utils.Language.trace("InjectProcessor set up " + metadataTag.toString() + " on " + bean.toString());
};


/**
 * Remove Inject
 * @export
 * @override
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.tearDownMetadataTag = function(metadataTag, bean) {
  var /** @type {org.apache.royale.crux.metadata.InjectMetadataTag} */ injectTag = org.apache.royale.utils.Language.as(metadataTag, org.apache.royale.crux.metadata.InjectMetadataTag);
  if (injectTag.source != null) {
    if (injectTag.source.indexOf(".") > -1) {
      this.removeInjectByProperty(injectTag, bean);
    } else {
      this.removeInjectByName(injectTag, bean);
    }
  } else {
    this.removeInjectByType(injectTag, bean);
  }
};


/**
 *
 * @protected
 * @param {Object} destObject
 * @param {string} chainString
 * @return {Object}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.getDestinationObject = function(destObject, chainString) {
  var /** @type {Array} */ arr = chainString.split(".");
  var /** @type {Object} */ dest = destObject;
  while (arr.length > 1)
    dest = dest[arr.shift()];
  return dest;
};


/**
 *
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @return {*}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.getDestinationPropertyName = function(injectTag) {
  if (injectTag.destination == null) {
    return injectTag.host.name;
  } else {
    return injectTag.destination.split(".").pop();
  }
};


/**
 * Remove Inject By Property
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.removeInjectByProperty = function(injectTag, bean) {
  var /** @type {org.apache.royale.crux.Bean} */ namedBean = this.getBeanByName(org.apache.royale.utils.Language.string(injectTag.source.split(".")[0]));
  this.removePropertyBinding(bean, namedBean, injectTag);
  this.setDestinationValue(injectTag, bean, null);
};


/**
 * Remove Inject By Name
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.removeInjectByName = function(injectTag, bean) {
  this.setDestinationValue(injectTag, bean, null);
};


/**
 * Add Inject By Type
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.addInjectByType = function(injectTag, bean) {
  var /** @type {boolean} */ setterInjection = org.apache.royale.utils.Language.is(injectTag.host, org.apache.royale.crux.reflection.MetadataHostMethod);
  var /** @type {Object} */ targetType = setterInjection ? org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(injectTag.host, org.apache.royale.crux.reflection.MetadataHostMethod, true).parameters[0], org.apache.royale.crux.reflection.MethodParameter, true).type : injectTag.host.type;
  if (targetType == null && org.apache.royale.utils.Language.is(injectTag.host, org.apache.royale.crux.reflection.MetadataHostClass)) {
  }{}
  
  var /** @type {org.apache.royale.crux.Bean} */ typedBean = this.getBeanByType(targetType);
  if (typedBean) {
    this.setDestinationValue(injectTag, bean, typedBean.source);
  } else {
    switch (targetType) {
      case org.apache.royale.crux.utils.services.ServiceHelper:
      
      case org.apache.royale.crux.utils.services.IServiceHelper:
        if (this.sharedServiceHelper == null) {
          this.sharedServiceHelper = new org.apache.royale.crux.utils.services.ServiceHelper();
          org.apache.royale.utils.Language.as(this.sharedServiceHelper, org.apache.royale.crux.ICruxAware, true).crux = this.crux;
        }
        this.setDestinationValue(injectTag, bean, this.sharedServiceHelper);
        return;
      case org.apache.royale.crux.utils.services.URLRequestHelper:
      
      case org.apache.royale.crux.utils.services.IURLRequestHelper:
        if (this.sharedURLRequestHelper == null) {
          this.sharedURLRequestHelper = new org.apache.royale.crux.utils.services.URLRequestHelper();
          org.apache.royale.utils.Language.as(this.sharedURLRequestHelper, org.apache.royale.crux.ICruxAware, true).crux = this.crux;
        }
        this.setDestinationValue(injectTag, bean, this.sharedURLRequestHelper);
        return;
      case org.apache.royale.crux.utils.services.MockDelegateHelper:
        if (this.sharedMockDelegateHelper == null)
          this.sharedMockDelegateHelper = new org.apache.royale.crux.utils.services.MockDelegateHelper();
        this.setDestinationValue(injectTag, bean, this.sharedMockDelegateHelper);
        return;
    }
    if (injectTag.required) {
      throw new Error("InjectProcessor Error: bean of type " + targetType.toString() + " not found!");
    } else {
      org.apache.royale.utils.Language.trace("Bean of type " + targetType.toString() + " not found, injection queues have been removed!");
    }
  }
};


/**
 * Remove Inject By Type
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.removeInjectByType = function(injectTag, bean) {
  this.setDestinationValue(injectTag, bean, null);
};


/**
 * Set Destination Value
 * @protected
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 * @param {org.apache.royale.crux.Bean} bean
 * @param {*} value
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.setDestinationValue = function(injectTag, bean, value) {
  var /** @type {boolean} */ setterInjection = org.apache.royale.utils.Language.is(injectTag.host, org.apache.royale.crux.reflection.MetadataHostMethod);
  var /** @type {Object} */ destObject = (injectTag.destination == null) ? bean.source : this.getDestinationObject(bean.source, injectTag.destination);
  var /** @type {*} */ destPropName = this.getDestinationPropertyName(injectTag);
  if (setterInjection) {
    var /** @type {Function} */ f = org.apache.royale.utils.Language.as(destObject[destPropName], Function);
    f.apply(destObject, [value]);
  } else {
    var /** @type {org.apache.royale.crux.reflection.MetadataHostProperty} */ property = org.apache.royale.utils.Language.as(injectTag.host, org.apache.royale.crux.reflection.MetadataHostProperty);
    if (property) {
      property.sourceDefinition.setValue(destObject, value);
    } else {
      org.apache.royale.utils.Language.trace('unexpected branch in \'setDestinationValue\'');
      destObject[destPropName] = value;
    }
  }
};


/**
 * Get Bean By Name
 * @protected
 * @param {string} name
 * @return {org.apache.royale.crux.Bean}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.getBeanByName = function(name) {
  return this.beanFactory.getBeanByName(name);
};


/**
 * Get Bean By Type
 * @protected
 * @param {Object} type
 * @return {org.apache.royale.crux.Bean}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.getBeanByType = function(type) {
  return this.beanFactory.getBeanByType(type);
};


/**
 * Add Property Binding
 * @protected
 * @param {Object} destObject
 * @param {string} destPropName
 * @param {org.apache.royale.crux.Bean} sourceBean
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.addPropertyBinding = function(destObject, destPropName, sourceBean, injectTag) {
  var /** @type {Object} */ sourceObject = sourceBean.source;
  var /** @type {string} */ uid;
  var /** @type {Array} */ sourcePropertyChain = injectTag.source.split(".").slice(1);
  
  uid = org.apache.royale.utils.Language.string(this.uidDict.get(destObject));
  if (!uid) {
    uid = org.apache.royale.utils.UIDUtil.createUID();
    this.uidDict.set(destObject, uid);
  }
  this.injectByProperty[uid] = this.injectByProperty[uid] || [];
  var /** @type {Array} */ chain = [];
  var /** @type {org.apache.royale.reflection.TypeDefinition} */ typeDef = sourceBean.typeDescriptor.typeDefinition;
  var /** @type {number} */ i = 0;
  var /** @type {org.apache.royale.crux.binding.BindableChainInfo} */ lastChainInfo;
  while (i < sourcePropertyChain.length) {
    var /** @type {org.apache.royale.crux.binding.BindabilityInfo} */ bindabilityInfo = new org.apache.royale.crux.binding.BindabilityInfo(typeDef);
    var /** @type {string} */ propName = org.apache.royale.utils.Language.string(sourcePropertyChain[i]);
    i++;
    var /** @type {org.apache.royale.crux.binding.BindableChainInfo} */ chainInfoElement = new org.apache.royale.crux.binding.BindableChainInfo();
    chain.push(chainInfoElement);
    if (lastChainInfo)
      lastChainInfo.next = chainInfoElement;
    chainInfoElement.name = propName;
    chainInfoElement.changeEvents = bindabilityInfo.getChangeEvents(propName);
    var /** @type {Array} */ members = [];
    org.apache.royale.reflection.utils.getMembersWithNameMatch(typeDef.accessors, propName, members);
    if (members.length == 1) {
      var /** @type {org.apache.royale.reflection.AccessorDefinition} */ accessor = org.apache.royale.utils.Language.as(members[0], org.apache.royale.reflection.AccessorDefinition);
      chainInfoElement.accessorDefinition = accessor;
      if (i < sourcePropertyChain.length) {
        typeDef = accessor.type;
      }
      lastChainInfo = chainInfoElement;
    } else {
      throw new Error('Unexpected result');
    }
  }
  try {
    if (org.apache.royale.utils.Language.is(destObject[destPropName], Function)) {
      this.injectByProperty[uid].push(org.apache.royale.crux.binding.BindingUtils.bindProperty(destObject, destObject[destPropName], sourceObject, chain));
    } else {
      this.injectByProperty[uid].push(org.apache.royale.crux.binding.BindingUtils.bindProperty(destObject, destPropName, sourceObject, chain));
    }
  } catch (error) {
    org.apache.royale.utils.Language.trace('todo ReferenceError caught', error);
  }
};


/**
 * Remove Property Binding
 * @protected
 * @param {org.apache.royale.crux.Bean} destination
 * @param {org.apache.royale.crux.Bean} source
 * @param {org.apache.royale.crux.metadata.InjectMetadataTag} injectTag
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.removePropertyBinding = function(destination, source, injectTag) {
  var /** @type {Object} */ destObject = (injectTag.destination == null) ? destination.source : this.getDestinationObject(destination.source, injectTag.destination);
  var /** @type {string} */ uid;
  
  uid = org.apache.royale.utils.Language.string(this.uidDict.get(destObject));
  if (uid) {
    var /** @type {Array} */ contents = this.injectByProperty[uid];
    var foreachiter0_target = contents;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var cb = foreachiter0_target[foreachiter0];
    {
      cb.unwatch();
    }}
    
    delete this.injectByProperty[uid];
  }
};


org.apache.royale.crux.processors.InjectProcessor.prototype.get__priority = function() {
  return org.apache.royale.crux.processors.ProcessorPriority.INJECT;
};


Object.defineProperties(org.apache.royale.crux.processors.InjectProcessor.prototype, /** @lends {org.apache.royale.crux.processors.InjectProcessor.prototype} */ {
/**
  * @export
  * @type {number} */
priority: {
get: org.apache.royale.crux.processors.InjectProcessor.prototype.get__priority}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'InjectProcessor', qName: 'org.apache.royale.crux.processors.InjectProcessor', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'priority': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.InjectProcessor'}
      };
    },
    methods: function () {
      return {
        'InjectProcessor': { type: '', declaredBy: 'org.apache.royale.crux.processors.InjectProcessor', parameters: function () { return [ 'Array', true ]; }},
        'setUpMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.InjectProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }},
        'tearDownMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.InjectProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.InjectProcessor.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./InjectProcessor.js.map
