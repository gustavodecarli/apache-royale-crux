/**
 * Generated by Apache Royale Compiler from org/apache/royale/html/beads/layouts/LayoutChangeNotifier.as
 * org.apache.royale.html.beads.layouts.LayoutChangeNotifier
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.html.beads.layouts.LayoutChangeNotifier');
/* Royale Dependency List: org.apache.royale.core.IBeadView,org.apache.royale.events.Event,org.apache.royale.utils.sendStrandEvent,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.core.Bead');



/**
 *  constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.9
 * @constructor
 * @extends {org.apache.royale.core.Bead}
 */
org.apache.royale.html.beads.layouts.LayoutChangeNotifier = function() {
  org.apache.royale.html.beads.layouts.LayoutChangeNotifier.base(this, 'constructor');
};
goog.inherits(org.apache.royale.html.beads.layouts.LayoutChangeNotifier, org.apache.royale.core.Bead);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.html.beads.layouts.LayoutChangeNotifier', org.apache.royale.html.beads.layouts.LayoutChangeNotifier);


/**
 * @private
 * @type {*}
 */
org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.org_apache_royale_html_beads_layouts_LayoutChangeNotifier__value = undefined;


org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.set__initialValue = function(value) {
  this.org_apache_royale_html_beads_layouts_LayoutChangeNotifier__value = value;
};


org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.set__watchedProperty = function(value) {
  if (this.org_apache_royale_html_beads_layouts_LayoutChangeNotifier__value !== value) {
    this.org_apache_royale_html_beads_layouts_LayoutChangeNotifier__value = value;
    if (org.apache.royale.utils.Language.is(this._strand, org.apache.royale.core.IBeadView))
      this._strand.host.dispatchEvent(new org.apache.royale.events.Event("layoutNeeded"));
    else
      org.apache.royale.utils.sendStrandEvent(this._strand, "layoutNeeded");
  }
};


Object.defineProperties(org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype, /** @lends {org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype} */ {
/**
  * @export
  * @type {Object} */
initialValue: {
set: org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.set__initialValue},
/**
  * @export
  * @type {Object} */
watchedProperty: {
set: org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.set__watchedProperty}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LayoutChangeNotifier', qName: 'org.apache.royale.html.beads.layouts.LayoutChangeNotifier', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'initialValue': { type: 'Object', access: 'writeonly', declaredBy: 'org.apache.royale.html.beads.layouts.LayoutChangeNotifier'},
        'watchedProperty': { type: 'Object', access: 'writeonly', declaredBy: 'org.apache.royale.html.beads.layouts.LayoutChangeNotifier'}
      };
    },
    methods: function () {
      return {
        'LayoutChangeNotifier': { type: '', declaredBy: 'org.apache.royale.html.beads.layouts.LayoutChangeNotifier'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.html.beads.layouts.LayoutChangeNotifier.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./LayoutChangeNotifier.js.map
