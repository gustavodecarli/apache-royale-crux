/**
 * Generated by Apache Royale Compiler from mx/messaging/messages/AsyncMessage.as
 * mx.messaging.messages.AsyncMessage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.messages.AsyncMessage');
/* Royale Dependency List: mx.messaging.messages.AsyncMessageExt,mx.messaging.messages.IMessage,mx.utils.RPCUIDUtil,org.apache.royale.utils.BinaryData,org.apache.royale.utils.net.IDataInput,org.apache.royale.utils.net.IDataOutput,org.apache.royale.utils.Language,XML*/

goog.require('mx.messaging.messages.AbstractMessage');
goog.require('mx.messaging.messages.ISmallMessage');



/**
 *  Constructs an instance of an AsyncMessage with an empty body and header.
 *  In addition to this default behavior, the body and the headers for the
 *  message may also be passed to the constructor as a convenience.
 *  An example of this invocation approach for the body is:
 *  <code>var msg:AsyncMessage = new AsyncMessage("Body text");</code>
 *  An example that provides both the body and headers is:
 *  <code>var msg:AsyncMessage = new AsyncMessage("Body text", {"customerHeader":"customValue"});</code>
 *
 *  @asparam body The optional body to assign to the message.
 *
 *  @asparam headers The optional headers to assign to the message.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3
 * @constructor
 * @extends {mx.messaging.messages.AbstractMessage}
 * @implements {mx.messaging.messages.ISmallMessage}
 * @param {Object=} body
 * @param {Object=} headers
 */
mx.messaging.messages.AsyncMessage = function(body, headers) {
  body = typeof body !== 'undefined' ? body : null;
  headers = typeof headers !== 'undefined' ? headers : null;
  mx.messaging.messages.AsyncMessage.base(this, 'constructor');
  this.correlationId = "";
  if (body != null)
    this.body = body;
  if (headers != null)
    this.headers = headers;
};
goog.inherits(mx.messaging.messages.AsyncMessage, mx.messaging.messages.AbstractMessage);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.messages.AsyncMessage', mx.messaging.messages.AsyncMessage);


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.AsyncMessage.SUBTOPIC_HEADER = "DSSubtopic";


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AsyncMessage.CORRELATION_ID_FLAG = 1;


/**
 * @private
 * @const
 * @type {number}
 */
mx.messaging.messages.AsyncMessage.CORRELATION_ID_BYTES_FLAG = 2;


/**
 * @private
 * @type {string}
 */
mx.messaging.messages.AsyncMessage.prototype.mx_messaging_messages_AsyncMessage__correlationId;


/**
 * @private
 * @type {org.apache.royale.utils.BinaryData}
 */
mx.messaging.messages.AsyncMessage.prototype.mx_messaging_messages_AsyncMessage_correlationIdBytes;


/**
 * @asprivate
 * @export
 * @return {mx.messaging.messages.IMessage}
 */
mx.messaging.messages.AsyncMessage.prototype.getSmallMessage = function() {
  var /** @type {Object} */ o = this;
  if (o.constructor == mx.messaging.messages.AsyncMessage)
    return new mx.messaging.messages.AsyncMessageExt(this);
  return null;
};


/**
 * @asprivate
 * @export
 * @override
 */
mx.messaging.messages.AsyncMessage.prototype.readExternal = function(input) {
  mx.messaging.messages.AsyncMessage.superClass_.readExternal.apply(this, [ input] );
  var /** @type {Array} */ flagsArray = this.readFlags(input);
  for (var /** @type {number} */ i = 0; i < flagsArray.length; i++) {
    var /** @type {number} */ flags = (org.apache.royale.utils.Language.as(flagsArray[i], org.apache.royale.utils.Language.synthType('uint'))) >>> 0;
    var /** @type {number} */ reservedPosition = 0;
    if (i == 0) {
      if ((flags & mx.messaging.messages.AsyncMessage.CORRELATION_ID_FLAG) != 0)
        this.correlationId = org.apache.royale.utils.Language.as(input.readObject(), String);
      if ((flags & mx.messaging.messages.AsyncMessage.CORRELATION_ID_BYTES_FLAG) != 0) {
        this.mx_messaging_messages_AsyncMessage_correlationIdBytes = org.apache.royale.utils.Language.as(input.readObject(), org.apache.royale.utils.BinaryData);
        this.correlationId = mx.utils.RPCUIDUtil.fromBinary(this.mx_messaging_messages_AsyncMessage_correlationIdBytes);
      }
      reservedPosition = 2;
    }
    if ((flags >> reservedPosition) != 0) {
      for (var /** @type {number} */ j = reservedPosition; j < 6; j++) {
        if (((flags >> j) & 1) != 0) {
          input.readObject();
        }
      }
    }
  }
};


/**
 * @asprivate
 * @export
 * @override
 */
mx.messaging.messages.AsyncMessage.prototype.writeExternal = function(output) {
  mx.messaging.messages.AsyncMessage.superClass_.writeExternal.apply(this, [ output] );
  if (this.mx_messaging_messages_AsyncMessage_correlationIdBytes == null)
    this.mx_messaging_messages_AsyncMessage_correlationIdBytes = mx.utils.RPCUIDUtil.toBinary(this.mx_messaging_messages_AsyncMessage__correlationId);
  var /** @type {number} */ flags = 0;
  if (this.correlationId != null && this.mx_messaging_messages_AsyncMessage_correlationIdBytes == null)
    flags |= mx.messaging.messages.AsyncMessage.CORRELATION_ID_FLAG;
  if (this.mx_messaging_messages_AsyncMessage_correlationIdBytes != null)
    flags |= mx.messaging.messages.AsyncMessage.CORRELATION_ID_BYTES_FLAG;
  output.writeByte((flags) >> 0);
  if (this.correlationId != null && this.mx_messaging_messages_AsyncMessage_correlationIdBytes == null)
    output.writeObject(this.correlationId);
  if (this.mx_messaging_messages_AsyncMessage_correlationIdBytes != null)
    output.writeObject(this.mx_messaging_messages_AsyncMessage_correlationIdBytes);
};


/**
 *  @asprivate
 * @export
 * @override
 */
mx.messaging.messages.AsyncMessage.prototype.addDebugAttributes = function(attributes) {
  mx.messaging.messages.AsyncMessage.superClass_.addDebugAttributes.apply(this, [ attributes] );
  attributes["correlationId"] = this.correlationId;
};


mx.messaging.messages.AsyncMessage.prototype.get__correlationId = function() {
  return this.mx_messaging_messages_AsyncMessage__correlationId;
};


mx.messaging.messages.AsyncMessage.prototype.set__correlationId = function(value) {
  this.mx_messaging_messages_AsyncMessage__correlationId = value;
  this.mx_messaging_messages_AsyncMessage_correlationIdBytes = null;
};


Object.defineProperties(mx.messaging.messages.AsyncMessage.prototype, /** @lends {mx.messaging.messages.AsyncMessage.prototype} */ {
/**
  * @export
  * @type {string} */
correlationId: {
get: mx.messaging.messages.AsyncMessage.prototype.get__correlationId,
set: mx.messaging.messages.AsyncMessage.prototype.set__correlationId}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.messages.AsyncMessage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AsyncMessage', qName: 'mx.messaging.messages.AsyncMessage', kind: 'class' }], interfaces: [mx.messaging.messages.ISmallMessage] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.messages.AsyncMessage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'correlationId': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.messages.AsyncMessage'}
      };
    },
    methods: function () {
      return {
        'AsyncMessage': { type: '', declaredBy: 'mx.messaging.messages.AsyncMessage', parameters: function () { return [ 'Object', true ,'Object', true ]; }},
        'getSmallMessage': { type: 'mx.messaging.messages.IMessage', declaredBy: 'mx.messaging.messages.AsyncMessage'},
        'readExternal': { type: 'void', declaredBy: 'mx.messaging.messages.AsyncMessage', parameters: function () { return [ 'org.apache.royale.utils.net.IDataInput', false ]; }},
        'writeExternal': { type: 'void', declaredBy: 'mx.messaging.messages.AsyncMessage', parameters: function () { return [ 'org.apache.royale.utils.net.IDataOutput', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.messages.AsyncMessage.prototype.ROYALE_COMPILE_FLAGS = 26;
