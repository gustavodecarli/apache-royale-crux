/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/utils/services/MockDelegateHelper.as
 * org.apache.royale.crux.utils.services.MockDelegateHelper
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.utils.services.MockDelegateHelper');
/* Royale Dependency List: mx.core.mx_internal,mx.rpc.AsyncToken,mx.rpc.Fault,mx.rpc.events.FaultEvent,mx.rpc.events.ResultEvent,org.apache.royale.events.Event,org.apache.royale.utils.Timer,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {boolean=} showBusyCursor
 */
org.apache.royale.crux.utils.services.MockDelegateHelper = function(showBusyCursor) {
  showBusyCursor = typeof showBusyCursor !== 'undefined' ? showBusyCursor : false;
  
  this.calls = new Map();
  this.showBusyCursor = showBusyCursor;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.utils.services.MockDelegateHelper', org.apache.royale.crux.utils.services.MockDelegateHelper);


/**
 * @export
 * @type {Map}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.calls;


/**
 * @export
 * @type {mx.rpc.Fault}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.fault;


/**
 * @export
 * @type {boolean}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.showBusyCursor;


/**
 * @export
 * @param {Object} mockData
 * @param {number=} delay
 * @return {mx.rpc.AsyncToken}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.createMockResult = function(mockData, delay) {
  delay = typeof delay !== 'undefined' ? delay : 10;
  var /** @type {mx.rpc.AsyncToken} */ token = new mx.rpc.AsyncToken();
  token.data = mockData;
  var /** @type {org.apache.royale.utils.Timer} */ timer = new org.apache.royale.utils.Timer(delay, 1);
  timer.addEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.sendMockResult, this, 'sendMockResult'));
  timer.start();
  
  this.calls.set(timer, token);
  return token;
};


/**
 * @protected
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.sendMockResult = function(event) {
  var /** @type {org.apache.royale.utils.Timer} */ timer = org.apache.royale.utils.Language.as(event.target, org.apache.royale.utils.Timer, true);
  timer.removeEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.sendMockResult, this, 'sendMockResult'));
  
  
/**
 * @const
 * @type {*}
 */
var check = this.calls.get(timer);
  if (org.apache.royale.utils.Language.is(check, mx.rpc.AsyncToken)) {
    var /** @type {mx.rpc.AsyncToken} */ token = org.apache.royale.utils.Language.as(check, mx.rpc.AsyncToken, true);
    
    this.calls.delete(timer);
    var /** @type {Object} */ mockData = (token.data) ? token.data : {};
    token[new QName(mx.core.mx_internal, 'applyResult').objectAccessFormat()](mx.rpc.events.ResultEvent.createEvent(mockData, token));
  }
  timer = null;
};


/**
 * @export
 * @param {mx.rpc.Fault=} fault
 * @param {number=} delay
 * @return {mx.rpc.AsyncToken}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.createMockFault = function(fault, delay) {
  fault = typeof fault !== 'undefined' ? fault : null;
  delay = typeof delay !== 'undefined' ? delay : 10;
  var /** @type {mx.rpc.AsyncToken} */ token = new mx.rpc.AsyncToken();
  token.data = fault;
  var /** @type {org.apache.royale.utils.Timer} */ timer = new org.apache.royale.utils.Timer(delay, 1);
  timer.addEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.sendMockFault, this, 'sendMockFault'));
  timer.start();
  
  this.calls.set(timer, token);
  return token;
};


/**
 * @protected
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.sendMockFault = function(event) {
  var /** @type {org.apache.royale.utils.Timer} */ timer = org.apache.royale.utils.Language.as(event.target, org.apache.royale.utils.Timer, true);
  timer.removeEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.sendMockFault, this, 'sendMockFault'));
  
  
/**
 * @const
 * @type {*}
 */
var check = this.calls.get(timer);
  if (org.apache.royale.utils.Language.is(check, mx.rpc.AsyncToken)) {
    var /** @type {mx.rpc.AsyncToken} */ token = org.apache.royale.utils.Language.as(check, mx.rpc.AsyncToken, true);
    
    this.calls.delete(timer);
    var /** @type {mx.rpc.Fault} */ fault = (token.data) ? token.data : null;
    token[new QName(mx.core.mx_internal, 'applyFault').objectAccessFormat()](mx.rpc.events.FaultEvent.createEvent(fault, token));
  }
  timer = null;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MockDelegateHelper', qName: 'org.apache.royale.crux.utils.services.MockDelegateHelper', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'calls': { type: 'Map', get_set: function (/** org.apache.royale.crux.utils.services.MockDelegateHelper */ inst, /** * */ v) {return v !== undefined ? inst.calls = v : inst.calls;}},
        'fault': { type: 'mx.rpc.Fault', get_set: function (/** org.apache.royale.crux.utils.services.MockDelegateHelper */ inst, /** * */ v) {return v !== undefined ? inst.fault = v : inst.fault;}},
        'showBusyCursor': { type: 'Boolean', get_set: function (/** org.apache.royale.crux.utils.services.MockDelegateHelper */ inst, /** * */ v) {return v !== undefined ? inst.showBusyCursor = v : inst.showBusyCursor;}}
      };
    },
    methods: function () {
      return {
        'MockDelegateHelper': { type: '', declaredBy: 'org.apache.royale.crux.utils.services.MockDelegateHelper', parameters: function () { return [ 'Boolean', true ]; }},
        'createMockResult': { type: 'mx.rpc.AsyncToken', declaredBy: 'org.apache.royale.crux.utils.services.MockDelegateHelper', parameters: function () { return [ 'Object', false ,'int', true ]; }},
        'createMockFault': { type: 'mx.rpc.AsyncToken', declaredBy: 'org.apache.royale.crux.utils.services.MockDelegateHelper', parameters: function () { return [ 'mx.rpc.Fault', true ,'int', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.utils.services.MockDelegateHelper.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./MockDelegateHelper.js.map
