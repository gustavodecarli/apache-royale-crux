/**
 * Generated by Apache Royale Compiler from mx/utils/RPCStringUtil.as
 * mx.utils.RPCStringUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.utils.RPCStringUtil');
/* Royale Dependency List: org.apache.royale.utils.StringUtil,XML*/




/**
 * @constructor
 */
mx.utils.RPCStringUtil = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.utils.RPCStringUtil', mx.utils.RPCStringUtil);


/**
 *  Removes all whitespace characters from the beginning and end
 *  of the specified string.
 *
 *  @asparam str The String whose whitespace should be trimmed. 
 *
 *  @asreturn Updated String where whitespace was removed from the 
 *  beginning and end. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} str
 * @return {string}
 */
mx.utils.RPCStringUtil.trim = function(str) {
  return org.apache.royale.utils.StringUtil.trim(str);
};


/**
 *  Removes all whitespace characters from the beginning and end
 *  of each element in an Array, where the Array is stored as a String. 
 *
 *  @asparam value The String whose whitespace should be trimmed. 
 *
 *  @asparam separator The String that delimits each Array element in the string.
 *
 *  @asreturn Updated String where whitespace was removed from the 
 *  beginning and end of each element. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} value
 * @param {string} delimiter
 * @return {string}
 */
mx.utils.RPCStringUtil.trimArrayElements = function(value, delimiter) {
  return org.apache.royale.utils.StringUtil.trimArrayElements(value, delimiter);
};


/**
 *  Returns <code>true</code> if the specified string is
 *  a single space, tab, carriage return, newline, or formfeed character.
 *
 *  @asparam str The String that is is being queried. 
 *
 *  @asreturn <code>true</code> if the specified string is
 *  a single space, tab, carriage return, newline, or formfeed character.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} character
 * @return {boolean}
 */
mx.utils.RPCStringUtil.isWhitespace = function(character) {
  return org.apache.royale.utils.StringUtil.isWhitespace(character);
};


/**
 *  Substitutes "{n}" tokens within the specified string
 *  with the respective arguments passed in.
 * 
 *  Note that this uses String.replace and "$" can have special
 *  meaning in the argument strings escape by using "$$".
 *
 *  @asparam str The string to make substitutions in.
 *  This string can contain special tokens of the form
 *  <code>{n}</code>, where <code>n</code> is a zero based index,
 *  that will be replaced with the additional parameters
 *  found at that index if specified.
 *
 *  @asparam rest Additional parameters that can be substituted
 *  in the <code>str</code> parameter at each <code>{n}</code>
 *  location, where <code>n</code> is an integer (zero based)
 *  index value into the array of values specified.
 *  If the first parameter is an array this array will be used as
 *  a parameter list.
 *  This allows reuse of this routine in other methods that want to
 *  use the ... rest signature.
 *  For example <pre>
 *     public function myTracer(str:String, ... rest):void
 *     { 
 *         label.text += StringUtil.substitute(str, rest) + "\n";
 *     } </pre>
 *
 *  @asreturn New string with all of the <code>{n}</code> tokens
 *  replaced with the respective arguments specified.
 *
 *  @example
 *
 *  var str:String = "here is some info '{0}' and {1}";
 *  trace(StringUtil.substitute(str, 15.4, true));
 *
 *  // this will output the following string:
 *  // "here is some info '15.4' and true"
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} str
 * @param {...} rest
 * @return {string}
 */
mx.utils.RPCStringUtil.substitute = function(str, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  rest.unshift(str);
  return org.apache.royale.utils.Language.string(org.apache.royale.utils.StringUtil.substitute.call(null, rest));
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.utils.RPCStringUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RPCStringUtil', qName: 'mx.utils.RPCStringUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.utils.RPCStringUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|trim': { type: 'String', declaredBy: 'mx.utils.RPCStringUtil', parameters: function () { return [ 'String', false ]; }},
        '|trimArrayElements': { type: 'String', declaredBy: 'mx.utils.RPCStringUtil', parameters: function () { return [ 'String', false ,'String', false ]; }},
        '|isWhitespace': { type: 'Boolean', declaredBy: 'mx.utils.RPCStringUtil', parameters: function () { return [ 'String', false ]; }},
        '|substitute': { type: 'String', declaredBy: 'mx.utils.RPCStringUtil', parameters: function () { return [ 'String', false ,'Array', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.utils.RPCStringUtil.prototype.ROYALE_COMPILE_FLAGS = 26;
