/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/Crux.as
 * org.apache.royale.crux.Crux
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.Crux');
/* Royale Dependency List: org.apache.royale.core.IStrand,org.apache.royale.crux.BeanFactory,org.apache.royale.crux.CruxConfig,org.apache.royale.crux.CruxManager,org.apache.royale.crux.IBeanFactory,org.apache.royale.crux.IBeanProvider,org.apache.royale.crux.ICruxConfig,org.apache.royale.crux.events.CruxEvent,org.apache.royale.crux.processors.CruxInterfaceProcessor,org.apache.royale.crux.processors.DispatcherProcessor,org.apache.royale.crux.processors.EventHandlerProcessor,org.apache.royale.crux.processors.IProcessor,org.apache.royale.crux.processors.InjectProcessor,org.apache.royale.crux.processors.PostConstructProcessor,org.apache.royale.crux.processors.PreDestroyProcessor,org.apache.royale.crux.processors.ProcessorPriority,org.apache.royale.crux.processors.ViewProcessor,org.apache.royale.events.IEventDispatcher,org.apache.royale.reflection.ExtraData,org.apache.royale.reflection.TypeDefinition,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.crux.ICrux');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.core.IBead');



/**
 * Constructor
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IBead}
 * @implements {org.apache.royale.crux.ICrux}
 * @param {org.apache.royale.events.IEventDispatcher=} dispatcher
 * @param {org.apache.royale.crux.ICruxConfig=} config
 * @param {org.apache.royale.crux.IBeanFactory=} beanFactory
 * @param {Array=} beanProviders
 * @param {Array=} customProcessors
 */
org.apache.royale.crux.Crux = function(dispatcher, config, beanFactory, beanProviders, customProcessors) {
  dispatcher = typeof dispatcher !== 'undefined' ? dispatcher : null;
  config = typeof config !== 'undefined' ? config : null;
  beanFactory = typeof beanFactory !== 'undefined' ? beanFactory : null;
  beanProviders = typeof beanProviders !== 'undefined' ? beanProviders : null;
  customProcessors = typeof customProcessors !== 'undefined' ? customProcessors : null;
  
  this._processors = [new org.apache.royale.crux.processors.InjectProcessor(), new org.apache.royale.crux.processors.DispatcherProcessor(), new org.apache.royale.crux.processors.EventHandlerProcessor(), new org.apache.royale.crux.processors.CruxInterfaceProcessor(), new org.apache.royale.crux.processors.PostConstructProcessor(), new org.apache.royale.crux.processors.PreDestroyProcessor(), new org.apache.royale.crux.processors.ViewProcessor()];
  org.apache.royale.crux.Crux.base(this, 'constructor');
  this.dispatcher = dispatcher;
  this.config = config;
  this.beanFactory = beanFactory;
  this.beanProviders = beanProviders;
  this.customProcessors = customProcessors;
};
goog.inherits(org.apache.royale.crux.Crux, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.Crux', org.apache.royale.crux.Crux);


/**
 * @private
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.crux.Crux.prototype.org_apache_royale_crux_Crux__strand;


/**
 * @protected
 * @type {org.apache.royale.events.IEventDispatcher}
 */
org.apache.royale.crux.Crux.prototype._dispatcher;


/**
 * @protected
 * @type {org.apache.royale.events.IEventDispatcher}
 */
org.apache.royale.crux.Crux.prototype._globalDispatcher;


/**
 * @protected
 * @type {org.apache.royale.crux.ICruxConfig}
 */
org.apache.royale.crux.Crux.prototype._config;


/**
 * @protected
 * @type {org.apache.royale.crux.IBeanFactory}
 */
org.apache.royale.crux.Crux.prototype._beanFactory;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.Crux.prototype._beanProviders;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.Crux.prototype._processors;


/**
 * @protected
 * @type {org.apache.royale.crux.ICrux}
 */
org.apache.royale.crux.Crux.prototype._parentCrux;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.crux.Crux.prototype._catchViews = true;


/**
 * initialize Crux
 * @export
 */
org.apache.royale.crux.Crux.prototype.init = function() {
  org.apache.royale.reflection.ExtraData.addAll();
  org.apache.royale.reflection.TypeDefinition["useCache"] = true;
  org.apache.royale.crux.CruxManager.addCrux(this);
  if (this.dispatcher == null) {
    this.dispatcher = this;
  }
  if (this.config == null) {
    this.config = new org.apache.royale.crux.CruxConfig();
  }
  if (this.beanFactory == null) {
    this.beanFactory = new org.apache.royale.crux.BeanFactory();
  }
  this.dispatchCruxCreatedEvent();
  if (this.parentCrux != null) {
    this._beanFactory.parentBeanFactory = this._parentCrux.beanFactory;
    this.globalDispatcher = this.parentCrux.globalDispatcher;
    this.config.eventPackages = this.config.eventPackages.concat(this._parentCrux.config.eventPackages);
    this.config.viewPackages = this.config.viewPackages.concat(this._parentCrux.config.viewPackages);
  }
  if (this.globalDispatcher == null) {
    this.globalDispatcher = this.dispatcher;
  }
  this.constructProviders();
  this.initializeProcessors();
  this.beanFactory.setUp(this);
};


/**
 * CruxConfig can accept bean providers as Classes as well as instances. ContructProviders
 * ensures that provider is created and initialized before the bean factory accesses them.
 * @protected
 */
org.apache.royale.crux.Crux.prototype.constructProviders = function() {
  var /** @type {Object} */ providerClass;
  var /** @type {org.apache.royale.crux.IBeanProvider} */ providerInst;
  if (this.beanProviders == null)
    return;
  for (var /** @type {number} */ i = 0; i < this.beanProviders.length; i++) {
    if (org.apache.royale.utils.Language.is(this.beanProviders[i], org.apache.royale.utils.Language.synthType('Class'))) {
      providerClass = org.apache.royale.utils.Language.as(this.beanProviders[i], org.apache.royale.utils.Language.synthType('Class'));
      providerInst = new providerClass();
      this.beanProviders[i] = providerInst;
    } else {
      providerInst = this.beanProviders[i];
    }
    providerInst.initialize();
  }
};


/**
 * @protected
 */
org.apache.royale.crux.Crux.prototype.initializeProcessors = function() {
  org.apache.royale.utils.Language.sortOn(this.processors, "priority", 2 | 16);
  var foreachiter0_target = this.processors;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var processor = foreachiter0_target[foreachiter0];
  {
    processor.init(this);
  }}
  
};


/**
 * Clean up this Crux instance
 * @export
 */
org.apache.royale.crux.Crux.prototype.tearDown = function() {
  org.apache.royale.crux.CruxManager.tearDownAllWiredViewsForCruxInstance(this);
  this.beanFactory.tearDown();
  this.dispatcher.removeEventListener(org.apache.royale.crux.events.CruxEvent.CREATED, org.apache.royale.utils.Language.closure(this.handleCruxCreatedEvent, this, 'handleCruxCreatedEvent'));
  this.parentCrux = null;
  org.apache.royale.crux.CruxManager.removeCrux(this);
};


/**
 * Dispatches a Crux creation event to find parents and attaches a listener to
 * find potential children.
 * @protected
 */
org.apache.royale.crux.Crux.prototype.dispatchCruxCreatedEvent = function() {
  this.dispatcher.dispatchEvent(new org.apache.royale.crux.events.CruxEvent(org.apache.royale.crux.events.CruxEvent.CREATED, this));
  this.dispatcher.addEventListener(org.apache.royale.crux.events.CruxEvent.CREATED, org.apache.royale.utils.Language.closure(this.handleCruxCreatedEvent, this, 'handleCruxCreatedEvent'));
};


/**
 * Receives Crux creation events from potential child Crux instances, and sets this instance
 * as the parent. Relies on display list ordering as a means of conveying parent / child
 * relationships. Pure AS projects will need to call setParent explicitly.
 * @protected
 * @param {org.apache.royale.crux.events.CruxEvent} event
 */
org.apache.royale.crux.Crux.prototype.handleCruxCreatedEvent = function(event) {
  if (event.crux != null && event.crux.parentCrux == null) {
    event.stopImmediatePropagation();
    event.crux.parentCrux = this;
  }
};


org.apache.royale.crux.Crux.prototype.set__strand = function(value) {
  this.org_apache_royale_crux_Crux__strand = value;
  if (this.dispatcher == null && org.apache.royale.utils.Language.is(value, org.apache.royale.events.IEventDispatcher))
    this.dispatcher = value;
  this.init();
};


org.apache.royale.crux.Crux.prototype.get__dispatcher = function() {
  return this._dispatcher;
};


org.apache.royale.crux.Crux.prototype.set__dispatcher = function(value) {
  this._dispatcher = value;
};


org.apache.royale.crux.Crux.prototype.get__globalDispatcher = function() {
  return this._globalDispatcher;
};


org.apache.royale.crux.Crux.prototype.set__globalDispatcher = function(value) {
  this._globalDispatcher = value;
};


org.apache.royale.crux.Crux.prototype.get__config = function() {
  return this._config;
};


org.apache.royale.crux.Crux.prototype.set__config = function(value) {
  this._config = value;
};


org.apache.royale.crux.Crux.prototype.get__beanFactory = function() {
  return this._beanFactory;
};


org.apache.royale.crux.Crux.prototype.set__beanFactory = function(value) {
  this._beanFactory = value;
};


org.apache.royale.crux.Crux.prototype.get__beanProviders = function() {
  return this._beanProviders;
};


org.apache.royale.crux.Crux.prototype.set__beanProviders = function(value) {
  this._beanProviders = value;
};


org.apache.royale.crux.Crux.prototype.get__processors = function() {
  return this._processors;
};


org.apache.royale.crux.Crux.prototype.set__customProcessors = function(value) {
  if (value != null) {
    var /** @type {org.apache.royale.crux.processors.IProcessor} */ processor;
    for (var /** @type {number} */ i = 0; i < value.length; i++) {
      processor = org.apache.royale.utils.Language.as(value[i], org.apache.royale.crux.processors.IProcessor, true);
      if (processor.priority == org.apache.royale.crux.processors.ProcessorPriority.DEFAULT) {
        this._processors.push(processor);
      } else {
        var /** @type {boolean} */ found = false;
        for (var /** @type {number} */ j = 0; j < this._processors.length; j++) {
          if (org.apache.royale.utils.Language.as(this._processors[j], org.apache.royale.crux.processors.IProcessor, true).priority == processor.priority) {
            this._processors[j] = processor;
            found = true;
            break;
          }
        }
        if (!found)
          this._processors.push(processor);
      }
    }
  }
};


org.apache.royale.crux.Crux.prototype.get__parentCrux = function() {
  return this._parentCrux;
};


org.apache.royale.crux.Crux.prototype.set__parentCrux = function(parentCrux) {
  this._parentCrux = parentCrux;
};


org.apache.royale.crux.Crux.prototype.get__catchViews = function() {
  return this._catchViews;
};


org.apache.royale.crux.Crux.prototype.set__catchViews = function(value) {
  this._catchViews = value;
};


Object.defineProperties(org.apache.royale.crux.Crux.prototype, /** @lends {org.apache.royale.crux.Crux.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: org.apache.royale.crux.Crux.prototype.set__strand},
/**
  * @export
  * @type {org.apache.royale.events.IEventDispatcher} */
dispatcher: {
get: org.apache.royale.crux.Crux.prototype.get__dispatcher,
set: org.apache.royale.crux.Crux.prototype.set__dispatcher},
/**
  * @export
  * @type {org.apache.royale.events.IEventDispatcher} */
globalDispatcher: {
get: org.apache.royale.crux.Crux.prototype.get__globalDispatcher,
set: org.apache.royale.crux.Crux.prototype.set__globalDispatcher},
/**
  * @export
  * @type {org.apache.royale.crux.ICruxConfig} */
config: {
get: org.apache.royale.crux.Crux.prototype.get__config,
set: org.apache.royale.crux.Crux.prototype.set__config},
/**
  * @export
  * @type {org.apache.royale.crux.IBeanFactory} */
beanFactory: {
get: org.apache.royale.crux.Crux.prototype.get__beanFactory,
set: org.apache.royale.crux.Crux.prototype.set__beanFactory},
/**
  * @export
  * @type {Array} */
beanProviders: {
get: org.apache.royale.crux.Crux.prototype.get__beanProviders,
set: org.apache.royale.crux.Crux.prototype.set__beanProviders},
/**
  * @export
  * @type {Array} */
processors: {
get: org.apache.royale.crux.Crux.prototype.get__processors},
/**
  * @export
  * @type {Array} */
customProcessors: {
set: org.apache.royale.crux.Crux.prototype.set__customProcessors},
/**
  * @export
  * @type {org.apache.royale.crux.ICrux} */
parentCrux: {
get: org.apache.royale.crux.Crux.prototype.get__parentCrux,
set: org.apache.royale.crux.Crux.prototype.set__parentCrux},
/**
  * @export
  * @type {boolean} */
catchViews: {
get: org.apache.royale.crux.Crux.prototype.get__catchViews,
set: org.apache.royale.crux.Crux.prototype.set__catchViews}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.Crux.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Crux', qName: 'org.apache.royale.crux.Crux', kind: 'class' }], interfaces: [org.apache.royale.core.IBead, org.apache.royale.crux.ICrux] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.Crux.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.crux.Crux'},
        'dispatcher': { type: 'org.apache.royale.events.IEventDispatcher', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'globalDispatcher': { type: 'org.apache.royale.events.IEventDispatcher', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'config': { type: 'org.apache.royale.crux.ICruxConfig', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'beanFactory': { type: 'org.apache.royale.crux.IBeanFactory', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'beanProviders': { type: 'Array', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'processors': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.crux.Crux'},
        'customProcessors': { type: 'Array', access: 'writeonly', declaredBy: 'org.apache.royale.crux.Crux'},
        'parentCrux': { type: 'org.apache.royale.crux.ICrux', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'},
        'catchViews': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Crux'}
      };
    },
    methods: function () {
      return {
        'Crux': { type: '', declaredBy: 'org.apache.royale.crux.Crux', parameters: function () { return [ 'org.apache.royale.events.IEventDispatcher', true ,'org.apache.royale.crux.ICruxConfig', true ,'org.apache.royale.crux.IBeanFactory', true ,'Array', true ,'Array', true ]; }},
        'init': { type: 'void', declaredBy: 'org.apache.royale.crux.Crux'},
        'tearDown': { type: 'void', declaredBy: 'org.apache.royale.crux.Crux'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.Crux.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./Crux.js.map
