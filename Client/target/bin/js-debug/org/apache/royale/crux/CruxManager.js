/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/CruxManager.as
 * org.apache.royale.crux.CruxManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.CruxManager');
/* Royale Dependency List: org.apache.royale.core.IFlexInfo,org.apache.royale.core.UIBase,org.apache.royale.crux.BeanFactory,org.apache.royale.crux.ICrux,org.apache.royale.crux.processors.IMetadataProcessor,org.apache.royale.crux.processors.IProcessor,org.apache.royale.crux.utils.view.applicationContains,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.crux.CruxManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.CruxManager', org.apache.royale.crux.CruxManager);


/**
 * @export
 * @type {Array}
 */
org.apache.royale.crux.CruxManager.cruxes = [];


/**
 * @export
 * @type {Map}
 */
org.apache.royale.crux.CruxManager.wiredViews = new Map();


/**
 * @export
 * @type {Array}
 */
org.apache.royale.crux.CruxManager.metadataNames = [];


/**
 * @export
 * @param {org.apache.royale.crux.ICrux} crux
 */
org.apache.royale.crux.CruxManager.addCrux = function(crux) {
  org.apache.royale.crux.CruxManager.cruxes.push(crux);
  var foreachiter0_target = crux.processors;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var p = foreachiter0_target[foreachiter0];
  {
    if (org.apache.royale.utils.Language.is(p, org.apache.royale.crux.processors.IMetadataProcessor)) {
      org.apache.royale.crux.CruxManager.metadataNames = org.apache.royale.crux.CruxManager.metadataNames.concat(org.apache.royale.utils.Language.as(p, org.apache.royale.crux.processors.IMetadataProcessor, true).metadataNames);
    }
  }}
  
};


/**
 * @export
 * @param {org.apache.royale.crux.ICrux} crux
 */
org.apache.royale.crux.CruxManager.removeCrux = function(crux) {
  org.apache.royale.crux.CruxManager.cruxes.splice(org.apache.royale.crux.CruxManager.cruxes.indexOf(crux), 1);
};


/**
 * @export
 * @param {org.apache.royale.core.UIBase} view
 */
org.apache.royale.crux.CruxManager.setUp = function(view) {
  
  if (org.apache.royale.crux.CruxManager.wiredViews.get(view) != null)
    return;
  for (var /** @type {number} */ i = (org.apache.royale.crux.CruxManager.cruxes.length - 1) >> 0; i > -1; i--) {
    var /** @type {org.apache.royale.crux.ICrux} */ crux = org.apache.royale.utils.Language.as(org.apache.royale.crux.CruxManager.cruxes[i], org.apache.royale.crux.ICrux, true);
    if (org.apache.royale.crux.utils.view.applicationContains(org.apache.royale.utils.Language.as(crux.dispatcher, org.apache.royale.core.IFlexInfo, true), view)) {
      org.apache.royale.crux.CruxManager.setUpView(view, crux);
      return;
    }
  }
  org.apache.royale.crux.CruxManager.setUpView(view, org.apache.royale.utils.Language.as(org.apache.royale.crux.CruxManager.cruxes[0], org.apache.royale.crux.ICrux, true));
};


/**
 * @private
 * @param {org.apache.royale.core.UIBase} viewToWire
 * @param {org.apache.royale.crux.ICrux} cruxInstance
 */
org.apache.royale.crux.CruxManager.setUpView = function(viewToWire, cruxInstance) {
  
  org.apache.royale.crux.CruxManager.wiredViews.set(viewToWire, cruxInstance);
  cruxInstance.beanFactory.setUpBean(org.apache.royale.crux.BeanFactory.constructBean(viewToWire, null));
};


/**
 * @export
 * @param {org.apache.royale.core.UIBase} wiredView
 */
org.apache.royale.crux.CruxManager.tearDown = function(wiredView) {
  
  if (org.apache.royale.crux.CruxManager.wiredViews.get(wiredView) == null)
    return;
  for (var /** @type {number} */ i = (org.apache.royale.crux.CruxManager.cruxes.length - 1) >> 0; i > -1; i--) {
    var /** @type {org.apache.royale.crux.ICrux} */ crux = org.apache.royale.utils.Language.as(org.apache.royale.crux.CruxManager.cruxes[i], org.apache.royale.crux.ICrux, true);
    if (crux.dispatcher == wiredView) {
      crux.tearDown();
      return;
    }
  }
  
  crux = org.apache.royale.crux.CruxManager.wiredViews.get(wiredView);
  org.apache.royale.crux.CruxManager.tearDownWiredView(wiredView, crux);
};


/**
 * @export
 * @param {org.apache.royale.core.UIBase} wiredView
 * @param {org.apache.royale.crux.ICrux} cruxInstance
 */
org.apache.royale.crux.CruxManager.tearDownWiredView = function(wiredView, cruxInstance) {
  
  org.apache.royale.crux.CruxManager.wiredViews.delete(wiredView);
  cruxInstance.beanFactory.tearDownBean(org.apache.royale.crux.BeanFactory.constructBean(wiredView, null));
};


/**
 * @export
 * @param {org.apache.royale.crux.ICrux} cruxInstance
 */
org.apache.royale.crux.CruxManager.tearDownAllWiredViewsForCruxInstance = function(cruxInstance) {
  
  org.apache.royale.crux.CruxManager.wiredViews.forEach(function(value, wiredView) {
    if (value == cruxInstance) {
      org.apache.royale.crux.CruxManager.tearDownWiredView(wiredView, cruxInstance);
    }
  });
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.CruxManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CruxManager', qName: 'org.apache.royale.crux.CruxManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.CruxManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|cruxes': { type: 'Array', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.crux.CruxManager.cruxes = v : org.apache.royale.crux.CruxManager.cruxes;}},
        '|wiredViews': { type: 'Map', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.crux.CruxManager.wiredViews = v : org.apache.royale.crux.CruxManager.wiredViews;}},
        '|metadataNames': { type: 'Array', get_set: function (/** * */ v) {return v !== undefined ? org.apache.royale.crux.CruxManager.metadataNames = v : org.apache.royale.crux.CruxManager.metadataNames;}}
      };
    },
    methods: function () {
      return {
        '|addCrux': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.crux.ICrux', false ]; }},
        '|removeCrux': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.crux.ICrux', false ]; }},
        '|setUp': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.core.UIBase', false ]; }},
        '|tearDown': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.core.UIBase', false ]; }},
        '|tearDownWiredView': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.core.UIBase', false ,'org.apache.royale.crux.ICrux', false ]; }},
        '|tearDownAllWiredViewsForCruxInstance': { type: 'void', declaredBy: 'org.apache.royale.crux.CruxManager', parameters: function () { return [ 'org.apache.royale.crux.ICrux', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.CruxManager.prototype.ROYALE_COMPILE_FLAGS = 10;
