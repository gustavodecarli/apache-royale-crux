/**
 * Generated by Apache Royale Compiler from mx/rpc/AbstractOperation.as
 * mx.rpc.AbstractOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.AbstractOperation');
/* Royale Dependency List: mx.core.mx_internal,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.rpc.AbstractService,mx.rpc.AsyncToken,mx.rpc.events.AbstractEvent,XML*/

goog.require('mx.rpc.AbstractInvoker');



/**
 * Creates a new Operation. This is usually done directly by the MXML
 * compiler or automatically by the service when an unknown Operation has
 * been accessed. It is not recommended that a developer use this
 * constructor directly.
 *  
 *  @asparam service The service on which the Operation is being invoked.
 *  
 *  @asparam name The name of the new Operation.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.AbstractInvoker}
 * @param {mx.rpc.AbstractService=} service
 * @param {string=} name
 */
mx.rpc.AbstractOperation = function(service, name) {
  service = typeof service !== 'undefined' ? service : null;
  name = typeof name !== 'undefined' ? name : null;
  
  this.mx_rpc_AbstractOperation_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.rpc.AbstractOperation.base(this, 'constructor');
  this.http_$$www_adobe_com$2006$flex$mx$internal___service = service;
  this.mx_rpc_AbstractOperation__name = name;
  this.arguments = {};
};
goog.inherits(mx.rpc.AbstractOperation, mx.rpc.AbstractInvoker);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.AbstractOperation', mx.rpc.AbstractOperation);


/**
 * @export
 * @type {Object}
 */
mx.rpc.AbstractOperation.prototype.arguments;


/**
 * @export
 * @type {Object}
 */
mx.rpc.AbstractOperation.prototype.properties;


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.rpc.AbstractOperation.prototype.mx_rpc_AbstractOperation_resourceManager;


/**
 * @asprivate
 * @export
 * @param {mx.rpc.AbstractService} s
 */
mx.rpc.AbstractOperation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setService = function(s) {
  if (!this.http_$$www_adobe_com$2006$flex$mx$internal___service) {
    this.http_$$www_adobe_com$2006$flex$mx$internal___service = s;
  } else {
    var /** @type {string} */ message = this.mx_rpc_AbstractOperation_resourceManager.getString("rpc", "cannotResetService");
    throw new Error(message);
  }
};


/**
 * Executes the method. Any arguments passed in are passed along as part of
 * the method call. If there are no arguments passed, the arguments object
 * is used as the source of parameters.
 *
 * @asparam args Optional arguments passed in as part of the method call. If there
 * are no arguments passed, the arguments object is used as the source of 
 * parameters.
 *
 * @asreturn AsyncToken object.
 * The same object is available in the <code>result</code> and
 * <code>fault</code> events from the <code>token</code> property.
 *
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {...} args
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.AbstractOperation.prototype.send = function(args) {
  args = Array.prototype.slice.call(arguments, 0);
  return null;
};


/**
 * @export
 * @override
 */
mx.rpc.AbstractOperation.prototype.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent = function(event) {
  event.http_$$www_adobe_com$2006$flex$mx$internal__callTokenResponders();
  if (!event.isDefaultPrevented()) {
    if (this.hasEventListener(event.type)) {
      this.dispatchEvent(event);
    } else {
      if (this.http_$$www_adobe_com$2006$flex$mx$internal___service != null)
        this.http_$$www_adobe_com$2006$flex$mx$internal___service.dispatchEvent(event);
    }
  }
};


/**
 * @type {mx.rpc.AbstractService}
 */
mx.rpc.AbstractOperation.prototype.http_$$www_adobe_com$2006$flex$mx$internal___service;


/**
 * @private
 * @type {string}
 */
mx.rpc.AbstractOperation.prototype.mx_rpc_AbstractOperation__name;


mx.rpc.AbstractOperation.prototype.get__name = function() {
  return this.mx_rpc_AbstractOperation__name;
};


mx.rpc.AbstractOperation.prototype.set__name = function(n) {
  if (!this.mx_rpc_AbstractOperation__name) {
    this.mx_rpc_AbstractOperation__name = n;
  } else {
    var /** @type {string} */ message = this.mx_rpc_AbstractOperation_resourceManager.getString("rpc", "cannotResetOperationName");
    throw new Error(message);
  }
};


mx.rpc.AbstractOperation.prototype.get__service = function() {
  return this.http_$$www_adobe_com$2006$flex$mx$internal___service;
};


Object.defineProperties(mx.rpc.AbstractOperation.prototype, /** @lends {mx.rpc.AbstractOperation.prototype} */ {
/**
  * @export
  * @type {string} */
name: {
get: mx.rpc.AbstractOperation.prototype.get__name,
set: mx.rpc.AbstractOperation.prototype.set__name},
/**
  * @export
  * @type {mx.rpc.AbstractService} */
service: {
get: mx.rpc.AbstractOperation.prototype.get__service}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.AbstractOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AbstractOperation', qName: 'mx.rpc.AbstractOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.AbstractOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'arguments': { type: 'Object', get_set: function (/** mx.rpc.AbstractOperation */ inst, /** * */ v) {return v !== undefined ? inst.arguments = v : inst.arguments;}},
        'properties': { type: 'Object', get_set: function (/** mx.rpc.AbstractOperation */ inst, /** * */ v) {return v !== undefined ? inst.properties = v : inst.properties;}},
        'http://www.adobe.com/2006/flex/mx/internal::_service': { type: 'mx.rpc.AbstractService', get_set: function (/** mx.rpc.AbstractOperation */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal___service = v : inst.http_$$www_adobe_com$2006$flex$mx$internal___service;}}
      };
    },
    accessors: function () {
      return {
        'name': { type: 'String', access: 'readwrite', declaredBy: 'mx.rpc.AbstractOperation'},
        'service': { type: 'mx.rpc.AbstractService', access: 'readonly', declaredBy: 'mx.rpc.AbstractOperation'}
      };
    },
    methods: function () {
      return {
        'AbstractOperation': { type: '', declaredBy: 'mx.rpc.AbstractOperation', parameters: function () { return [ 'mx.rpc.AbstractService', true ,'String', true ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::setService': { type: 'void', declaredBy: 'mx.rpc.AbstractOperation', parameters: function () { return [ 'mx.rpc.AbstractService', false ]; }},
        'send': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.AbstractOperation', parameters: function () { return [ 'Array', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::dispatchRpcEvent': { type: 'void', declaredBy: 'mx.rpc.AbstractOperation', parameters: function () { return [ 'mx.rpc.events.AbstractEvent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.AbstractOperation.prototype.ROYALE_COMPILE_FLAGS = 26;
