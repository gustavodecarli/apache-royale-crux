/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/metadata/EventTypeExpression.as
 * org.apache.royale.crux.metadata.EventTypeExpression
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.metadata.EventTypeExpression');
/* Royale Dependency List: org.apache.royale.crux.ICrux,org.apache.royale.crux.reflection.ClassConstant,org.apache.royale.crux.reflection.Constant,org.apache.royale.crux.reflection.TypeCache,org.apache.royale.crux.reflection.TypeDescriptor*/




/**
 * Constructor
 * @constructor
 * @param {string} expression
 * @param {org.apache.royale.crux.ICrux} crux
 */
org.apache.royale.crux.metadata.EventTypeExpression = function(expression, crux) {
  this.crux = crux;
  this.expression = expression;
  this.parse();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.metadata.EventTypeExpression', org.apache.royale.crux.metadata.EventTypeExpression);


/**
 * @protected
 * @type {org.apache.royale.crux.ICrux}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.crux;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.expression;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype._eventClass;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype._eventTypes;


/**
 * Parse event type expression.
 *
 * Processes an event type expression into an event class and type. Accepts a String specifying either the event type
 * (ex. 'type') or a class constant reference (ex. 'SomeEvent.TYPE').  If a class constant reference is specified,
 * it will be evaluated to obtain its String value.  If a ".*" wildcard is specified, all constants will evaluated.
 *
 * Class constant references are only supported in 'strict' mode.
 * @protected
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.parse = function() {
  if (this.crux.config.strict && org.apache.royale.crux.reflection.ClassConstant.isClassConstant(this.expression)) {
    this._eventClass = org.apache.royale.crux.reflection.ClassConstant.getClass(this.expression, this.crux.config.eventPackages);
    if (this.expression.substr(-2) == ".*") {
      var /** @type {org.apache.royale.crux.reflection.TypeDescriptor} */ td = org.apache.royale.crux.reflection.TypeCache.getTypeDescriptor(this._eventClass);
      this._eventTypes = new Array();
      var foreachiter0_target = td.constants;
      for (var foreachiter0 in foreachiter0_target) 
      {
      var constant = foreachiter0_target[foreachiter0];
      
        this._eventTypes.push(constant.value);}
      
    } else {
      this._eventTypes = [org.apache.royale.crux.reflection.ClassConstant.getConstantValue(this._eventClass, org.apache.royale.crux.reflection.ClassConstant.getConstantName(this.expression))];
    }
  } else {
    this._eventClass = null;
    this._eventTypes = [this.expression];
  }
};


org.apache.royale.crux.metadata.EventTypeExpression.prototype.get__eventClass = function() {
  return this._eventClass;
};


org.apache.royale.crux.metadata.EventTypeExpression.prototype.get__eventTypes = function() {
  return this._eventTypes;
};


Object.defineProperties(org.apache.royale.crux.metadata.EventTypeExpression.prototype, /** @lends {org.apache.royale.crux.metadata.EventTypeExpression.prototype} */ {
/**
  * @export
  * @type {Object} */
eventClass: {
get: org.apache.royale.crux.metadata.EventTypeExpression.prototype.get__eventClass},
/**
  * @export
  * @type {Array} */
eventTypes: {
get: org.apache.royale.crux.metadata.EventTypeExpression.prototype.get__eventTypes}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventTypeExpression', qName: 'org.apache.royale.crux.metadata.EventTypeExpression', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'eventClass': { type: 'Class', access: 'readonly', declaredBy: 'org.apache.royale.crux.metadata.EventTypeExpression'},
        'eventTypes': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.crux.metadata.EventTypeExpression'}
      };
    },
    methods: function () {
      return {
        'EventTypeExpression': { type: '', declaredBy: 'org.apache.royale.crux.metadata.EventTypeExpression', parameters: function () { return [ 'String', false ,'org.apache.royale.crux.ICrux', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.metadata.EventTypeExpression.prototype.ROYALE_COMPILE_FLAGS = 10;
