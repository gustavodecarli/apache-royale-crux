/**
 * Generated by Apache Royale Compiler from mx/rpc/remoting/mxml/RemoteObject.as
 * mx.rpc.remoting.mxml.RemoteObject
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.remoting.mxml.RemoteObject');
/* Royale Dependency List: mx.core.mx_internal,mx.events.ErrorEvent,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.rpc.AbstractOperation,mx.rpc.events.FaultEvent,mx.rpc.remoting.mxml.Operation,org.apache.royale.events.Event,org.apache.royale.utils.Language,XML*/

goog.require('mx.rpc.remoting.RemoteObject');
goog.require('mx.core.IMXMLObject');
goog.require('mx.rpc.mxml.IMXMLSupport');
goog.require('org.apache.royale.core.IDocument');



/**
 * Create a new RemoteObject.
 * 
 *  @asparam destination The destination of the RemoteObject, should match a destination name 
 * in the services-config.xml file.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.remoting.RemoteObject}
 * @implements {mx.rpc.mxml.IMXMLSupport}
 * @implements {mx.core.IMXMLObject}
 * @implements {org.apache.royale.core.IDocument}
 * @param {string=} destination
 */
mx.rpc.remoting.mxml.RemoteObject = function(destination) {
  destination = typeof destination !== 'undefined' ? destination : null;
  
  this.mx_rpc_remoting_mxml_RemoteObject_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.rpc.remoting.mxml.RemoteObject.base(this, 'constructor', destination);
};
goog.inherits(mx.rpc.remoting.mxml.RemoteObject, mx.rpc.remoting.RemoteObject);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.remoting.mxml.RemoteObject', mx.rpc.remoting.mxml.RemoteObject);


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.mx_rpc_remoting_mxml_RemoteObject_resourceManager;


/**
 * If this event is an error or fault, and the event type does not
 * have a listener, we notify the parent document.  If the     
 * parent document does not have a listener, then we throw
 * a runtime exception.  However, this is an asynchronous runtime
 * exception which is only exposed through the debug player.
 * A listener should be defined.
 *
 * @asprivate
 * @export
 * @override
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.dispatchEvent = function(event) {
  if (this.hasEventListener(event.type)) {
    return mx.rpc.remoting.mxml.RemoteObject.superClass_.dispatchEvent.apply(this, [ event] );
  } else if ((org.apache.royale.utils.Language.is(event, mx.rpc.events.FaultEvent) && !this.http_$$www_adobe_com$2006$flex$mx$internal__hasTokenResponders(event)) || org.apache.royale.utils.Language.is(event, mx.events.ErrorEvent)) {
    var /** @type {string} */ reason = org.apache.royale.utils.Language.is(event, mx.rpc.events.FaultEvent) ? org.apache.royale.utils.Language.as(event, mx.rpc.events.FaultEvent, true).fault.faultString : org.apache.royale.utils.Language.as(event, mx.events.ErrorEvent, true).text;
    if (this.mx_rpc_remoting_mxml_RemoteObject_document && this.mx_rpc_remoting_mxml_RemoteObject_document.willTrigger(mx.events.ErrorEvent.ERROR)) {
      var /** @type {mx.events.ErrorEvent} */ evt = new mx.events.ErrorEvent(mx.events.ErrorEvent.ERROR, true, true);
      evt.text = reason;
      return !!(this.mx_rpc_remoting_mxml_RemoteObject_document.dispatchEvent(evt));
    } else if (org.apache.royale.utils.Language.is(event, mx.rpc.events.FaultEvent)) {
      throw org.apache.royale.utils.Language.as(event, mx.rpc.events.FaultEvent, true).fault;
    } else {
      var /** @type {string} */ message = this.mx_rpc_remoting_mxml_RemoteObject_resourceManager.getString("rpc", "noListenerForEvent", [reason]);
      throw new Error(message);
    }
  }
  return false;
};


/**
 * Returns an Operation of the given name. If the Operation wasn't
 * created beforehand, a new <code>mx.rpc.remoting.mxml.Operation</code> is
 * created during this call. Operations are usually accessible by simply
 * naming them after the service variable
 * (<code>myService.someOperation</code>), but if your Operation name
 * happens to match a defined method on the service
 * (like <code>setCredentials</code>), you can use this method to get the
 * Operation instead.
 * @asparam name Name of the Operation.
 * @asreturn Operation that executes for this name.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.getOperation = function(name) {
  var /** @type {Object} */ o = this.http_$$www_adobe_com$2006$flex$mx$internal___operations[name];
  var /** @type {mx.rpc.AbstractOperation} */ op = org.apache.royale.utils.Language.is(o, mx.rpc.AbstractOperation) ? org.apache.royale.utils.Language.as(o, mx.rpc.AbstractOperation, true) : null;
  if (op == null) {
    op = new mx.rpc.remoting.mxml.Operation(this, name);
    this.http_$$www_adobe_com$2006$flex$mx$internal___operations[name] = op;
    op.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest = this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest;
    op.http_$$www_adobe_com$2006$flex$mx$internal__setKeepLastResultIfNotSet(this._keepLastResult);
  }
  return op;
};


/**
 * Called automatically by the MXML compiler if the RemoteObject is set up using a tag.  If you create
 * the RemoteObject through ActionScript you may want to call this method yourself as it is useful for
 * validating any arguments.
 *
 * @asparam document the MXML document on which this RemoteObject lives
 * @asparam id the id of this RemoteObject within the document
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} document
 * @param {string} id
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.initialized = function(document, id) {
  this.mx_rpc_remoting_mxml_RemoteObject_document = document;
  this.mx_rpc_remoting_mxml_RemoteObject_id = id;
  this.initialize();
};


/**
 * @export
 * @param {Object} document
 * @param {string=} id
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.setDocument = function(document, id) {
  id = typeof id !== 'undefined' ? id : null;
  this.mx_rpc_remoting_mxml_RemoteObject_document = document;
  this.mx_rpc_remoting_mxml_RemoteObject_id = id;
  this.initialize();
};


/**
 * @export
 * @return {Object}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.getDocument = function() {
  return this.mx_rpc_remoting_mxml_RemoteObject_document;
};


/**
 * @export
 * @return {string}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.getID = function() {
  return this.mx_rpc_remoting_mxml_RemoteObject_id;
};


/**
 * @private
 * @type {Object}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.mx_rpc_remoting_mxml_RemoteObject_document;


/**
 * @private
 * @type {string}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.mx_rpc_remoting_mxml_RemoteObject_id;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RemoteObject', qName: 'mx.rpc.remoting.mxml.RemoteObject', kind: 'class', isDynamic: true}], interfaces: [mx.rpc.mxml.IMXMLSupport, mx.core.IMXMLObject, org.apache.royale.core.IDocument] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'RemoteObject': { type: '', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject', parameters: function () { return [ 'String', true ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }},
        'getOperation': { type: 'mx.rpc.AbstractOperation', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject', parameters: function () { return [ 'String', false ]; }},
        'initialized': { type: 'void', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject', parameters: function () { return [ 'Object', false ,'String', false ]; }},
        'setDocument': { type: 'void', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject', parameters: function () { return [ 'Object', false ,'String', true ]; }},
        'getDocument': { type: 'Object', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject'},
        'getID': { type: 'String', declaredBy: 'mx.rpc.remoting.mxml.RemoteObject'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.remoting.mxml.RemoteObject.prototype.ROYALE_COMPILE_FLAGS = 26;
