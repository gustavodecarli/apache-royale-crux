/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/processors/ViewProcessor.as
 * org.apache.royale.crux.processors.ViewProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.processors.ViewProcessor');
/* Royale Dependency List: org.apache.royale.crux.Bean,org.apache.royale.crux.reflection.IMetadataTag,org.apache.royale.crux.reflection.MetadataHostMethod,org.apache.royale.crux.reflection.MethodParameter,org.apache.royale.utils.Language*/
goog.provide('org.apache.royale.crux.processors.ViewProcessor.ViewRef');

goog.require('org.apache.royale.crux.processors.BaseMetadataProcessor');
goog.require('org.apache.royale.crux.processors.IBeanProcessor');



/**
 * Constructor
 * @constructor
 * @extends {org.apache.royale.crux.processors.BaseMetadataProcessor}
 * @implements {org.apache.royale.crux.processors.IBeanProcessor}
 * @param {Array=} metadataNames
 */
org.apache.royale.crux.processors.ViewProcessor = function(metadataNames) {
  metadataNames = typeof metadataNames !== 'undefined' ? metadataNames : null;
  
  this.views = new Map();
  org.apache.royale.crux.processors.ViewProcessor.base(this, 'constructor', (metadataNames == null) ? [org.apache.royale.crux.processors.ViewProcessor.VIEW_ADDED, org.apache.royale.crux.processors.ViewProcessor.VIEW_REMOVED, org.apache.royale.crux.processors.ViewProcessor.VIEW_NAVIGATOR] : metadataNames);
};
goog.inherits(org.apache.royale.crux.processors.ViewProcessor, org.apache.royale.crux.processors.BaseMetadataProcessor);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.ViewProcessor', org.apache.royale.crux.processors.ViewProcessor);


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.ViewProcessor.VIEW_ADDED = "ViewAdded";


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.ViewProcessor.VIEW_REMOVED = "ViewRemoved";


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.ViewProcessor.VIEW_NAVIGATOR = "ViewNavigator";


/**
 * @protected
 * @type {Map}
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.views;


/**
 * This method is called whenever a bean is added that contains [ViewAdded], 
 * [ViewRemoved] and/or [ViewNavigator] tags. These will/should be regular beans defined
 * in a BeanProvider that want to be notified when a particular type of view
 * is set up or torn down, respectively.
 * @export
 * @override
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.setUpMetadataTags = function(metadataTags, bean) {
  var foreachiter0_target = metadataTags;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var tag = foreachiter0_target[foreachiter0];
  {
    var /** @type {Object} */ viewType;
    if (org.apache.royale.utils.Language.is(tag.host, org.apache.royale.crux.reflection.MetadataHostMethod))
      viewType = org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(tag.host, org.apache.royale.crux.reflection.MetadataHostMethod, true).parameters[0], org.apache.royale.crux.reflection.MethodParameter, true).type;
    else
      viewType = tag.host.type;
    
    var /** @type {Array} */ arr = this.views.get(viewType);
    if (!arr) {
      arr = [];
      this.views.set(viewType, arr);
    }
    arr.push(new org.apache.royale.crux.processors.ViewProcessor.ViewRef(tag, bean.source));
  }}
  
};


/**
 * This method is called whenever a bean that contains [ViewAdded], 
 * [ViewRemoved] and/or [ViewNavigator] tags is torn down. This would likely only
 * happen if the bean (mediator) was part of a module that was torn down.
 * @export
 * @override
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.tearDownMetadataTags = function(metadataTags, bean) {
  var foreachiter1_target = metadataTags;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var tag = foreachiter1_target[foreachiter1];
  {
    var /** @type {Object} */ viewType;
    if (org.apache.royale.utils.Language.is(tag.host, org.apache.royale.crux.reflection.MetadataHostMethod))
      viewType = org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.as(tag.host, org.apache.royale.crux.reflection.MetadataHostMethod, true).parameters[0], org.apache.royale.crux.reflection.MethodParameter, true).type;
    else
      viewType = tag.host.type;
    var /** @type {Array} */ arr;
    
    
    for (var /** @type {number} */ i = (arr.length - 1) >> 0; i > -1; i--) {
      var /** @type {org.apache.royale.crux.processors.ViewProcessor.ViewRef} */ ref = arr[i];
      if (ref.mediator === bean.source)
        arr.splice(i, 1);
    }
  }}
  
};


/**
 * Called when a view is added to stage.
 * @export
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.setUpBean = function(bean) {
  this.processViewBean(bean, org.apache.royale.crux.processors.ViewProcessor.VIEW_ADDED);
};


/**
 * Called when a view is removed from stage.
 * @export
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.tearDownBean = function(bean) {
  this.processViewBean(bean, org.apache.royale.crux.processors.ViewProcessor.VIEW_REMOVED);
};


/**
 * Examine stored refs to see if any mediators have registered to
 * be notified when a view of this type has been added or removed.
 * @royaleignorecoercion Array
 *
 * @protected
 * @param {org.apache.royale.crux.Bean} bean
 * @param {string} tagName
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.processViewBean = function(bean, tagName) {
  var self = this;
  this.views.forEach(function(value, key) {
    var /** @type {*} */ type = key;
    if (org.apache.royale.utils.Language.is(bean.source, type)) {
      var /** @type {Array} */ refs = org.apache.royale.utils.Language.as(value, Array);
      var foreachiter2_target = refs;
      for (var foreachiter2 in foreachiter2_target) 
      {
      var ref = foreachiter2_target[foreachiter2];
      {
        if (ref.tag.name != tagName && ref.tag.name != org.apache.royale.crux.processors.ViewProcessor.VIEW_NAVIGATOR)
          continue;
        if (org.apache.royale.utils.Language.is(ref.tag.host, org.apache.royale.crux.reflection.MetadataHostMethod)) {
          var /** @type {Function} */ f = org.apache.royale.utils.Language.as(ref.mediator[ref.tag.host.name], Function);
          f.apply(null, [bean.source]);
        } else {
          ref.mediator[ref.tag.host.name] = bean.source;
        }
      }}
      
    }
  });
};


org.apache.royale.crux.processors.ViewProcessor.prototype.get__priority = function() {
  return 100;
};


Object.defineProperties(org.apache.royale.crux.processors.ViewProcessor.prototype, /** @lends {org.apache.royale.crux.processors.ViewProcessor.prototype} */ {
/**
  * @export
  * @type {number} */
priority: {
get: org.apache.royale.crux.processors.ViewProcessor.prototype.get__priority}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ViewProcessor', qName: 'org.apache.royale.crux.processors.ViewProcessor', kind: 'class' }], interfaces: [org.apache.royale.crux.processors.IBeanProcessor] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'priority': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor'}
      };
    },
    methods: function () {
      return {
        'ViewProcessor': { type: '', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor', parameters: function () { return [ 'Array', true ]; }},
        'setUpMetadataTags': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor', parameters: function () { return [ 'Array', false ,'org.apache.royale.crux.Bean', false ]; }},
        'tearDownMetadataTags': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor', parameters: function () { return [ 'Array', false ,'org.apache.royale.crux.Bean', false ]; }},
        'setUpBean': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor', parameters: function () { return [ 'org.apache.royale.crux.Bean', false ]; }},
        'tearDownBean': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor', parameters: function () { return [ 'org.apache.royale.crux.Bean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.ViewProcessor.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @constructor
 * @param {org.apache.royale.crux.reflection.IMetadataTag} tag
 * @param {*} mediator
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef = function(tag, mediator) {
  this.tag = tag;
  this.mediator = mediator;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.ViewProcessor.ViewRef', org.apache.royale.crux.processors.ViewProcessor.ViewRef);


/**
 * @export
 * @type {org.apache.royale.crux.reflection.IMetadataTag}
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef.prototype.tag;


/**
 * @export
 * @type {*}
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef.prototype.mediator;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ViewRef', qName: 'org.apache.royale.crux.processors.ViewProcessor.ViewRef', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'tag': { type: 'org.apache.royale.crux.reflection.IMetadataTag', get_set: function (/** org.apache.royale.crux.processors.ViewProcessor.ViewRef */ inst, /** * */ v) {return v !== undefined ? inst.tag = v : inst.tag;}},
        'mediator': { type: '*', get_set: function f(/** org.apache.royale.crux.processors.ViewProcessor.ViewRef */ inst, /** * */ v) {return v !== f ? inst.mediator = v : inst.mediator;}}
      };
    },
    methods: function () {
      return {
        'ViewRef': { type: '', declaredBy: 'org.apache.royale.crux.processors.ViewProcessor.ViewRef', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'*', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.ViewProcessor.ViewRef.prototype.ROYALE_COMPILE_FLAGS = 10;
