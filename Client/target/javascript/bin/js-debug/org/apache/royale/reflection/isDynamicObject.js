/**
 * Generated by Apache Royale Compiler from org/apache/royale/reflection/isDynamicObject.as
 * org.apache.royale.reflection.isDynamicObject
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.reflection.isDynamicObject');
/* Royale Dependency List: */



/**
 *  A utility method to check if an object is dynamic (can have non-sealed members added or deleted)
 *  Note that static class objects are always dynamic, as are Interface Objects
 *
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @param {Object} inspect
 * @return {boolean}
 */
org.apache.royale.reflection.isDynamicObject = function(inspect) {
  
  if (!inspect)
    return false;
  var /** @type {Object} */ constructor = inspect.constructor;
  if (constructor === Object['constructor']) {
    return true;
  }
  if (constructor) {
    if (constructor === Object || constructor === Array || constructor == Map)
      return true;
    var /** @type {Object} */ prototype = constructor.prototype;
    if (prototype && prototype.ROYALE_CLASS_INFO) {
      var /** @type {Object} */ name = prototype.ROYALE_CLASS_INFO.names[0];
      return name.qName == 'XML' || name.qName == "XMLList" || Boolean(prototype.ROYALE_CLASS_INFO.names[0].isDynamic);
    }
    var /** @type {boolean} */ dyncheck = false;
    try {
      inspect["wootHackwoot"] = "wootHackwoot";
      if (inspect["wootHackwoot"] == "wootHackwoot")
        dyncheck = true;
      delete inspect["wootHackwoot"];
    } catch (e) {
    }
    return dyncheck;
  }
  else
    return true;
}
