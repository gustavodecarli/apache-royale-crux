/**
 * Generated by Apache Royale Compiler from mx/utils/StringUtil.as
 * mx.utils.StringUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.utils.StringUtil');
/* Royale Dependency List: XML,org.apache.royale.utils.Language*/



/**
 * @constructor
 */
mx.utils.StringUtil = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.utils.StringUtil', mx.utils.StringUtil);


/**
 *  Removes all whitespace characters from the beginning and end
 *  of the specified string.
 *
 *  @asparam str The String whose whitespace should be trimmed. 
 *
 *  @asreturn Updated String where whitespace was removed from the 
 *  beginning and end. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {string} str
 * @return {string}
 */
mx.utils.StringUtil.trim = function(str) {
  if (str == null)
    return '';
  var /** @type {number} */ startIndex = 0;
  while (mx.utils.StringUtil.isWhitespace(str.charAt(startIndex)))
    ++startIndex;
  var /** @type {number} */ endIndex = (str.length - 1) >> 0;
  while (mx.utils.StringUtil.isWhitespace(str.charAt(endIndex)))
    --endIndex;
  if (endIndex >= startIndex)
    return str.slice(startIndex, endIndex + 1);
  else
    return "";
};


/**
 *  Removes all whitespace characters from the beginning and end
 *  of each element in an Array, where the Array is stored as a String. 
 *
 *  @asparam value The String whose whitespace should be trimmed. 
 *
 *  @asparam separator The String that delimits each Array element in the string.
 *
 *  @asreturn Updated String where whitespace was removed from the 
 *  beginning and end of each element. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {string} value
 * @param {string} delimiter
 * @return {string}
 */
mx.utils.StringUtil.trimArrayElements = function(value, delimiter) {
  if (value != "" && value != null) {
    var /** @type {Array} */ items = value.split(delimiter);
    var /** @type {number} */ len = (items.length) >> 0;
    for (var /** @type {number} */ i = 0; i < len; i++) {
      items[i] = mx.utils.StringUtil.trim(org.apache.royale.utils.Language.string(items[i]));
    }
    if (len > 0) {
      value = items.join(delimiter);
    }
  }
  return value;
};


/**
 *  Returns <code>true</code> if the specified string is
 *  a single space, tab, carriage return, newline, or formfeed character.
 *
 *  @asparam str The String that is is being queried. 
 *
 *  @asreturn <code>true</code> if the specified string is
 *  a single space, tab, carriage return, newline, or formfeed character.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {string} character
 * @return {boolean}
 */
mx.utils.StringUtil.isWhitespace = function(character) {
  switch (character) {
    case " ":
    
    case "\t":
    
    case "\r":
    
    case "\n":
    
    case "\f":
    
    case "\u00A0":
    
    case "\u2028":
    
    case "\u2029":
    
    case "\u3000":
      return true;
    default:
      return false;
  }
};


/**
 *  Substitutes "{n}" tokens within the specified string
 *  with the respective arguments passed in.
 * 
 *  Note that this uses String.replace and "$" can have special
 *  meaning in the argument strings escape by using "$$".
 *
 *  @asparam str The string to make substitutions in.
 *  This string can contain special tokens of the form
 *  <code>{n}</code>, where <code>n</code> is a zero based index,
 *  that will be replaced with the additional parameters
 *  found at that index if specified.
 *
 *  @asparam rest Additional parameters that can be substituted
 *  in the <code>str</code> parameter at each <code>{n}</code>
 *  location, where <code>n</code> is an integer (zero based)
 *  index value into the array of values specified.
 *  If the first parameter is an array this array will be used as
 *  a parameter list.
 *  This allows reuse of this routine in other methods that want to
 *  use the ... rest signature.
 *  For example <pre>
 *     public function myTracer(str:String, ... rest):void
 *     { 
 *         label.text += StringUtil.substitute(str, rest) + "\n";
 *     } </pre>
 *
 *  @asreturn New string with all of the <code>{n}</code> tokens
 *  replaced with the respective arguments specified.
 *
 *  @example
 *
 *  var str:String = "here is some info '{0}' and {1}";
 *  trace(StringUtil.substitute(str, 15.4, true));
 *
 *  // this will output the following string:
 *  // "here is some info '15.4' and true"
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {string} str
 * @param {...} rest
 * @return {string}
 */
mx.utils.StringUtil.substitute = function(str, rest) {
  rest = Array.prototype.slice.call(arguments, 1);
  if (str == null)
    return '';
  var /** @type {number} */ len = (rest.length) >>> 0;
  var /** @type {Array} */ args;
  if (len == 1 && org.apache.royale.utils.Language.is(rest[0], Array)) {
    args = org.apache.royale.utils.Language.as(rest[0], Array);
    len = (args.length) >>> 0;
  } else {
    args = rest;
  }
  for (var /** @type {number} */ i = 0; i < len; i++) {
    str = str.replace(new RegExp("\\{" + i + "\\}", "g"), args[i]);
  }
  return str;
};


/**
 *  Returns a string consisting of a specified string
 *  concatenated with itself a specified number of times.
 *
 *  @asparam str The string to be repeated.
 *
 *  @asparam n The repeat count.
 *
 *  @asreturn The repeated string.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4.1
 * @export
 * @param {string} str
 * @param {number} n
 * @return {string}
 */
mx.utils.StringUtil.repeat = function(str, n) {
  if (n == 0)
    return "";
  var /** @type {string} */ s = str;
  for (var /** @type {number} */ i = 1; i < n; i++) {
    s += str;
  }
  return s;
};


/**
 *  Removes "unallowed" characters from a string.
 *  A "restriction string" such as <code>"A-Z0-9"</code>
 *  is used to specify which characters are allowed.
 *  This method uses the same logic as the <code>restrict</code>
 *  property of TextField.
 *
 *  @asparam str The input string.
 *
 *  @asparam restrict The restriction string.
 *
 *  @asreturn The input string, minus any characters
 *  that are not allowed by the restriction string.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10
 *  @playerversion AIR 1.5
 *  @productversion Flex 4.1
 * @export
 * @param {string} str
 * @param {string} restrict
 * @return {string}
 */
mx.utils.StringUtil.restrict = function(str, restrict) {
  if (restrict == null)
    return str;
  if (restrict == "")
    return "";
  var /** @type {Array} */ charCodes = [];
  var /** @type {number} */ n = (str.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {number} */ charCode = (str.charCodeAt(i)) >>> 0;
    if (mx.utils.StringUtil.testCharacter(charCode, restrict))
      charCodes.push(charCode);
  }
  return org.apache.royale.utils.Language.string(String.fromCharCode.apply(null, charCodes));
};


/**
 *  @asprivate
 *  Helper method used by restrict() to test each character
 *  in the input string against the restriction string.
 *  The logic in this method implements the same algorithm
 *  as in TextField's 'restrict' property (which is quirky,
 *  such as how it handles a '-' at the beginning of the
 *  restriction string).
 * @private
 * @param {number} charCode
 * @param {string} restrict
 * @return {boolean}
 */
mx.utils.StringUtil.testCharacter = function(charCode, restrict) {
  var /** @type {number} */ code = 0;
  var /** @type {boolean} */ allowIt = false;
  var /** @type {boolean} */ inBackSlash = false;
  var /** @type {boolean} */ inRange = false;
  var /** @type {boolean} */ setFlag = true;
  var /** @type {number} */ lastCode = 0;
  var /** @type {number} */ n = (restrict.length) >> 0;
  //var /** @type {number} */ code = 0;
  if (n > 0) {
    code = (restrict.charCodeAt(0)) >>> 0;
    if (code == 94)
      allowIt = true;
  }
  for (var /** @type {number} */ i = 0; i < n; i++) {
    code = (restrict.charCodeAt(i)) >>> 0;
    var /** @type {boolean} */ acceptCode = false;
    if (!inBackSlash) {
      if (code == 45)
        inRange = true;
      else if (code == 94)
        setFlag = !setFlag;
      else if (code == 92)
        inBackSlash = true;
      else
        acceptCode = true;
    } else {
      acceptCode = true;
      inBackSlash = false;
    }
    if (acceptCode) {
      if (inRange) {
        if (lastCode <= charCode && charCode <= code)
          allowIt = setFlag;
        inRange = false;
        lastCode = 0;
      } else {
        if (charCode == code)
          allowIt = setFlag;
        lastCode = code;
      }
    }
  }
  return allowIt;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.utils.StringUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'StringUtil', qName: 'mx.utils.StringUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.utils.StringUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|trim': { type: 'String', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ]; }},
        '|trimArrayElements': { type: 'String', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ,'String', false ]; }},
        '|isWhitespace': { type: 'Boolean', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ]; }},
        '|substitute': { type: 'String', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ,'Array', false ]; }},
        '|repeat': { type: 'String', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ,'int', false ]; }},
        '|restrict': { type: 'String', declaredBy: 'mx.utils.StringUtil', parameters: function () { return [ 'String', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.utils.StringUtil.prototype.ROYALE_COMPILE_FLAGS = 26;
