/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/Prototype.as
 * org.apache.royale.crux.Prototype
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.Prototype');
/* Royale Dependency List: org.apache.royale.utils.Language*/

goog.require('org.apache.royale.crux.Bean');



/**
 * @constructor
 * @extends {org.apache.royale.crux.Bean}
 * @param {Object=} type
 */
org.apache.royale.crux.Prototype = function(type) {
  type = typeof type !== 'undefined' ? type : null;
  org.apache.royale.crux.Prototype.base(this, 'constructor');
  this.type = type;
};
goog.inherits(org.apache.royale.crux.Prototype, org.apache.royale.crux.Bean);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.Prototype', org.apache.royale.crux.Prototype);


/**
 * @export
 * @type {*}
 */
org.apache.royale.crux.Prototype.prototype.constructorArguments;


/**
 * @export
 * @type {boolean}
 */
org.apache.royale.crux.Prototype.prototype.singleton = false;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.Prototype.prototype._type;


/**
 * @protected
 * @return {*}
 */
org.apache.royale.crux.Prototype.prototype.getObject = function() {
  var /** @type {*} */ instance = this._source;
  if (instance == null) {
    this._source = instance = this.createInstance();
    this.beanFactory.setUpBean(new org.apache.royale.crux.Bean(this._source, this.name, this.typeDescriptor));
    if (!this.singleton)
      this._source = null;
    else
      this.initialized = true;
  }
  return instance;
};


/**
 * @protected
 * @return {Object}
 */
org.apache.royale.crux.Prototype.prototype.createInstance = function() {
  if (this.type == null)
    throw new Error("Bean Creation exception! You must supply type to Prototype!");
  var /** @type {*} */ instance;
  if (this.constructorArguments != null) {
    var /** @type {Array} */ args = org.apache.royale.utils.Language.is(this.constructorArguments, Array) ? this.constructorArguments : [this.constructorArguments];
    switch (args.length) {
      case 1:
        instance = new this.type(args[0]);
        break;
      case 2:
        instance = new this.type(args[0], args[1]);
        break;
      case 3:
        instance = new this.type(args[0], args[1], args[2]);
        break;
      case 4:
        instance = new this.type(args[0], args[1], args[2], args[3]);
        break;
      case 5:
        instance = new this.type(args[0], args[1], args[2], args[3], args[4]);
        break;
      case 6:
        instance = new this.type(args[0], args[1], args[2], args[3], args[4], args[5]);
        break;
      case 7:
        instance = new this.type(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        break;
      case 8:
        instance = new this.type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        break;
      default:
        throw new Error("No more than 8 constructor arguments are support by Prototype.");
    }
  } else {
    instance = new this.type();
  }
  return instance;
};


/**
 * @export
 * @override
 */
org.apache.royale.crux.Prototype.prototype.toString = function() {
  return "Prototype{ type: " + this.type + ", name: " + this.name + " }";
};


org.apache.royale.crux.Prototype.prototype.get__type = function() {
  return this._type;
};


org.apache.royale.crux.Prototype.prototype.set__type = function(clazz) {
  this._type = clazz;
};


org.apache.royale.crux.Prototype.prototype.get__source = function() {
  return this.getObject();
};


Object.defineProperties(org.apache.royale.crux.Prototype.prototype, /** @lends {org.apache.royale.crux.Prototype.prototype} */ {
/**
  * @export
  * @type {*} */
type: {
get: org.apache.royale.crux.Prototype.prototype.get__type,
set: org.apache.royale.crux.Prototype.prototype.set__type},
/**
  * @export
  * @type {*} */
source: {
get: org.apache.royale.crux.Prototype.prototype.get__source,
set: org.apache.royale.crux.Bean.prototype.set__source}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.Prototype.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Prototype', qName: 'org.apache.royale.crux.Prototype', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.Prototype.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'constructorArguments': { type: '*', get_set: function f(/** org.apache.royale.crux.Prototype */ inst, /** * */ v) {return v !== f ? inst.constructorArguments = v : inst.constructorArguments;}},
        'singleton': { type: 'Boolean', get_set: function (/** org.apache.royale.crux.Prototype */ inst, /** * */ v) {return v !== undefined ? inst.singleton = v : inst.singleton;}}
      };
    },
    accessors: function () {
      return {
        'type': { type: 'Class', access: 'readwrite', declaredBy: 'org.apache.royale.crux.Prototype'},
        'source': { type: '*', access: 'readonly', declaredBy: 'org.apache.royale.crux.Prototype'}
      };
    },
    methods: function () {
      return {
        'Prototype': { type: '', declaredBy: 'org.apache.royale.crux.Prototype', parameters: function () { return [ 'Class', true ]; }},
        'toString': { type: 'String', declaredBy: 'org.apache.royale.crux.Prototype'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.Prototype.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./Prototype.js.map
