/**
 * Generated by Apache Royale Compiler from org/apache/royale/reflection/VariableDefinition.as
 * org.apache.royale.reflection.VariableDefinition
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.reflection.VariableDefinition');
/* Royale Dependency List: org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.getDefinitionByName,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.reflection.MemberDefinitionBase');



/**
 * @constructor
 * @extends {org.apache.royale.reflection.MemberDefinitionBase}
 * @param {string} name
 * @param {boolean} isStatic
 * @param {org.apache.royale.reflection.TypeDefinition} owner
 * @param {Object=} rawData
 */
org.apache.royale.reflection.VariableDefinition = function(name, isStatic, owner, rawData) {
  rawData = typeof rawData !== 'undefined' ? rawData : null;
  org.apache.royale.reflection.VariableDefinition.base(this, 'constructor', name, isStatic, owner, rawData);
};
goog.inherits(org.apache.royale.reflection.VariableDefinition, org.apache.royale.reflection.MemberDefinitionBase);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.reflection.VariableDefinition', org.apache.royale.reflection.VariableDefinition);


/**
 * @protected
 * @type {Function}
 */
org.apache.royale.reflection.VariableDefinition.prototype._getter;


/**
 * @protected
 * @type {Function}
 */
org.apache.royale.reflection.VariableDefinition.prototype._setter;


/**
 * A string representation of this variable definition
 * @export
 * @return {string}
 */
org.apache.royale.reflection.VariableDefinition.prototype.toString = function() {
  var /** @type {number} */ i = 0;
  var /** @type {string} */ uriNS = this.uri;
  if (uriNS)
    uriNS = ', uri=\'' + uriNS + '\'';
  var /** @type {string} */ s = "variable: '" + this.name + "'" + uriNS + ", type:" + this.type.qualifiedName;
  var /** @type {Array} */ meta = this.metadata;
  //var /** @type {number} */ i = 0;
  var /** @type {number} */ l = (meta.length) >>> 0;
  if (l) {
    s += "\n\tmetadata:";
    for (i = 0; i < l; i++) {
      s += "\n\t\t" + meta[i].toString().split("\n").join("\n\t\t");
    }
  }
  return s;
};


org.apache.royale.reflection.VariableDefinition.prototype.get__type = function() {
  
  return org.apache.royale.reflection.TypeDefinition.internalGetDefinition(org.apache.royale.utils.Language.string(this._rawData.type));
};


org.apache.royale.reflection.VariableDefinition.prototype.get__getValue = function() {
  var self = this;
  if (this._getter != null)
    return this._getter;
  
  var /** @type {Function} */ f = this._rawData.get_set;
  var /** @type {boolean} */ canBeUndefined = this.type.qualifiedName == '*';
  if (this.isStatic) {
    this._getter = function() {
      return canBeUndefined ? f(f) : f();
    };
  } else {
    this._getter = function(instance) {
      if (goog.DEBUG) {
        if (arguments.length != 1 || !instance)
          throw 'invalid getValue parameters';
      }
      return canBeUndefined ? f(instance, f) : f(instance);
    };
  }
  return this._getter;
};


org.apache.royale.reflection.VariableDefinition.prototype.get__setValue = function() {
  var self = this;
  if (this._setter != null)
    return this._setter;
  
  var /** @type {Function} */ f = this._rawData.get_set;
  var /** @type {Object} */ valueClass;
  var /** @type {string} */ type = org.apache.royale.utils.Language.string(this._rawData.type);
  if (type && type != '*') {
    valueClass = org.apache.royale.reflection.getDefinitionByName(type);
  }
  if (this.isStatic) {
    this._setter = function(value) {
      if (goog.DEBUG) {
        if (arguments.length != 1)
          throw 'invalid setValue parameters';
      }
      if (valueClass)
        value = org.apache.royale.utils.Language.as(value, valueClass, true);
      f(value);
    };
  } else {
    this._setter = function(instance, value) {
      if (goog.DEBUG) {
        if (arguments.length != 2 || !instance)
          throw 'invalid setValue parameters';
      }
      if (valueClass)
        value = org.apache.royale.utils.Language.as(value, valueClass, true);
      f(instance, value);
    };
  }
  return this._setter;
};


Object.defineProperties(org.apache.royale.reflection.VariableDefinition.prototype, /** @lends {org.apache.royale.reflection.VariableDefinition.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.reflection.TypeDefinition} */
type: {
get: org.apache.royale.reflection.VariableDefinition.prototype.get__type},
/**
  * @export
  * @type {Function} */
getValue: {
get: org.apache.royale.reflection.VariableDefinition.prototype.get__getValue},
/**
  * @export
  * @type {Function} */
setValue: {
get: org.apache.royale.reflection.VariableDefinition.prototype.get__setValue}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.reflection.VariableDefinition.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'VariableDefinition', qName: 'org.apache.royale.reflection.VariableDefinition', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.reflection.VariableDefinition.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'type': { type: 'org.apache.royale.reflection.TypeDefinition', access: 'readonly', declaredBy: 'org.apache.royale.reflection.VariableDefinition'},
        'getValue': { type: 'Function', access: 'readonly', declaredBy: 'org.apache.royale.reflection.VariableDefinition'},
        'setValue': { type: 'Function', access: 'readonly', declaredBy: 'org.apache.royale.reflection.VariableDefinition'}
      };
    },
    methods: function () {
      return {
        'VariableDefinition': { type: '', declaredBy: 'org.apache.royale.reflection.VariableDefinition', parameters: function () { return [ 'String', false ,'Boolean', false ,'org.apache.royale.reflection.TypeDefinition', false ,'Object', true ]; }},
        'toString': { type: 'String', declaredBy: 'org.apache.royale.reflection.VariableDefinition'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.reflection.VariableDefinition.prototype.ROYALE_COMPILE_FLAGS = 10;
