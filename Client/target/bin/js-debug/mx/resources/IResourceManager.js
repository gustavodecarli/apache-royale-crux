/**
 * Generated by Apache Royale Compiler from mx/resources/IResourceManager.as
 * mx.resources.IResourceManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.resources.IResourceManager');
/* Royale Dependency List: mx.resources.IResourceBundle,XML*/

goog.require('org.apache.royale.events.IEventDispatcher');



/**
 * @interface
 * @extends {org.apache.royale.events.IEventDispatcher}
 */
mx.resources.IResourceManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.resources.IResourceManager', mx.resources.IResourceManager);
/**  * @type {Array}
 */mx.resources.IResourceManager.prototype.localeChain;
/**
 *  Adds the specified ResourceBundle to the ResourceManager
 *  so that its resources can be accessed by ResourceManager
 *  methods such as <code>getString()</code>.
 *
 *  @asparam resourceBundle The resource bundle to be added.
 *  @asparam useWeakReference Determines if the ResourceManager
 *  keeps a weak reference to the resource bundle.
 *  If <code>useWeakReference</code> is <code>true</code> then the ResourceManager 
 *  provides a weak reference to the resource bundle. When the 
 *  caller chooses to use a weak reference it becomes the 
 *  caller's responsibility to keep a hard reference the resource bundle 
 *  so it is not garbaged collected prematurely. If <code>useWeakReference</code> is
 *  <code>false</code>, the ResourceManager keeps a hard reference to the resource
 *  bundle so it will not be garbage collected.
 *  
 *  <p>When a Flex sub-application or module automatically adds its compiled
 *  resource bundles to the ResourceManager, it calls the <code>addResourceBundle()</code>
 *  with <code>useWeakReference</code> set to <code>true</code>, to avoid becoming pinned in memory.
 *  If you create resource bundles at runtime in a sub-application or 
 *  module, you should do the same. You then need to hold on to these 
 *  resource bundles with a hard reference to prevent them from being 
 *  garbage collected.</p>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.resources.IResourceBundle} resourceBundle
 * @param {boolean=} useWeakReference
 */
mx.resources.IResourceManager.prototype.addResourceBundle = function(resourceBundle, useWeakReference) {
};
/**
 *  Removes the specified ResourceBundle from the ResourceManager
 *  so that its resources can no longer be accessed by ResourceManager
 *  methods such as <code>getString()</code>.
 *
 *  @asparam locale A locale string such as <code>"en_US"</code>.
 *
 *  @asparam bundleName A bundle name such as <code>"MyResources"</code>.
 *
 *  @see mx.resources.IResourceBundle
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} locale
 * @param {string} bundleName
 */
mx.resources.IResourceManager.prototype.removeResourceBundle = function(locale, bundleName) {
};
/**
 *  Removes all ResourceBundles for the specified locale
 *  from the ResourceManager so that their resources
 *  can no longer be accessed by ResourceManager methods
 *  such as <code>getString()</code>.
 *
 *  @asparam locale A locale string such as <code>"en_US"</code>.
 *
 *  @see mx.resources.IResourceBundle
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} locale
 */
mx.resources.IResourceManager.prototype.removeResourceBundlesForLocale = function(locale) {
};
mx.resources.IResourceManager.prototype.update = function() {
};
/**
 *  Returns an Array of Strings specifying all locales for which
 *  ResourceBundle objects exist in the ResourceManager.
 *
 *  <p>The order of locales in this array is not specified.</p>
 *
 *  @asreturn An Array of locale Strings.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Array}
 */
mx.resources.IResourceManager.prototype.getLocales = function() {
};
/**
 *  Returns an Array of Strings specifying all locales for which
 *  ResourceBundle objects exist in the ResourceManager,
 *  ordered using  user preferences as reported by
 *  <code>Capabilities.language</code> or
 *  <code>Capabilities.languages</code>.
 * 
 *  @asreturn An Array of locale Strings.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Array}
 */
mx.resources.IResourceManager.prototype.getPreferredLocaleChain = function() {
};
/**
 *  Returns an Array of Strings specifying the bundle names
 *  for all ResourceBundle objects that exist in the ResourceManager
 *  and that belong to the specified locale.
 *
 *  <p>The order of bundle names in this Array is not specified.</p>
 *
 *  @asparam locale A locale string such as <code>"en_US"</code>.
 *
 *  @asreturn An Array of bundle names.
 *
 *  @see mx.resources.IResourceBundle
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} locale
 * @return {Array}
 */
mx.resources.IResourceManager.prototype.getBundleNamesForLocale = function(locale) {
};
/**
 *  Returns a ResourceBundle with the specified <code>locale</code>
 *  and <code>bundleName</code> that has been previously added
 *  to the ResourceManager with <code>addResourceBundle()</code>.
 *  If no such ResourceBundle exists, this method returns <code>null</code>.
 *
 *  @asparam locale A locale string such as <code>"en_US"</code>.
 *
 *  @asparam bundleName A bundle name such as <code>"MyResources"</code>.
 *
 *  @asreturn The ResourceBundle with the specified <code>locale</code>
 *  and <code>bundleName</code> if one exists; otherwise <code>null</code>.
 *
 *  @see mx.resources.IResourceBundle
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} locale
 * @param {string} bundleName
 * @return {mx.resources.IResourceBundle}
 */
mx.resources.IResourceManager.prototype.getResourceBundle = function(locale, bundleName) {
};
/**
 *  Searches the locales in the <code>localeChain</code>
 *  for the specified resource and returns
 *  the first resource bundle in which it is found.
 *  If the resource isn't found, this method returns <code>null</code>.
 *
 *  @asparam bundleName A bundle name such as <code>"MyResources"</code>.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asreturn The first ResourceBundle in the <code>localeChain</code>
 *  that contains the specified resource, or <code>null</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @return {mx.resources.IResourceBundle}
 */
mx.resources.IResourceManager.prototype.findResourceBundleWithResource = function(bundleName, resourceName) {
};
/**
 *  Gets the value of a specified resource as an Object.
 *
 *  <p>The value is returned exactly as it is stored
 *  in the <code>content</code> Object of the ResourceBundle,
 *  with no conversion.
 *  If the resource was compiled from a properties files,
 *  the resource value in the <code>content</code> Object 
 *  is always a String unless you used the <code>Embed()</code>
 *  or <code>ClassReference()</code> directive, in which case
 *  it is a Class.
 *  Use the <code>getString()</code>, <code>getStringArray()</code>, 
 *  <code>getNumber()</code>, <code>getInt()</code>
 *  <code>getUint()</code>, <code>getBoolean()</code>, and
 *  <code>getClass()</code> methods to convert the value
 *  to more specific types.</p>
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>undefined</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, exactly as it is stored
 *  in the <code>content</code> Object,
 *  or <code>undefined</code> if the resource is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {*}
 */
mx.resources.IResourceManager.prototype.getObject = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as a String,
 *  after substituting specified values for placeholders.
 *
 *  <p>This method calls <code>getObject()</code>
 *  and then casts the result to a String.</p>
 *
 *  <p>If a <code>parameters</code> Array is passed to this method,
 *  the parameters in it are converted to Strings
 *  and then substituted, in order, for the placeholders
 *  <code>"{0}"</code>, <code>"{1}"</code>, and so on, in the String
 *  before it is returned.</p>
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>null</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam parameters An Array of parameters that are
 *  substituted for the placeholders.
 *  Each parameter is converted to a String with the <code>toString()</code> method
 *  before being substituted.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as a String,
 *  or <code>null</code> if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {Array=} parameters
 * @param {string=} locale
 * @return {string}
 */
mx.resources.IResourceManager.prototype.getString = function(bundleName, resourceName, parameters, locale) {
};
/**
 *  Gets the value of a specified resource as an Array of Strings.
 *
 *  <p>This method assumes that the resource value is a String
 *  containing a comma-separated list of items.
 *  It calls the <code>getString()</code> method, splits the String
 *  into items at the commas, and trims white space
 *  before and after each item.
 *  It is useful if you have written a line such as:</p>
 *
 *  <pre>
 *  COUNTRIES=India, China, Japan
 *  </pre>
 *
 *  <p>in a properties file and you want to obtain the value
 *  <code>[ "India", "China", "Japan" ]</code>
 *  rather than the value <code>"India, China, Japan"</code>.</p> 
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>null</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as an Array of Strings,
 *  or <code>null</code> if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {Array}
 */
mx.resources.IResourceManager.prototype.getStringArray = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as a Number.
 *
 *  <p>This method calls <code>getObject()</code>
 *  and casts the result to a Number.
 *  It is useful if you have written a line such as:</p>
 *
 *  <pre>
 *  LONGITUDE=170.3
 *  </pre>
 *
 *  <p>in a properties file and want to obtain the value
 *  170.3 rather than <code>"170.3"</code>.</p> 
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>NaN</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as a Number,
 *  or <code>NaN</code> if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {number}
 */
mx.resources.IResourceManager.prototype.getNumber = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as an int.
 *
 *  <p>This method calls <code>getObject()</code>
 *  and casts the result to an int.
 *  It is useful if you have written a line such as:</p>
 *
 *  <pre>
 *  MINIMUM=5
 *  </pre>
 *
 *  <p>in a properties file and want to obtain the value
 *  5 rather than <code>"5"</code>.</p> 
 *
 *  <p>If the specified resource is not found,
 *  this method returns 0.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as an int,
 *  or 0 if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {number}
 */
mx.resources.IResourceManager.prototype.getInt = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as a uint.
 *
 *  <p>This method calls the <code>getObject()</code> method
 *  and casts the result to a uint.
 *  It is useful if you have written a line such as:</p>
 *
 *  <pre>
 *  MINIMUM=5
 *  </pre>
 *
 *  <p>in a properties file and want to obtain the value
 *  5 rather than <code>"5"</code>.</p> 
 *
 *  <p>If the specified resource is not found,
 *  this method returns 0.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as a uint,
 *  or 0 if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {number}
 */
mx.resources.IResourceManager.prototype.getUint = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as a Boolean.
 *
 *  <p>This method first calls <code>getString()</code>
 *  and converts the result to lowercase.
 *  It then returns <code>true</code>
 *  if the result was <code>"true"</code>.
 *  and <code>false</code> otherwise.</p>
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>false</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as a Boolean,
 *  or <code>false</code> if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {boolean}
 */
mx.resources.IResourceManager.prototype.getBoolean = function(bundleName, resourceName, locale) {
};
/**
 *  Gets the value of a specified resource as a Class.
 *
 *  <p>This method calls <code>getObject()</code>
 *  and coerces it to type Class using the <code>as</code> operator.
 *  The result will be <code>null</code> if the resource value
 *  was not a class reference.
 *  It is useful if you have written a lines such as</p>
 *
 *  <pre>
 *  IMAGE=Embed("image.jpg")
 *  BUTTON_SKIN=ClassReference("skins.ButtonSkin_en_US")
 *  </pre>
 *
 *  <p>in a properties file and want to obtain
 *  the Class that the <code>Embed()</code>
 *  or <code>ClassReference()</code> directive produced.</p> 
 *
 *  <p>If the specified resource is not found,
 *  this method returns <code>null</code>.</p>
 *
 *  @asparam bundleName The name of a resource bundle.
 *
 *  @asparam resourceName The name of a resource in the resource bundle.
 *
 *  @asparam locale A specific locale to be used for the lookup,
 *  or <code>null</code> to search all locales
 *  in the <code>localeChain</code>.
 *  This parameter is optional and defaults to <code>null</code>;
 *  you should seldom need to specify it.
 *
 *  @asreturn The resource value, as a <code>Class</code>,
 *  or <code>null</code> if it is not found.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} bundleName
 * @param {string} resourceName
 * @param {string=} locale
 * @return {Object}
 */
mx.resources.IResourceManager.prototype.getClass = function(bundleName, resourceName, locale) {
};
/**
 *  Creates instances of all ResourceBundle subclasses that were compiled into the SWF
 *  and adds them to the ResourceManager.
 * 
 *  <p>For example, if the <code>locales</code> parameter is [ "en_US", "ja_JP" ]
 *  and the <code>bundleNames</code> parameter is [ "core", "controls" ],
 *  then four resource bundles will be installed.</p>
 * 
 *  <p>This method is used only by classes that implement the IFlexModuleFactory interface.</p>
 *
 *  @asparam applicationDomain  The ApplicationDomain that is used to look up the resource bundle
 *  classes by name.
 *
 *  @asparam locales An Array of Strings that specify the locales for which the SWF was compiled.
 *
 *  @asparam bundleNames An Array of Strings that specify the names of the resource bundles
 *  that were compiled into the SWF.
 *
 *  @asparam useWeakReference A flag that specifyies whether the resource bundles should be
 *  intalled into the ResourceManager using a weak reference.
 *
 *  @asreturn An Array of the ResourceBundle instances that were created
 *  and added to the ResourceManager.
 *  
 * @see mx.core.IFlexModuleFactory
 * 
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Array} locales
 * @param {Array} bundleNames
 * @param {boolean=} useWeakReference
 * @return {Array}
 */
mx.resources.IResourceManager.prototype.installCompiledResourceBundles = function(locales, bundleNames, useWeakReference) {
};
/**
 *  Initializes the <code>localeChain</code> property of the ResourceManager
 *  using an algorithm that compares the operating system's list of user-preferred
 *  locales with the list of locales available in the SWF.
 * 
 *  <p>For example, if the user has indicated in the operating system that she
 *  prefers French, and the SWF was compiled for the locales en_US, fr_FR, and de_DE,
 *  then the <code>localeChain</code> will be set so that the first locale in it
 *  is fr_FR.</p>
 * 
 *  <p>This method is used only by classes that implement the IFlexModuleFactory interface.</p>
 *
 *  @asparam  compiledLocales An Array of Strings specifying the locales
 *  for which the SWF was compiled.
 * 
 * @see mx.core.IFlexModuleFactory
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Array} compiledLocales
 */
mx.resources.IResourceManager.prototype.initializeLocaleChain = function(compiledLocales) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.resources.IResourceManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IResourceManager', qName: 'mx.resources.IResourceManager', kind: 'interface' }], interfaces: [org.apache.royale.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.resources.IResourceManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'localeChain': { type: 'Array', access: 'readwrite', declaredBy: 'mx.resources.IResourceManager'}
      };
    },
    methods: function () {
      return {
        'addResourceBundle': { type: 'void', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'mx.resources.IResourceBundle', false ,'Boolean', true ]; }},
        'removeResourceBundle': { type: 'void', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'removeResourceBundlesForLocale': { type: 'void', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ]; }},
        'update': { type: 'void', declaredBy: 'mx.resources.IResourceManager'},
        'getLocales': { type: 'Array', declaredBy: 'mx.resources.IResourceManager'},
        'getPreferredLocaleChain': { type: 'Array', declaredBy: 'mx.resources.IResourceManager'},
        'getBundleNamesForLocale': { type: 'Array', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ]; }},
        'getResourceBundle': { type: 'mx.resources.IResourceBundle', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'findResourceBundleWithResource': { type: 'mx.resources.IResourceBundle', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'getObject': { type: '*', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getString': { type: 'String', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'Array', true ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getStringArray': { type: 'Array', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getNumber': { type: 'Number', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getInt': { type: 'int', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getUint': { type: 'uint', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getBoolean': { type: 'Boolean', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'getClass': { type: 'Class', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'change' } ] } ]; }},
        'installCompiledResourceBundles': { type: 'Array', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'Array', false ,'Array', false ,'Boolean', true ]; }},
        'initializeLocaleChain': { type: 'void', declaredBy: 'mx.resources.IResourceManager', parameters: function () { return [ 'Array', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.resources.IResourceManager.prototype.ROYALE_COMPILE_FLAGS = 26;
