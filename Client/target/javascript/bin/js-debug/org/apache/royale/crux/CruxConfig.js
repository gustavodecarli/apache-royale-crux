/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/CruxConfig.as
 * org.apache.royale.crux.CruxConfig
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.CruxConfig');
/* Royale Dependency List: org.apache.royale.utils.Language*/

goog.require('org.apache.royale.crux.ICruxConfig');



/**
 * Constructor
 * @constructor
 * @implements {org.apache.royale.crux.ICruxConfig}
 */
org.apache.royale.crux.CruxConfig = function() {
  
  this._eventPackages = [];
  this._viewPackages = [];
  this._defaultDispatcher = org.apache.royale.crux.CruxConfig.GLOBAL_DISPATCHER;
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.CruxConfig', org.apache.royale.crux.CruxConfig);


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.crux.CruxConfig.GLOBAL_DISPATCHER = "global";


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.crux.CruxConfig.LOCAL_DISPATCHER = "local";


/**
 * @protected
 * @const
 * @type {RegExp}
 */
org.apache.royale.crux.CruxConfig.WILDCARD_PACKAGE = /^((?:(?:[a-zA-Z]+(?:\.[a-zA-Z]+)*)\.)?(?:[a-zA-Z]*))(\.|\.\*)$/;


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.crux.CruxConfig.prototype._strict = true;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.crux.CruxConfig.prototype._setUpEventType = "addedToStage";


/**
 * @protected
 * @type {number}
 */
org.apache.royale.crux.CruxConfig.prototype._setUpEventPriority = 50;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.crux.CruxConfig.prototype._setUpEventPhase = 1;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.crux.CruxConfig.prototype._tearDownEventType = "removedFromStage";


/**
 * @protected
 * @type {number}
 */
org.apache.royale.crux.CruxConfig.prototype._tearDownEventPriority = 50;


/**
 * @protected
 * @type {number}
 */
org.apache.royale.crux.CruxConfig.prototype._tearDownEventPhase = 1;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.CruxConfig.prototype._eventPackages;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.CruxConfig.prototype._viewPackages;


/**
 * @protected
 * @type {Function}
 */
org.apache.royale.crux.CruxConfig.prototype._defaultFaultHandler;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.crux.CruxConfig.prototype._defaultDispatcher;


/**
 * Internal setter for <code>eventPackages</code> property.
 *
 * @asparam value An Array of Strings or a single String that will be split on ","
 * @protected
 * @param {*} value
 */
org.apache.royale.crux.CruxConfig.prototype.setEventPackages = function(value) {
  this._eventPackages = this.parsePackageValue(value);
};


/**
 * Internal setter for <code>viewPackages</code> property.
 *
 * @asparam value An Array of Strings or a single String that will be split on ","
 * @protected
 * @param {*} value
 */
org.apache.royale.crux.CruxConfig.prototype.setViewPackages = function(value) {
  this._viewPackages = this.parsePackageValue(value);
};


/**
 * Parses a wildcard type package property value into an Array of parsed package names.
 *
 * @asparam value An Array of Strings or a single String that will be split on ","
 * @asreturn An Array of package name strings in a common format.
 * @protected
 * @param {*} value
 * @return {Array}
 */
org.apache.royale.crux.CruxConfig.prototype.parsePackageValue = function(value) {
  if (value == null) {
    return [];
  } else if (org.apache.royale.utils.Language.is(value, Array)) {
    return this.parsePackageNames(org.apache.royale.utils.Language.as(value, Array));
  } else if (org.apache.royale.utils.Language.is(value, String)) {
    return this.parsePackageNames(value.replace(/\s/g, "").split(","));
  } else {
    throw new Error("Package specified using unknown type. Supported types are Array or String.");
  }
};


/**
 * Parses an array of package names.
 * Processes the package names to a common format - removing trailing '.*' wildcard notation.
 *
 * @asparam packageNames The package names to parse.
 * @asreturn An Array of the parsed package names.
 * @protected
 * @param {Array} packageNames
 * @return {Array}
 */
org.apache.royale.crux.CruxConfig.prototype.parsePackageNames = function(packageNames) {
  var /** @type {Array} */ parsedPackageNames = [];
  var foreachiter0_target = packageNames;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var packageName = foreachiter0_target[foreachiter0];
  {
    parsedPackageNames.push(this.parsePackageName(packageName));
  }}
  
  return parsedPackageNames;
};


/**
 * Parse Package Name
 * Processes the package name to a common format - removing trailing '.*' wildcard notation.
 *
 * @asparam packageName The package name to parse.
 * @asreturn The package name with the wildcard notation stripped.
 * @protected
 * @param {string} packageName
 * @return {string}
 */
org.apache.royale.crux.CruxConfig.prototype.parsePackageName = function(packageName) {
  var /** @type {Object} */ match = org.apache.royale.crux.CruxConfig.WILDCARD_PACKAGE.exec(packageName);
  if (match)
    return org.apache.royale.utils.Language.string(match[1]);
  return packageName;
};


org.apache.royale.crux.CruxConfig.prototype.get__strict = function() {
  return this._strict;
};


org.apache.royale.crux.CruxConfig.prototype.set__strict = function(value) {
  this._strict = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__setUpEventType = function() {
  return this._setUpEventType;
};


org.apache.royale.crux.CruxConfig.prototype.set__setUpEventType = function(value) {
  this._setUpEventType = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__setUpEventPriority = function() {
  return this._setUpEventPriority;
};


org.apache.royale.crux.CruxConfig.prototype.set__setUpEventPriority = function(value) {
  this._setUpEventPriority = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__setUpEventPhase = function() {
  return this._setUpEventPhase;
};


org.apache.royale.crux.CruxConfig.prototype.set__setUpEventPhase = function(value) {
  this._setUpEventPhase = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventType = function() {
  return this._tearDownEventType;
};


org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventType = function(value) {
  this._tearDownEventType = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventPriority = function() {
  return this._tearDownEventPriority;
};


org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventPriority = function(value) {
  this._tearDownEventPriority = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventPhase = function() {
  return this._tearDownEventPhase;
};


org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventPhase = function(value) {
  this._tearDownEventPhase = value;
};


org.apache.royale.crux.CruxConfig.prototype.get__eventPackages = function() {
  return this._eventPackages;
};


org.apache.royale.crux.CruxConfig.prototype.set__eventPackages = function(value) {
  this.setEventPackages(value);
};


org.apache.royale.crux.CruxConfig.prototype.get__viewPackages = function() {
  return this._viewPackages;
};


org.apache.royale.crux.CruxConfig.prototype.set__viewPackages = function(value) {
  this.setViewPackages(value);
};


org.apache.royale.crux.CruxConfig.prototype.get__defaultFaultHandler = function() {
  return this._defaultFaultHandler;
};


org.apache.royale.crux.CruxConfig.prototype.set__defaultFaultHandler = function(faultHandler) {
  this._defaultFaultHandler = faultHandler;
};


org.apache.royale.crux.CruxConfig.prototype.get__defaultDispatcher = function() {
  return this._defaultDispatcher;
};


org.apache.royale.crux.CruxConfig.prototype.set__defaultDispatcher = function(dispatcher) {
  this._defaultDispatcher = dispatcher;
};


Object.defineProperties(org.apache.royale.crux.CruxConfig.prototype, /** @lends {org.apache.royale.crux.CruxConfig.prototype} */ {
/**
  * @export
  * @type {boolean} */
strict: {
get: org.apache.royale.crux.CruxConfig.prototype.get__strict,
set: org.apache.royale.crux.CruxConfig.prototype.set__strict},
/**
  * @export
  * @type {string} */
setUpEventType: {
get: org.apache.royale.crux.CruxConfig.prototype.get__setUpEventType,
set: org.apache.royale.crux.CruxConfig.prototype.set__setUpEventType},
/**
  * @export
  * @type {number} */
setUpEventPriority: {
get: org.apache.royale.crux.CruxConfig.prototype.get__setUpEventPriority,
set: org.apache.royale.crux.CruxConfig.prototype.set__setUpEventPriority},
/**
  * @export
  * @type {number} */
setUpEventPhase: {
get: org.apache.royale.crux.CruxConfig.prototype.get__setUpEventPhase,
set: org.apache.royale.crux.CruxConfig.prototype.set__setUpEventPhase},
/**
  * @export
  * @type {string} */
tearDownEventType: {
get: org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventType,
set: org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventType},
/**
  * @export
  * @type {number} */
tearDownEventPriority: {
get: org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventPriority,
set: org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventPriority},
/**
  * @export
  * @type {number} */
tearDownEventPhase: {
get: org.apache.royale.crux.CruxConfig.prototype.get__tearDownEventPhase,
set: org.apache.royale.crux.CruxConfig.prototype.set__tearDownEventPhase},
/**
  * @export
  * @type {Array} */
eventPackages: {
get: org.apache.royale.crux.CruxConfig.prototype.get__eventPackages,
set: org.apache.royale.crux.CruxConfig.prototype.set__eventPackages},
/**
  * @export
  * @type {Array} */
viewPackages: {
get: org.apache.royale.crux.CruxConfig.prototype.get__viewPackages,
set: org.apache.royale.crux.CruxConfig.prototype.set__viewPackages},
/**
  * @export
  * @type {Function} */
defaultFaultHandler: {
get: org.apache.royale.crux.CruxConfig.prototype.get__defaultFaultHandler,
set: org.apache.royale.crux.CruxConfig.prototype.set__defaultFaultHandler},
/**
  * @export
  * @type {string} */
defaultDispatcher: {
get: org.apache.royale.crux.CruxConfig.prototype.get__defaultDispatcher,
set: org.apache.royale.crux.CruxConfig.prototype.set__defaultDispatcher}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.CruxConfig.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CruxConfig', qName: 'org.apache.royale.crux.CruxConfig', kind: 'class' }], interfaces: [org.apache.royale.crux.ICruxConfig] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.CruxConfig.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strict': { type: 'Boolean', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'setUpEventType': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'setUpEventPriority': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'setUpEventPhase': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'tearDownEventType': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'tearDownEventPriority': { type: 'int', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'tearDownEventPhase': { type: 'uint', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'eventPackages': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'viewPackages': { type: '*', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'defaultFaultHandler': { type: 'Function', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'},
        'defaultDispatcher': { type: 'String', access: 'readwrite', declaredBy: 'org.apache.royale.crux.CruxConfig'}
      };
    },
    methods: function () {
      return {
        'CruxConfig': { type: '', declaredBy: 'org.apache.royale.crux.CruxConfig'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.CruxConfig.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CruxConfig.js.map
