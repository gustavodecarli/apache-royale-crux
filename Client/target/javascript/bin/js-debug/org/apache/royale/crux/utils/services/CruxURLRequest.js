/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/utils/services/CruxURLRequest.as
 * org.apache.royale.crux.utils.services.CruxURLRequest
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.utils.services.CruxURLRequest');
/* Royale Dependency List: org.apache.royale.events.Event,org.apache.royale.events.ProgressEvent,org.apache.royale.net.HTTPConstants,org.apache.royale.net.URLLoader,org.apache.royale.net.URLRequest*/




/**
 *
 * @asparam request
 * @asparam resultHandler The resultHandler function must expect the an event. event.currentTarget.data should contain the result. Signature can be extended with additional handlerArgs
 * @asparam faultHandler The faultHandler function will be called for IOErrors and SecurityErrors with the specific error event.
 * @asparam progressHandler
 * @asparam httpStatusHandler
 * @asparam handlerArgs The handlerArgs will be applied to the signature of the resultHandler function.
 *
 * @constructor
 * @param {org.apache.royale.net.URLRequest} request
 * @param {Function} resultHandler
 * @param {Function=} faultHandler
 * @param {Function=} progressHandler
 * @param {Function=} httpStatusHandler
 * @param {Array=} handlerArgs
 */
org.apache.royale.crux.utils.services.CruxURLRequest = function(request, resultHandler, faultHandler, progressHandler, httpStatusHandler, handlerArgs) {
  var self = this;
  faultHandler = typeof faultHandler !== 'undefined' ? faultHandler : null;
  progressHandler = typeof progressHandler !== 'undefined' ? progressHandler : null;
  httpStatusHandler = typeof httpStatusHandler !== 'undefined' ? httpStatusHandler : null;
  handlerArgs = typeof handlerArgs !== 'undefined' ? handlerArgs : null;
  this.loader = new org.apache.royale.net.URLLoader();
  this.loader.addEventListener(org.apache.royale.net.HTTPConstants.COMPLETE, function(e) {
    if (handlerArgs == null) {
      resultHandler(e);
    } else {
      resultHandler.apply(null, [e].concat(handlerArgs));
    }
  });
  if (faultHandler != null) {
    this.loader.addEventListener(org.apache.royale.net.HTTPConstants.IO_ERROR, function(e) {
      if (handlerArgs == null) {
        faultHandler(e);
      } else {
        faultHandler.apply(null, [e].concat(handlerArgs));
      }
    });
    this.loader.addEventListener(org.apache.royale.net.HTTPConstants.SECURITY_ERROR, function(e) {
      if (handlerArgs == null) {
        faultHandler(e);
      } else {
        faultHandler.apply(null, [e].concat(handlerArgs));
      }
    });
  }
  if (progressHandler != null) {
    this.loader.addEventListener(org.apache.royale.events.ProgressEvent.PROGRESS, function(e) {
      if (handlerArgs == null) {
        progressHandler(e);
      } else {
        progressHandler.apply(null, [e].concat(handlerArgs));
      }
    });
  }
  if (httpStatusHandler != null) {
    this.loader.addEventListener(org.apache.royale.net.HTTPConstants.STATUS, function(e) {
      if (handlerArgs == null) {
        httpStatusHandler(e);
      } else {
        httpStatusHandler.apply(null, [e].concat(handlerArgs));
      }
    });
  }
  this.loader.load(request);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.utils.services.CruxURLRequest', org.apache.royale.crux.utils.services.CruxURLRequest);


/**
 * @export
 * @type {org.apache.royale.net.URLLoader}
 */
org.apache.royale.crux.utils.services.CruxURLRequest.prototype.loader;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.utils.services.CruxURLRequest.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CruxURLRequest', qName: 'org.apache.royale.crux.utils.services.CruxURLRequest', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.utils.services.CruxURLRequest.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'loader': { type: 'org.apache.royale.net.URLLoader', get_set: function (/** org.apache.royale.crux.utils.services.CruxURLRequest */ inst, /** * */ v) {return v !== undefined ? inst.loader = v : inst.loader;}}
      };
    },
    methods: function () {
      return {
        'CruxURLRequest': { type: '', declaredBy: 'org.apache.royale.crux.utils.services.CruxURLRequest', parameters: function () { return [ 'org.apache.royale.net.URLRequest', false ,'Function', false ,'Function', true ,'Function', true ,'Function', true ,'Array', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.utils.services.CruxURLRequest.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./CruxURLRequest.js.map
