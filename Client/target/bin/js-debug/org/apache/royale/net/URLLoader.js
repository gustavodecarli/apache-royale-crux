/**
 * Generated by Apache Royale Compiler from org/apache/royale/net/URLLoader.as
 * org.apache.royale.net.URLLoader
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.net.URLLoader');
/* Royale Dependency List: org.apache.royale.events.Event,org.apache.royale.events.ValueEvent,org.apache.royale.net.HTTPConstants,org.apache.royale.net.HTTPHeader,org.apache.royale.net.URLRequest,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.net.URLLoaderBase');



/**
 * @constructor
 * @extends {org.apache.royale.net.URLLoaderBase}
 * @param {org.apache.royale.net.URLRequest=} request
 */
org.apache.royale.net.URLLoader = function(request) {
  request = typeof request !== 'undefined' ? request : null;
  org.apache.royale.net.URLLoader.base(this, 'constructor');
  this.org_apache_royale_net_URLLoader_element = new XMLHttpRequest();
  if (request)
    this.load(request);
};
goog.inherits(org.apache.royale.net.URLLoader, org.apache.royale.net.URLLoaderBase);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.net.URLLoader', org.apache.royale.net.URLLoader);


/**
 * @private
 * @type {Function}
 */
org.apache.royale.net.URLLoader._corsCredentialsChecker;


/**
 * Intended as global configuration of CORS withCredentials setting on requests
 * This method is not reflectable, is js-only and is eliminated via dead-code-elimination
 * in js-release builds if it is never used.
 * URLLoader is used a service base in other service classes, so this provides
 * a 'low level' solution for a bead that can work at application level.
 * The 'checker' function parameter should be a function that takes a url as its single argument
 * and returns true or false depending on whether 'withCredentials' should be set for
 * that http request. Set it to null to always be false.
 * @asprivate
 * @royalesuppressexport
 * @param {Function} checker
 */
org.apache.royale.net.URLLoader.setCORSCredentialsChecker = function(checker) {
  org.apache.royale.net.URLLoader._corsCredentialsChecker = checker;
};


/**
 * @type {number}
 */
org.apache.royale.net.URLLoader.prototype.bytesLoaded = 0;


/**
 * @type {number}
 */
org.apache.royale.net.URLLoader.prototype.bytesTotal = 0;


/**
 * @private
 * @type {XMLHttpRequest}
 */
org.apache.royale.net.URLLoader.prototype.org_apache_royale_net_URLLoader_element;


/**
 *  Makes the URL request.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.7.0
 * @export
 * @param {org.apache.royale.net.URLRequest} request
 */
org.apache.royale.net.URLLoader.prototype.load = function(request) {
  
  var /** @type {XMLHttpRequest} */ element = org.apache.royale.utils.Language.as(this.org_apache_royale_net_URLLoader_element, XMLHttpRequest);
  element.onreadystatechange = org.apache.royale.utils.Language.closure(this.progressHandler, this, 'progressHandler');
  var /** @type {string} */ url = request.url;
  var /** @type {string} */ contentData = null;
  if (request.data != null) {
    if (request.method == org.apache.royale.net.HTTPConstants.POST) {
      contentData = org.apache.royale.utils.Language.as(request.data, String);
    }
  }
  element.open(request.method, request.url, true);
  var /** @type {boolean} */ sawContentType = false;
  if (request.requestHeaders) {
    var /** @type {number} */ n = (request.requestHeaders.length) >> 0;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      var /** @type {org.apache.royale.net.HTTPHeader} */ header = request.requestHeaders[i];
      if (header.name == org.apache.royale.net.HTTPHeader.CONTENT_TYPE) {
        sawContentType = true;
      }
      element.setRequestHeader(header.name, header.value);
    }
  }
  if (org.apache.royale.net.URLLoader._corsCredentialsChecker != null) {
    element.withCredentials = !!(org.apache.royale.net.URLLoader._corsCredentialsChecker(url));
  }
  if (contentData) {
    element.send(contentData);
  } else {
    element.send();
  }
  this.dispatchEvent(new org.apache.royale.events.Event("postSend"));
};


/**
 * @royaleignorecoercion XMLHttpRequest
 * @protected
 */
org.apache.royale.net.URLLoader.prototype.progressHandler = function() {
  var /** @type {XMLHttpRequest} */ element = this.org_apache_royale_net_URLLoader_element;
  if (element.readyState == 2) {
    this.dispatchEvent(org.apache.royale.net.HTTPConstants.RESPONSE_STATUS);
    this.dispatchEvent(new org.apache.royale.events.ValueEvent(org.apache.royale.net.HTTPConstants.STATUS, element.status));
  } else if (element.readyState == 4) {
    if (element.status >= 400) {
      this.dispatchEvent(org.apache.royale.net.HTTPConstants.IO_ERROR);
    } else {
      this.dispatchEvent(org.apache.royale.net.HTTPConstants.COMPLETE);
    }
  }
};


org.apache.royale.net.URLLoader.prototype.get__data = function() {
  
  return this.org_apache_royale_net_URLLoader_element.responseText;
};


Object.defineProperties(org.apache.royale.net.URLLoader.prototype, /** @lends {org.apache.royale.net.URLLoader.prototype} */ {
/**
  * @export
  * @type {string} */
data: {
get: org.apache.royale.net.URLLoader.prototype.get__data}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.net.URLLoader.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'URLLoader', qName: 'org.apache.royale.net.URLLoader', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.net.URLLoader.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'bytesLoaded': { type: 'uint', get_set: function (/** org.apache.royale.net.URLLoader */ inst, /** * */ v) {return v !== undefined ? inst.bytesLoaded = v : inst.bytesLoaded;}},
        'bytesTotal': { type: 'uint', get_set: function (/** org.apache.royale.net.URLLoader */ inst, /** * */ v) {return v !== undefined ? inst.bytesTotal = v : inst.bytesTotal;}}
      };
    },
    accessors: function () {
      return {
        'data': { type: 'String', access: 'readonly', declaredBy: 'org.apache.royale.net.URLLoader'}
      };
    },
    methods: function () {
      return {
        'URLLoader': { type: '', declaredBy: 'org.apache.royale.net.URLLoader', parameters: function () { return [ 'org.apache.royale.net.URLRequest', true ]; }},
        'load': { type: 'void', declaredBy: 'org.apache.royale.net.URLLoader', parameters: function () { return [ 'org.apache.royale.net.URLRequest', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.net.URLLoader.prototype.ROYALE_COMPILE_FLAGS = 10;
