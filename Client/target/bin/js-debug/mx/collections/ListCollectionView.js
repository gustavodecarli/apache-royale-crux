/**
 * Generated by Apache Royale Compiler from mx/collections/ListCollectionView.as
 * mx.collections.ListCollectionView
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.collections.ListCollectionView');
/* Royale Dependency List: mx.collections.ISort,mx.collections.Sort,mx.collections.errors.CursorError,mx.collections.errors.SortError,mx.core.mx_internal,mx.events.CollectionEvent,mx.events.CollectionEventKind,mx.events.PropertyChangeEvent,org.apache.royale.events.Event,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.Language,XML*/
goog.provide('mx.collections.ListCollectionView.ListCollectionViewBookmark');
goog.provide('mx.collections.ListCollectionView.ListCollectionViewCursor');

goog.require('mx.collections.CursorBookmark');
goog.require('mx.collections.ICollectionView');
goog.require('mx.collections.IList');
goog.require('mx.collections.IViewCursor');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.utils.Proxy');



/**
 *  The ListCollectionView constructor.
 *
 *  @asparam list the IList this ListCollectionView is meant to wrap.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {org.apache.royale.utils.Proxy}
 * @implements {mx.collections.ICollectionView}
 * @implements {mx.collections.IList}
 * @param {mx.collections.IList=} list
 */
mx.collections.ListCollectionView = function(list) {
  list = typeof list !== 'undefined' ? list : null;
  mx.collections.ListCollectionView.base(this, 'constructor');
  this.mx_collections_ListCollectionView_eventDispatcher = new org.apache.royale.events.EventDispatcher(this);
  this.list = list;
};
goog.inherits(mx.collections.ListCollectionView, org.apache.royale.utils.Proxy);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.ListCollectionView', mx.collections.ListCollectionView);


/**
 * @private
 * @type {org.apache.royale.events.EventDispatcher}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_eventDispatcher;


/**
 * @private
 * @type {number}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_revision = 0;


/**
 * @private
 * @type {number}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_autoUpdateCounter = 0;


/**
 * @private
 * @type {Array}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_pendingUpdates;


/**
 * @type {boolean}
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__dispatchResetEvent = true;


/**
 * @export
 * @type {Array}
 */
mx.collections.ListCollectionView.prototype.localIndex;


/**
 *  Called automatically by the MXML compiler when the ListCollectionView
 *  is created using an MXML tag.  
 *  If you create the ListCollectionView through ActionScript, you 
 *  must call this method passing in the MXML document and 
 *  <code>null</code> for the <code>id</code>.
 *
 *  @asparam document The MXML document containing this ListCollectionView.
 *
 *  @asparam id Ignored.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} document
 * @param {string} id
 */
mx.collections.ListCollectionView.prototype.initialized = function(document, id) {
  this.refresh();
};


/**
 * @private
 * @type {mx.collections.IList}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView__list;


/**
 * @private
 * @type {Function}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView__filterFunction;


/**
 * @private
 * @type {mx.collections.ISort}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView__sort;


/**
 *  @inheritDoc
 *
 *  @see #enableAutoUpdate()
 *  @see mx.events.CollectionEvent
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @return {boolean}
 */
mx.collections.ListCollectionView.prototype.contains = function(item) {
  return this.getItemIndex(item) != -1;
};


/**
 *  @inheritDoc
 * 
 *  @see mx.collections.ICollectionView#enableAutoUpdate()
 *  @see mx.events.CollectionEvent
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.collections.ListCollectionView.prototype.disableAutoUpdate = function() {
  this.mx_collections_ListCollectionView_autoUpdateCounter++;
};


/**
 *  @inheritDoc
 * 
 *  @see mx.collections.ICollectionView#disableAutoUpdate()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.collections.ListCollectionView.prototype.enableAutoUpdate = function() {
  if (this.mx_collections_ListCollectionView_autoUpdateCounter > 0) {
    this.mx_collections_ListCollectionView_autoUpdateCounter--;
    if (this.mx_collections_ListCollectionView_autoUpdateCounter == 0) {
      this.mx_collections_ListCollectionView_handlePendingUpdates();
    }
  }
};


/**
 *  @inheritDoc
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {mx.collections.IViewCursor}
 */
mx.collections.ListCollectionView.prototype.createCursor = function() {
  return new mx.collections.ListCollectionView.ListCollectionViewCursor(this);
};


/**
 *  @inheritDoc
 *
 *  @see mx.events.CollectionEvent
 *  @see mx.core.IPropertyChangeNotifier
 *  @see mx.events.PropertyChangeEvent
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {Object=} property
 * @param {Object=} oldValue
 * @param {Object=} newValue
 */
mx.collections.ListCollectionView.prototype.itemUpdated = function(item, property, oldValue, newValue) {
  property = typeof property !== 'undefined' ? property : null;
  oldValue = typeof oldValue !== 'undefined' ? oldValue : null;
  newValue = typeof newValue !== 'undefined' ? newValue : null;
  this.list.itemUpdated(item, property, oldValue, newValue);
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {boolean}
 */
mx.collections.ListCollectionView.prototype.refresh = function() {
  return this.mx_collections_ListCollectionView_internalRefresh(true);
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @param {number=} prefetch
 * @return {Object}
 */
mx.collections.ListCollectionView.prototype.getItemAt = function(index, prefetch) {
  prefetch = typeof prefetch !== 'undefined' ? prefetch : 0;
  if (this.localIndex) {
    return this.localIndex[index];
  } else if (this.list) {
    return this.list.getItemAt(index, prefetch);
  }
  return null;
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 * @return {Object}
 */
mx.collections.ListCollectionView.prototype.setItemAt = function(item, index) {
  var /** @type {number} */ listIndex = index;
  if (this.localIndex) {
    if (index > this.localIndex.length) {
      listIndex = this.list.length;
    } else {
      var /** @type {Object} */ oldItem = this.localIndex[index];
      listIndex = this.list.getItemIndex(oldItem);
    }
  }
  return this.list.setItemAt(item, listIndex);
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.ListCollectionView.prototype.addItem = function(item) {
  if (this.localIndex)
    this.addItemAt(item, (this.localIndex.length) >> 0);
  else
    this.addItemAt(item, this.length);
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 */
mx.collections.ListCollectionView.prototype.addItemAt = function(item, index) {
  var /** @type {number} */ listIndex = index;
  if (this.localIndex && this.sort) {
    listIndex = this.list.length;
  } else if (this.localIndex && this.filterFunction != null) {
    if (listIndex == this.localIndex.length)
      listIndex = this.list.length;
    else
      listIndex = this.list.getItemIndex(this.localIndex[index]);
  } else if (this.localIndex) {
    listIndex = this.list.length;
  }
  this.list.addItemAt(item, listIndex);
};


/**
 *  Adds a list of items to the current list, placing them at the end of
 *  the list in the order they are passed.
 * 
 *  @asparam addList IList The list of items to add to the current list
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.IList} addList
 */
mx.collections.ListCollectionView.prototype.addAll = function(addList) {
  if (this.localIndex)
    this.addAllAt(addList, (this.localIndex.length) >> 0);
  else
    this.addAllAt(addList, this.length);
};


/**
 *  Adds a list of items to the current list, placing them at the position
 *  index passed in to the function.  The items are placed at the index location
 *  and placed in the order they are recieved.
 * 
 *  @asparam addList IList The list of items to add to the current list
 *  @asparam index The location of the current list to place the new items.
 *  @throws RangeError if index is less than 0 or greater than the length of the list. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.IList} addList
 * @param {number} index
 */
mx.collections.ListCollectionView.prototype.addAllAt = function(addList, index) {
  var /** @type {number} */ length = addList.length;
  for (var /** @type {number} */ i = 0; i < length; i++) {
    var /** @type {number} */ insertIndex = (i + index) >> 0;
    if (insertIndex > this.length)
      insertIndex = this.length;
    this.addItemAt(addList.getItemAt(i), insertIndex);
  }
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.getItemIndex = function(item) {
  var /** @type {number} */ i = 0;
  //var /** @type {number} */ i = 0;
  if (this.localIndex && this.filterFunction != null) {
    var /** @type {number} */ len = (this.localIndex.length) >> 0;
    for (i = 0; i < len; i++) {
      if (this.localIndex[i] == item)
        return i;
    }
    return -1;
  } else if (this.localIndex && this.sort) {
    var /** @type {number} */ startIndex = this.http_$$www_adobe_com$2006$flex$mx$internal__findItem(item, mx.collections.Sort.FIRST_INDEX_MODE);
    if (startIndex == -1)
      return -1;
    var /** @type {number} */ endIndex = this.http_$$www_adobe_com$2006$flex$mx$internal__findItem(item, mx.collections.Sort.LAST_INDEX_MODE);
    for (i = startIndex; i <= endIndex; i++) {
      if (this.localIndex[i] == item)
        return i;
    }
    return -1;
  } else if (this.localIndex) {
    len = (this.localIndex.length) >> 0;
    for (i = 0; i < len; i++) {
      if (this.localIndex[i] == item)
        return i;
    }
    return -1;
  }
  return this.list.getItemIndex(item);
};


/**
 * @inheritDoc 
 * @export
 * @param {Object} item
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getLocalItemIndex = function(item) {
  var /** @type {number} */ i = 0;
  //var /** @type {number} */ i = 0;
  var /** @type {number} */ len = (this.localIndex.length) >> 0;
  for (i = 0; i < len; i++) {
    if (this.localIndex[i] == item)
      return i;
  }
  return -1;
};


/**
 * @asprivate
 * @private
 * @param {Object} item
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_getFilteredItemIndex = function(item) {
  var /** @type {number} */ loc = this.list.getItemIndex(item);
  if (this.filterFunction == null)
    return loc;
  if (loc == 0)
    return 0;
  for (var /** @type {number} */ i = (loc - 1) >> 0; i >= 0; i--) {
    var /** @type {Object} */ prevItem = this.list.getItemAt(i);
    if (this.filterFunction(prevItem)) {
      var /** @type {number} */ len = (this.localIndex.length) >> 0;
      for (var /** @type {number} */ j = 0; j < len; j++) {
        if (this.localIndex[j] == prevItem)
          return (j + 1) >> 0;
      }
    }
  }
  return 0;
};


/**
 *  Removes the specified item from this list, should it exist.
 *  Relies on ArrayList implementation
 *
 *  @asparam  item Object reference to the item that should be removed.
 *  @asreturn Boolean indicating if the item was removed.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Apache Flex 4.10
 * @export
 * @param {Object} item
 * @return {boolean}
 */
mx.collections.ListCollectionView.prototype.removeItem = function(item) {
  if ("removeItem" in this.list)
    return !!(this.list["removeItem"](item));
  return false;
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {Object}
 */
mx.collections.ListCollectionView.prototype.removeItemAt = function(index) {
  var /** @type {number} */ listIndex = index;
  if (this.localIndex) {
    var /** @type {Object} */ oldItem = this.localIndex[index];
    listIndex = this.list.getItemIndex(oldItem);
  }
  return this.list.removeItemAt(listIndex);
};


/**
 * Remove all items from the list.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.collections.ListCollectionView.prototype.removeAll = function() {
  var /** @type {number} */ len = this.length;
  if (len > 0) {
    if (this.localIndex && this.filterFunction != null) {
      len = (this.localIndex.length) >> 0;
      for (var /** @type {number} */ i = (len - 1) >> 0; i >= 0; i--) {
        this.removeItemAt(i);
      }
    } else {
      this.localIndex = null;
      this.list.removeAll();
    }
  }
};


/**
 * @inheritDoc 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Array}
 */
mx.collections.ListCollectionView.prototype.toArray = function() {
  var /** @type {Array} */ ret;
  if (this.localIndex)
    ret = this.localIndex.concat();
  else
    ret = this.list.toArray();
  return ret;
};


/**
 *  Prints the contents of this view to a string and returns it.
 * 
 *  @asreturn The contents of this view, in string form.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {string}
 */
mx.collections.ListCollectionView.prototype.toString = function() {
  if (this.localIndex) {
    return this.localIndex.toString();
  } else {
    if (this.list && org.apache.royale.utils.Language.resolveUncertain(Object(this.list)).toString)
      return org.apache.royale.utils.Language.resolveUncertain(Object(this.list)).toString();
    else
      return org.apache.royale.reflection.getQualifiedClassName(this);
  }
};


/**
 * @export
 * @override
 */
mx.collections.ListCollectionView.prototype.getProperty = function(name) {
  return this.mx_collections_ListCollectionView_proxy_getProperty(name);
};


/**
 * @private
 * @param {string} name
 * @return {*}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_proxy_getProperty = function(name) {
  try {
    var /** @type {number} */ n = parseInt(String(name), undefined);
  } catch (e) {
  }
  return this.getItemAt(org.apache.royale.utils.Language._int(n));
};


/**
 * @export
 * @override
 */
mx.collections.ListCollectionView.prototype.setProperty = function(name, value) {
  this.mx_collections_ListCollectionView_proxy_setProperty(org.apache.royale.utils.Language.as(name, String), value);
};


/**
 * @private
 * @param {string} name
 * @param {*} value
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_proxy_setProperty = function(name, value) {
  try {
    var /** @type {number} */ n = parseInt(String(name), undefined);
  } catch (e) {
  }
  this.setItemAt(value, org.apache.royale.utils.Language._int(n));
};


/**
 * @export
 * @override
 */
mx.collections.ListCollectionView.prototype.hasProperty = function(name) {
  return this.mx_collections_ListCollectionView_proxy_hasProperty(org.apache.royale.utils.Language.as(name, String));
};


/**
 * @private
 * @param {string} name
 * @return {boolean}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_proxy_hasProperty = function(name) {
  var /** @type {number} */ index = -1;
  try {
    var /** @type {number} */ n = parseInt(String(name), undefined);
    if (!isNaN(n))
      index = org.apache.royale.utils.Language._int(n);
  } catch (e) {
  }
  if (index == -1)
    return false;
  return index >= 0 && index < this.length;
};


/**
 * @export
 * @override
 */
mx.collections.ListCollectionView.prototype.propertyNames = function() {
  var /** @type {Array} */ nextNameArray = [];
  for (var /** @type {number} */ i = 0; i < this.length; i++) {
    nextNameArray.push(i.toString());
  }
  return nextNameArray;
};


/**
 *  Take the item and insert it into the view.  If we don't have a sort
 *  use the sourceLocation.  Dispatch the CollectionEvent with kind ADD
 *  if dispatch is true.
 *
 *  @asparam items the items to add into the view
 *  @asparam sourceLocation the location within the list where the items were added
 *  @asparam dispatch true if the view should dispatch a corresponding
 *                 CollectionEvent with kind ADD (default is true)
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {Array} items
 * @param {number} sourceLocation
 * @param {boolean=} dispatch
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_addItemsToView = function(items, sourceLocation, dispatch) {
  dispatch = typeof dispatch !== 'undefined' ? dispatch : true;
  var /** @type {Array} */ addedItems = this.localIndex ? [] : items;
  var /** @type {number} */ addLocation = sourceLocation;
  var /** @type {boolean} */ firstOne = true;
  if (this.localIndex) {
    var /** @type {number} */ loc = sourceLocation;
    var /** @type {number} */ length = (items.length) >> 0;
    for (var /** @type {number} */ i = 0; i < length; i++) {
      var /** @type {Object} */ item = items[i];
      if (this.filterFunction != null) {
        if (this.filterFunction(item)) {
          if (this.sort)
            loc = this.http_$$www_adobe_com$2006$flex$mx$internal__findItem(item, mx.collections.Sort.ANY_INDEX_MODE, true);
          else
            loc = this.mx_collections_ListCollectionView_getFilteredItemIndex(item);
          if (firstOne) {
            addLocation = loc;
            firstOne = false;
          }
        } else {
          loc = -1;
          addLocation = -1;
        }
      } else if (this.sort) {
        loc = this.http_$$www_adobe_com$2006$flex$mx$internal__findItem(item, mx.collections.Sort.ANY_INDEX_MODE, true);
        if (firstOne) {
          addLocation = loc;
          firstOne = false;
        }
      } else {
        loc = (this.localIndex.length) >> 0;
        addLocation = loc;
      }
      if (loc != -1) {
        this.localIndex.splice(loc++, 0, item);
        addedItems.push(item);
      }
    }
  }
  if (this.localIndex && addedItems.length > 1) {
    addLocation = -1;
  }
  if (dispatch && addedItems.length > 0) {
    var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.ADD;
    event.location = addLocation;
    event.items = addedItems;
    this.dispatchEvent(event);
  }
  return addLocation;
};


/**
 *  Find the item specified using the Sort find mode constants.
 *  If there is no sort assigned throw an error.
 *
 *  @asparam values the values object that can be passed into Sort.findItem
 *  @asparam mode the mode to pass to Sort.findItem (see Sort)
 *  @asparam insertIndex true if it should find the insertion point
 *  @asreturn the index where the item is located, -1 if not found or SortError
 *  caught
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} values
 * @param {string} mode
 * @param {boolean=} insertIndex
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__findItem = function(values, mode, insertIndex) {
  insertIndex = typeof insertIndex !== 'undefined' ? insertIndex : false;
  if (this.localIndex.length == 0)
    return (insertIndex ? 0 : -1) >> 0;
  try {
    return this.sort.findItem(this.localIndex, values, mode, insertIndex);
  } catch (e) {
  }
  return -1;
};


/**
 *  Create a bookmark for this view.  This method is called by
 *  ListCollectionViewCursor.
 *
 *  @asparam index the index to bookmark
 *  @asreturn a new bookmark instance
 *  @throws a CollectionViewError if the index is out of bounds
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {mx.collections.ListCollectionView.ListCollectionViewBookmark}
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getBookmark = function(index) {
  var /** @type {Object} */ value;
  try {
    value = this.getItemAt(index);
  } catch (e) {
  }
  return new mx.collections.ListCollectionView.ListCollectionViewBookmark(value, this, this.mx_collections_ListCollectionView_revision, index);
};


/**
 *  Given a bookmark find the location for the value.  If the
 *  view has been modified since the bookmark was created attempt
 *  to relocate the item.  If the bookmark represents an item
 *  that is no longer in the view (removed or filtered out) return
 *  -1.
 *
 *  @asparam bookmark the bookmark to locate
 *  @asreturn the new location of the bookmark, -1 if not in the view anymore
 *  @throws CollectionViewError if the bookmark is invalid
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.CursorBookmark} bookmark
 * @return {number}
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getBookmarkIndex = function(bookmark) {
  var /** @type {mx.collections.ListCollectionView.ListCollectionViewBookmark} */ bm = org.apache.royale.utils.Language.as(bookmark, mx.collections.ListCollectionView.ListCollectionViewBookmark, true);
  if (bm.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision != this.mx_collections_ListCollectionView_revision) {
    if (bm.http_$$www_adobe_com$2006$flex$mx$internal__index < 0 || bm.http_$$www_adobe_com$2006$flex$mx$internal__index >= this.length || this.getItemAt(bm.http_$$www_adobe_com$2006$flex$mx$internal__index) != bm.value) {
      try {
        bm.http_$$www_adobe_com$2006$flex$mx$internal__index = this.getItemIndex(bm.value);
      } catch (e) {
        bm.http_$$www_adobe_com$2006$flex$mx$internal__index = this.http_$$www_adobe_com$2006$flex$mx$internal__getLocalItemIndex(bm.value);
      }
    }
    bm.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision = this.mx_collections_ListCollectionView_revision;
  }
  return bm.http_$$www_adobe_com$2006$flex$mx$internal__index;
};


/**
 * The view is a listener of CollectionEvents on its underlying IList
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {mx.events.CollectionEvent} event
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_listChangeHandler = function(event) {
  if (this.mx_collections_ListCollectionView_autoUpdateCounter > 0) {
    if (!this.mx_collections_ListCollectionView_pendingUpdates) {
      this.mx_collections_ListCollectionView_pendingUpdates = [];
    }
    this.mx_collections_ListCollectionView_pendingUpdates.push(event);
  } else {
    switch (event.kind) {
      case mx.events.CollectionEventKind.ADD:
        this.mx_collections_ListCollectionView_addItemsToView(event.items, event.location);
        break;
      case mx.events.CollectionEventKind.MOVE:
        var /** @type {number} */ n = (event.items.length) >> 0;
        for (var /** @type {number} */ i = 0; i < n; i++)
          this.mx_collections_ListCollectionView_moveItemInView(event.items[i]);
        break;
      case mx.events.CollectionEventKind.RESET:
        this.http_$$www_adobe_com$2006$flex$mx$internal__reset();
        break;
      case mx.events.CollectionEventKind.REMOVE:
        this.mx_collections_ListCollectionView_removeItemsFromView(event.items, event.location);
        break;
      case mx.events.CollectionEventKind.REPLACE:
        this.mx_collections_ListCollectionView_replaceItemsInView(event.items, event.location);
        break;
      case mx.events.CollectionEventKind.UPDATE:
        this.mx_collections_ListCollectionView_handlePropertyChangeEvents(event.items);
        break;
      default:
        this.dispatchEvent(event);
    }
  }
};


/**
 * Given a set of <code>PropertyChangeEvent</code>s go through and update the view.
 * This is currently not optimized.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {Array} events
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_handlePropertyChangeEvents = function(events) {
  var /** @type {number} */ i = 0;
  var /** @type {Array} */ eventItems = events;
  if (this.sort || this.filterFunction != null) {
    var /** @type {Array} */ updatedItems = [];
    var /** @type {Object} */ updateEntry;
    //var /** @type {number} */ i = 0;
    for (i = 0; i < events.length; i++) {
      var /** @type {mx.events.PropertyChangeEvent} */ updateInfo = events[i];
      var /** @type {Object} */ item;
      var /** @type {boolean} */ defaultMove;
      if (updateInfo.target) {
        item = updateInfo.target;
        defaultMove = updateInfo.target != updateInfo.source;
      } else {
        item = updateInfo.source;
        defaultMove = false;
      }
      var /** @type {number} */ j = 0;
      for (; j < updatedItems.length; j++) {
        if (updatedItems[j].item == item) {
          var /** @type {Array} */ evts = org.apache.royale.utils.Language.as(updatedItems[j].events, Array);
          var /** @type {number} */ l = (evts.length) >> 0;
          for (var /** @type {number} */ k = 0; k < l; k++) {
            if (evts[k].property != updateInfo.property) {
              evts.push(updateInfo);
              break;
            }
          }
          break;
        }
      }
      if (j < updatedItems.length) {
        updateEntry = updatedItems[j];
      } else {
        var /** @type {boolean} */ oldOrNewValueSpecified = updateInfo.oldValue != null || updateInfo.newValue != null;
        var /** @type {boolean} */ objectReplacedInCollection = updateInfo.property == null && oldOrNewValueSpecified;
        var /** @type {boolean} */ somethingUnknownAboutTheObjectChanged = updateInfo.property == null && !oldOrNewValueSpecified;
        updateEntry = {item:item, move:defaultMove, events:[updateInfo], undefinedChange:somethingUnknownAboutTheObjectChanged, objectReplacedWithAnother:objectReplacedInCollection, oldItem:updateInfo.oldValue};
        updatedItems.push(updateEntry);
      }
      updateEntry.move = updateEntry.move || this.filterFunction != null || updateEntry.objectReplacedWithAnother || updateEntry.undefinedChange || (this.sort && this.sort.propertyAffectsSort(String(updateInfo.property)));
    }
    eventItems = [];
    for (i = 0; i < updatedItems.length; i++) {
      updateEntry = updatedItems[i];
      if (updateEntry.move) {
        if (updateEntry.objectReplacedWithAnother) {
          this.mx_collections_ListCollectionView_removeItemsFromView([updateEntry.oldItem], -1, true);
        }
        this.mx_collections_ListCollectionView_moveItemInView(updateEntry.item, updateEntry.item != null, eventItems);
      } else {
        eventItems.push(updateEntry.item);
      }
    }
    var /** @type {Array} */ temp = [];
    for (var /** @type {number} */ ctr = 0; ctr < eventItems.length; ctr++)
      for (var /** @type {number} */ ctr1 = 0; ctr1 < updatedItems.length; ctr1++)
        if (eventItems[ctr] == updatedItems[ctr1].item) {
          temp = temp.concat(updatedItems[ctr1].events);
        }
    eventItems = temp;
  }
  if (eventItems.length > 0) {
    var /** @type {mx.events.CollectionEvent} */ updateEvent = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    updateEvent.kind = mx.events.CollectionEventKind.UPDATE;
    updateEvent.items = eventItems;
    this.dispatchEvent(updateEvent);
  }
};


/**
 * When enableAutoUpdates pushes autoUpdateCounter back down to 0
 * this method will execute to consolidate the pending update
 * events or turn it into a massive refresh().
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_handlePendingUpdates = function() {
  if (this.mx_collections_ListCollectionView_pendingUpdates) {
    var /** @type {Array} */ pu = this.mx_collections_ListCollectionView_pendingUpdates;
    this.mx_collections_ListCollectionView_pendingUpdates = null;
    var /** @type {mx.events.CollectionEvent} */ singleUpdateEvent;
    for (var /** @type {number} */ i = 0; i < pu.length; i++) {
      var /** @type {mx.events.CollectionEvent} */ event = pu[i];
      if (event.kind == mx.events.CollectionEventKind.UPDATE) {
        if (!singleUpdateEvent) {
          singleUpdateEvent = event;
        } else {
          for (var /** @type {number} */ j = 0; j < event.items.length; j++) {
            singleUpdateEvent.items.push(event.items[j]);
          }
        }
      } else {
        this.mx_collections_ListCollectionView_listChangeHandler(event);
      }
    }
    if (singleUpdateEvent) {
      this.mx_collections_ListCollectionView_listChangeHandler(singleUpdateEvent);
    }
  }
};


/**
 * @private
 * @param {boolean} dispatch
 * @return {boolean}
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_internalRefresh = function(dispatch) {
  if (this.sort || this.filterFunction != null) {
    this.mx_collections_ListCollectionView_populateLocalIndex();
    if (this.filterFunction != null) {
      var /** @type {Array} */ tmp = [];
      var /** @type {number} */ len = (this.localIndex.length) >> 0;
      for (var /** @type {number} */ i = 0; i < len; i++) {
        var /** @type {Object} */ item = this.localIndex[i];
        if (this.filterFunction(item)) {
          tmp.push(item);
        }
      }
      this.localIndex = tmp;
    }
    if (this.sort) {
      this.sort.sort(this.localIndex);
      dispatch = true;
    }
  } else if (this.localIndex) {
    this.localIndex = null;
  }
  this.mx_collections_ListCollectionView_revision++;
  this.mx_collections_ListCollectionView_pendingUpdates = null;
  if (dispatch) {
    var /** @type {mx.events.CollectionEvent} */ refreshEvent = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    refreshEvent.kind = mx.events.CollectionEventKind.REFRESH;
    this.dispatchEvent(refreshEvent);
  }
  return true;
};


/**
 * Remove the old value from the view and replace it with the value
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {Object} item
 * @param {boolean=} dispatch
 * @param {Array=} updateEventItems
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_moveItemInView = function(item, dispatch, updateEventItems) {
  dispatch = typeof dispatch !== 'undefined' ? dispatch : true;
  updateEventItems = typeof updateEventItems !== 'undefined' ? updateEventItems : null;
  if (this.localIndex) {
    var /** @type {number} */ removeLocation = -1;
    for (var /** @type {number} */ i = 0; i < this.localIndex.length; i++) {
      if (this.localIndex[i] == item) {
        removeLocation = i;
        break;
      }
    }
    if (removeLocation > -1) {
      this.localIndex.splice(removeLocation, 1);
    }
    var /** @type {number} */ addLocation = this.mx_collections_ListCollectionView_addItemsToView([item], removeLocation, false);
    if (dispatch) {
      var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
      event.items.push(item);
      if (updateEventItems && addLocation == removeLocation && addLocation > -1) {
        updateEventItems.push(item);
        return;
      }
      if (addLocation > -1 && removeLocation > -1) {
        event.kind = mx.events.CollectionEventKind.MOVE;
        event.location = addLocation;
        event.oldLocation = removeLocation;
      } else if (addLocation > -1) {
        event.kind = mx.events.CollectionEventKind.ADD;
        event.location = addLocation;
      } else if (removeLocation > -1) {
        event.kind = mx.events.CollectionEventKind.REMOVE;
        event.location = removeLocation;
      } else {
        dispatch = false;
      }
      if (dispatch) {
        this.dispatchEvent(event);
      }
    }
  }
};


/**
 * Copy all of the data from the source list into the local index.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_populateLocalIndex = function() {
  if (this.list) {
    this.localIndex = this.list.toArray();
  } else {
    this.localIndex = [];
  }
};


/**
 *  Take the item and remove it from the view.  If we don't have a sort
 *  use the sourceLocation.  Dispatch the CollectionEvent with kind REMOVE
 *  if dispatch is true.
 *
 *  @asparam items the items to remove from the view
 *  @asparam sourceLocation the location within the list where the item was removed
 *  @asparam dispatch true if the view should dispatch a corresponding
 *                 CollectionEvent with kind REMOVE (default is true)
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {Array} items
 * @param {number} sourceLocation
 * @param {boolean=} dispatch
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_removeItemsFromView = function(items, sourceLocation, dispatch) {
  dispatch = typeof dispatch !== 'undefined' ? dispatch : true;
  var /** @type {Array} */ removedItems = this.localIndex ? [] : items;
  var /** @type {number} */ removeLocation = sourceLocation;
  if (this.localIndex) {
    for (var /** @type {number} */ i = 0; i < items.length; i++) {
      var /** @type {Object} */ item = items[i];
      var /** @type {number} */ loc = this.getItemIndex(item);
      if (loc > -1) {
        this.localIndex.splice(loc, 1);
        removedItems.push(item);
        removeLocation = loc;
      }
    }
  }
  if (dispatch && removedItems.length > 0) {
    var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.REMOVE;
    event.location = ((!this.localIndex || removedItems.length == 1) ? removeLocation : -1) >> 0;
    event.items = removedItems;
    this.dispatchEvent(event);
  }
};


/**
 * Items is an array of PropertyChangeEvents so replace the oldValues with the new
 * newValues.  Start at the location specified and move forward, it's unlikely
 * that the length of items is > 1.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {Array} changeEvents
 * @param {number} location
 * @param {boolean=} dispatch
 */
mx.collections.ListCollectionView.prototype.mx_collections_ListCollectionView_replaceItemsInView = function(changeEvents, location, dispatch) {
  dispatch = typeof dispatch !== 'undefined' ? dispatch : true;
  if (this.localIndex) {
    var /** @type {number} */ len = (changeEvents.length) >> 0;
    var /** @type {Array} */ oldItems = [];
    var /** @type {Array} */ newItems = [];
    for (var /** @type {number} */ i = 0; i < len; i++) {
      var /** @type {mx.events.PropertyChangeEvent} */ propertyEvent = changeEvents[i];
      oldItems.push(propertyEvent.oldValue);
      newItems.push(propertyEvent.newValue);
    }
    this.mx_collections_ListCollectionView_removeItemsFromView(oldItems, location, dispatch);
    this.mx_collections_ListCollectionView_addItemsToView(newItems, location, dispatch);
  } else {
    var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.REPLACE;
    event.location = location;
    event.items = changeEvents;
    this.dispatchEvent(event);
  }
};


/**
 *  @asprivate
 *  When the source list is replaced, reset.
 * @export
 */
mx.collections.ListCollectionView.prototype.http_$$www_adobe_com$2006$flex$mx$internal__reset = function() {
  this.mx_collections_ListCollectionView_internalRefresh(false);
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchResetEvent) {
    var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.RESET;
    this.dispatchEvent(event);
  }
};


mx.collections.ListCollectionView.prototype.get__length = function() {
  if (this.localIndex) {
    return (this.localIndex.length) >> 0;
  } else if (this.list) {
    return this.list.length;
  } else {
    return 0;
  }
};


mx.collections.ListCollectionView.prototype.get__list = function() {
  return this.mx_collections_ListCollectionView__list;
};


mx.collections.ListCollectionView.prototype.set__list = function(value) {
  if (this.mx_collections_ListCollectionView__list != value) {
    var /** @type {boolean} */ oldHasItems;
    var /** @type {boolean} */ newHasItems;
    if (this.mx_collections_ListCollectionView__list) {
      this.mx_collections_ListCollectionView__list.removeEventListener(mx.events.CollectionEvent.COLLECTION_CHANGE, org.apache.royale.utils.Language.closure(this.mx_collections_ListCollectionView_listChangeHandler, this, 'listChangeHandler'));
      oldHasItems = this.mx_collections_ListCollectionView__list.length > 0;
    }
    this.mx_collections_ListCollectionView__list = value;
    if (this.mx_collections_ListCollectionView__list) {
      this.mx_collections_ListCollectionView__list.addEventListener(mx.events.CollectionEvent.COLLECTION_CHANGE, org.apache.royale.utils.Language.closure(this.mx_collections_ListCollectionView_listChangeHandler, this, 'listChangeHandler'), false);
      newHasItems = this.mx_collections_ListCollectionView__list.length > 0;
    }
    if (oldHasItems || newHasItems)
      this.http_$$www_adobe_com$2006$flex$mx$internal__reset();
    this.dispatchEvent(new org.apache.royale.events.Event("listChanged"));
  }
};


mx.collections.ListCollectionView.prototype.get__filterFunction = function() {
  return this.mx_collections_ListCollectionView__filterFunction;
};


mx.collections.ListCollectionView.prototype.set__filterFunction = function(f) {
  this.mx_collections_ListCollectionView__filterFunction = f;
  this.dispatchEvent(new org.apache.royale.events.Event("filterFunctionChanged"));
};


mx.collections.ListCollectionView.prototype.get__sort = function() {
  return this.mx_collections_ListCollectionView__sort;
};


mx.collections.ListCollectionView.prototype.set__sort = function(value) {
  if (this.mx_collections_ListCollectionView__sort != value) {
    this.mx_collections_ListCollectionView__sort = value;
    this.dispatchEvent(new org.apache.royale.events.Event("sortChanged"));
  }
};


Object.defineProperties(mx.collections.ListCollectionView.prototype, /** @lends {mx.collections.ListCollectionView.prototype} */ {
/**
  * @export
  * @type {number} */
length: {
get: mx.collections.ListCollectionView.prototype.get__length},
/**
  * @export
  * @type {mx.collections.IList} */
list: {
get: mx.collections.ListCollectionView.prototype.get__list,
set: mx.collections.ListCollectionView.prototype.set__list},
/**
  * @export
  * @type {Function} */
filterFunction: {
get: mx.collections.ListCollectionView.prototype.get__filterFunction,
set: mx.collections.ListCollectionView.prototype.set__filterFunction},
/**
  * @export
  * @type {mx.collections.ISort} */
sort: {
get: mx.collections.ListCollectionView.prototype.get__sort,
set: mx.collections.ListCollectionView.prototype.set__sort}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.ListCollectionView.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListCollectionView', qName: 'mx.collections.ListCollectionView', kind: 'class' }], interfaces: [mx.collections.ICollectionView, mx.collections.IList] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.ListCollectionView.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::dispatchResetEvent': { type: 'Boolean', get_set: function (/** mx.collections.ListCollectionView */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__dispatchResetEvent = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__dispatchResetEvent;}}
      };
    },
    accessors: function () {
      return {
        'length': { type: 'int', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'collectionChange' } ] } ]; }},
        'list': { type: 'mx.collections.IList', access: 'readwrite', declaredBy: 'mx.collections.ListCollectionView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'listChanged' } ] } ]; }},
        'filterFunction': { type: 'Function', access: 'readwrite', declaredBy: 'mx.collections.ListCollectionView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'filterFunctionChanged' } ] } ]; }},
        'sort': { type: 'mx.collections.ISort', access: 'readwrite', declaredBy: 'mx.collections.ListCollectionView', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'sortChanged' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'ListCollectionView': { type: '', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'mx.collections.IList', true ]; }},
        'initialized': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ,'String', false ]; }},
        'contains': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ]; }},
        'disableAutoUpdate': { type: 'void', declaredBy: 'mx.collections.ListCollectionView'},
        'enableAutoUpdate': { type: 'void', declaredBy: 'mx.collections.ListCollectionView'},
        'createCursor': { type: 'mx.collections.IViewCursor', declaredBy: 'mx.collections.ListCollectionView'},
        'itemUpdated': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ,'Object', true ,'Object', true ,'Object', true ]; }},
        'refresh': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView'},
        'getItemAt': { type: 'Object', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'int', false ,'int', true ]; }, metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'collectionChange' } ] } ]; }},
        'setItemAt': { type: 'Object', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'addItem': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ]; }},
        'addItemAt': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'addAll': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'mx.collections.IList', false ]; }},
        'addAllAt': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'mx.collections.IList', false ,'int', false ]; }},
        'getItemIndex': { type: 'int', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::getLocalItemIndex': { type: 'int', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ]; }},
        'removeItem': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ]; }},
        'removeItemAt': { type: 'Object', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'int', false ]; }},
        'removeAll': { type: 'void', declaredBy: 'mx.collections.ListCollectionView'},
        'toArray': { type: 'Array', declaredBy: 'mx.collections.ListCollectionView'},
        'toString': { type: 'String', declaredBy: 'mx.collections.ListCollectionView'},
        'getProperty': { type: '*', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'String', false ]; }},
        'setProperty': { type: 'void', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'String', false ,'*', false ]; }},
        'hasProperty': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'String', false ]; }},
        'propertyNames': { type: 'Array', declaredBy: 'mx.collections.ListCollectionView'},
        'http://www.adobe.com/2006/flex/mx/internal::findItem': { type: 'int', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'Object', false ,'String', false ,'Boolean', true ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::getBookmark': { type: 'mx.collections.ListCollectionView.ListCollectionViewBookmark', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'int', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::getBookmarkIndex': { type: 'int', declaredBy: 'mx.collections.ListCollectionView', parameters: function () { return [ 'mx.collections.CursorBookmark', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::reset': { type: 'void', declaredBy: 'mx.collections.ListCollectionView'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.ListCollectionView.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 *  Constructor.
 *
 *  <p>Creates the cursor for the view.</p>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {mx.collections.IViewCursor}
 * @param {mx.collections.ListCollectionView} view
 */
mx.collections.ListCollectionView.ListCollectionViewCursor = function(view) {
  mx.collections.ListCollectionView.ListCollectionViewCursor.base(this, 'constructor');
  this.ListCollectionViewCursor__view = view;
  this.ListCollectionViewCursor__view.addEventListener(mx.events.CollectionEvent.COLLECTION_CHANGE, org.apache.royale.utils.Language.closure(this.ListCollectionViewCursor_collectionEventHandler, this, 'collectionEventHandler'));
  this.ListCollectionViewCursor_currentIndex = (view.length > 0 ? 0 : mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX) >> 0;
  if (this.ListCollectionViewCursor_currentIndex == 0) {
    this.ListCollectionViewCursor_setCurrent(view.getItemAt(0), false);
  }
};
goog.inherits(mx.collections.ListCollectionView.ListCollectionViewCursor, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.ListCollectionView.ListCollectionViewCursor', mx.collections.ListCollectionView.ListCollectionViewCursor);


/**
 * @private
 * @const
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.BEFORE_FIRST_INDEX = -1;


/**
 * @private
 * @const
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX = -2;


/**
 * @private
 * @type {mx.collections.ListCollectionView}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor__view;


/**
 * @private
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_currentIndex = 0;


/**
 * @private
 * @type {Object}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_currentValue;


/**
 * @private
 * @type {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_invalid;


/**
 *  Finds the item with the specified properties within the
 *  collection and positions the cursor on that item.
 *  If the item can not be found no change to the current location will be
 *  made.
 *  <code>findAny()</code> can only be called on sorted views, if the view
 *  isn't sorted, or items in the view do not contain properties used
 *  to compute the sort order, a <code>CursorError</code> will be thrown.
 *  <p>
 *  If the associated collection is remote, and not all of the items have
 *  been cached locally this method will begin an asynchronous fetch from the
 *  remote collection, or if one is already in progress wait for it to
 *  complete before making another fetch request.
 *  If multiple items can match the search criteria then the item found is
 *  non-deterministic.
 *  If it is important to find the first or last occurrence of an item in a
 *  non-unique index use the <code>findFirst()</code> or
 *  <code>findLast()</code>.
 *  The values specified must be configured as name-value pairs, as in an
 *  associative array (or the actual object to search for).
 *  The values of the names specified must match those properties specified in
 *  the sort. for example
 *  If properties "x", "y", and "z" are the in the current index, the values
 *  specified should be {x:x-value, y:y-value,z:z-value}.
 *  When all of the data is local this method will return <code>true</code> if
 *  the item can be found and false otherwise.
 *  If the data is not local and an asynchronous operation must be performed,
 *  an <code>ItemPendingError</code> will be thrown.
 *
 *  @see mx.collections.IViewCursor#findFirst
 *  @see mx.collections.IViewCursor#findLast
 *  @see mx.collections.errors.ItemPendingError
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} values
 * @return {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.findAny = function(values) {
  var /** @type {number} */ index = 0;
  this.ListCollectionViewCursor_checkValid();
  var /** @type {mx.collections.ListCollectionView} */ lcView = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true);
  //var /** @type {number} */ index = 0;
  try {
    index = lcView.http_$$www_adobe_com$2006$flex$mx$internal__findItem(values, mx.collections.Sort.ANY_INDEX_MODE);
  } catch (e) {
    throw new mx.collections.errors.CursorError(e.message);
  }
  if (index > -1) {
    this.ListCollectionViewCursor_currentIndex = index;
    this.ListCollectionViewCursor_setCurrent(lcView.getItemAt(this.ListCollectionViewCursor_currentIndex));
  }
  return index > -1;
};


/**
 *  Finds the first item with the specified properties
 *  within the collection and positions the cursor on that item.
 *  If the item can not be found no change to the current location will be
 *  made.
 *  <code>findFirst()</code> can only be called on sorted views, if the view
 *  isn't sorted, or items in the view do not contain properties used
 *  to compute the sort order, a <code>CursorError</code> will be thrown.
 *  <p>
 *  If the associated collection is remote, and not all of the items have been
 *  cached locally this method will begin an asynchronous fetch from the
 *  remote collection, or if one is already in progress wait for it to
 *  complete before making another fetch request.
 *  If it is not important to find the first occurrence of an item in a
 *  non-unique index use <code>findAny()</code> as it may be a little faster.
 *  The values specified must be configured as name-value pairs, as in an
 *  associative array (or the actual object to search for).
 *  The values of the names specified must match those properties specified in
 *  the sort. for example If properties "x", "y", and "z" are the in the current
 *  index, the values specified should be {x:x-value, y:y-value,z:z-value}.
 *  When all of the data is local this method will
 *  return <code>true</code> if the item can be found and false otherwise.
 *  If the data is not local and an asynchronous operation must be performed,
 *  an <code>ItemPendingError</code> will be thrown.
 *
 *  @see mx.collections.IViewCursor#findAny
 *  @see mx.collections.IViewCursor#findLast
 *  @see mx.collections.errors.ItemPendingError
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} values
 * @return {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.findFirst = function(values) {
  var /** @type {number} */ index = 0;
  this.ListCollectionViewCursor_checkValid();
  var /** @type {mx.collections.ListCollectionView} */ lcView = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true);
  //var /** @type {number} */ index = 0;
  try {
    index = lcView.http_$$www_adobe_com$2006$flex$mx$internal__findItem(values, mx.collections.Sort.FIRST_INDEX_MODE);
  } catch (sortError) {
    throw new mx.collections.errors.CursorError(sortError.message);
  }
  if (index > -1) {
    this.ListCollectionViewCursor_currentIndex = index;
    this.ListCollectionViewCursor_setCurrent(lcView.getItemAt(this.ListCollectionViewCursor_currentIndex));
  }
  return index > -1;
};


/**
 *  Finds the last item with the specified properties
 *  within the collection and positions the cursor on that item.
 *  If the item can not be found no change to the current location will be
 *  made.
 *  <code>findLast()</code> can only be called on sorted views, if the view
 *  isn't sorted, or items in the view do not contain properties used
 *  to compute the sort order, a <code>CursorError</code> will be thrown.
 *  <p>
 *  If the associated collection is remote, and not all of the items have been
 *  cached locally this method will begin an asynchronous fetch from the
 *  remote collection, or if one is already in progress wait for it to
 *  complete before making another fetch request.
 *  If it is not important to find the last occurrence of an item in a
 *  non-unique index use <code>findAny()</code> as it may be a little faster.
 *  The values specified must be configured as  name-value pairs, as in an
 *  associative array (or the actual object to search for).
 *  The values of the names specified must match those properties specified in
 *  the sort. for example If properties "x", "y", and "z" are the in the current
 *  index, the values specified should be {x:x-value, y:y-value,z:z-value}.
 *  When all of the data is local this method will
 *  return <code>true</code> if the item can be found and false otherwise.
 *  If the data is not local and an asynchronous operation must be performed,
 *  an <code>ItemPendingError</code> will be thrown.
 *
 *  @see mx.collections.IViewCursor#findAny
 *  @see mx.collections.IViewCursor#findFirst
 *  @see mx.collections.errors.ItemPendingError
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} values
 * @return {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.findLast = function(values) {
  var /** @type {number} */ index = 0;
  this.ListCollectionViewCursor_checkValid();
  var /** @type {mx.collections.ListCollectionView} */ lcView = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true);
  //var /** @type {number} */ index = 0;
  try {
    index = lcView.http_$$www_adobe_com$2006$flex$mx$internal__findItem(values, mx.collections.Sort.LAST_INDEX_MODE);
  } catch (sortError) {
    throw new mx.collections.errors.CursorError(sortError.message);
  }
  if (index > -1) {
    this.ListCollectionViewCursor_currentIndex = index;
    this.ListCollectionViewCursor_setCurrent(lcView.getItemAt(this.ListCollectionViewCursor_currentIndex));
  }
  return index > -1;
};


/**
 * Insert the specified item before the cursor's current position.
 * If the cursor is <code>afterLast</code> the insertion
 * will happen at the end of the View.  If the cursor is
 * <code>beforeFirst</code> on a non-empty view an error will be thrown.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.insert = function(item) {
  var /** @type {number} */ insertIndex = 0;
  //var /** @type {number} */ insertIndex = 0;
  if (this.afterLast) {
    insertIndex = this.view.length;
  } else if (this.beforeFirst) {
    if (this.view.length > 0) {
      var /** @type {string} */ message = "invalidInsert";
      throw new mx.collections.errors.CursorError(message);
    } else {
      insertIndex = 0;
    }
  } else {
    insertIndex = this.ListCollectionViewCursor_currentIndex;
  }
  org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).addItemAt(item, insertIndex);
};


/**
 *  Moves the cursor to the next item within the collection. On success
 *  the <code>current</code> property will be updated to reference the object at this
 *  new location.  Returns true if current is valid, false if not (afterLast).
 *  If the data is not local and an asynchronous operation must be performed, an
 *  <code>ItemPendingError</code> will be thrown. See the ItemPendingError docs
 *  as well as the collections documentation for more information on using the
 *  ItemPendingError.
 *
 *  @asreturn true if still in the list, false if current is now afterLast
 *
 *  @see mx.collections.IViewCursor#current
 *  @see mx.collections.IViewCursor#movePrevious
 *  @see mx.collections.errors.ItemPendingError
 *  @example
 *  <pre>
 *    var myArrayCollection:ICollectionView = new ArrayCollection(["Bobby", "Mark", "Trevor", "Jacey", "Tyler"]);
 *    var cursor:IViewCursor = myArrayCollection.createCursor();
 *    while (!cursor.afterLast)
 *    {
 *       trace(cursor.current);
 *       cursor.moveNext();
 *     }
 *  </pre>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.moveNext = function() {
  if (this.afterLast) {
    return false;
  }
  var /** @type {number} */ tempIndex = (this.beforeFirst ? 0 : this.ListCollectionViewCursor_currentIndex + 1) >> 0;
  if (tempIndex >= this.view.length) {
    tempIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX;
    this.ListCollectionViewCursor_setCurrent(null);
  } else {
    this.ListCollectionViewCursor_setCurrent(org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(tempIndex));
  }
  this.ListCollectionViewCursor_currentIndex = tempIndex;
  return !this.afterLast;
};


/**
 *  Moves the cursor to the previous item within the collection. On success
 *  the <code>current</code> property will be updated to reference the object at this
 *  new location.  Returns true if current is valid, false if not (beforeFirst).
 *  If the data is not local and an asynchronous operation must be performed, an
 *  <code>ItemPendingError</code> will be thrown. See the ItemPendingError docs
 * as well as the collections documentation for more information on using the
 * ItemPendingError.
 *
 *  @asreturn true if still in the list, false if current is now beforeFirst
 *
 *  @see mx.collections.IViewCursor#current
 *  @see mx.collections.IViewCursor#moveNext
 *  @see mx.collections.errors.ItemPendingError
 *  @example
 *  <pre>
 *     var myArrayCollection:ICollectionView = new ArrayCollection(["Bobby", "Mark", "Trevor", "Jacey", "Tyler"]);
 *     var cursor:ICursor = myArrayCollection.createCursor();
 *     cursor.seek(CursorBookmark.last);
 *     while (!cursor.beforeFirst)
 *     {
 *        trace(current);
 *        cursor.movePrevious();
 *      }
 *  </pre>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {boolean}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.movePrevious = function() {
  if (this.beforeFirst) {
    return false;
  }
  var /** @type {number} */ tempIndex = (this.afterLast ? this.view.length - 1 : this.ListCollectionViewCursor_currentIndex - 1) >> 0;
  if (tempIndex == -1) {
    tempIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.BEFORE_FIRST_INDEX;
    this.ListCollectionViewCursor_setCurrent(null);
  } else {
    this.ListCollectionViewCursor_setCurrent(org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(tempIndex));
  }
  this.ListCollectionViewCursor_currentIndex = tempIndex;
  return !this.beforeFirst;
};


/**
 * Remove the current item and return it.  If the cursor is
 * <code>beforeFirst</code> or <code>afterLast</code> throw a
 * CursorError.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Object}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.remove = function() {
  var /** @type {number} */ oldIndex = this.ListCollectionViewCursor_currentIndex;
  this.ListCollectionViewCursor_currentIndex++;
  if (this.ListCollectionViewCursor_currentIndex >= this.view.length) {
    this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX;
    this.ListCollectionViewCursor_setCurrent(null);
  } else {
    this.ListCollectionViewCursor_setCurrent(org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(this.ListCollectionViewCursor_currentIndex));
  }
  var /** @type {Object} */ removed = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).removeItemAt(oldIndex);
  return removed;
};


/**
 *  Moves the cursor to a location at an offset from the specified
 *  bookmark.
 *  The offset can be negative in which case the cursor is positioned an
 *  offset number of items prior to the specified bookmark.
 *  If the associated collection is remote, and not all of the items have been
 *  cached locally this method will begin an asynchronous fetch from the
 *  remote collection.
 *
 *  If the data is not local and an asynchronous operation must be performed, an
 *  <code>ItemPendingError</code> will be thrown. See the ItemPendingError docs
 *  as well as the collections documentation for more information on using the
 *  ItemPendingError.
 *
 *
 *  @asparam bookmark <code>CursorBookmark</code> reference to marker information that
 *                 allows repositioning to a specific location.
 *           In addition to supplying a value returned from the <code>bookmark</code>
 *           property, there are three constant bookmark values that can be
 *           specified:
 *            <ul>
 *                <li><code>CursorBookmark.FIRST</code> - seek from
 *                the start (first element) of the collection</li>
 *                <li><code>CursorBookmark.CURRENT</code> - seek from
 *                the current position in the collection</li>
 *                <li><code>CursorBookmark.LAST</code> - seek from the
 *                end (last element) of the collection</li>
 *            </ul>
 *  @asparam offset indicates how far from the specified bookmark to seek.
 *           If the specified number is negative the cursor will attempt to
 *           move prior to the specified bookmark, if the offset specified is
 *           beyond the end points of the collection the cursor will be
 *           positioned off the end (beforeFirst or afterLast).
 *  @asparam prefetch indicates the intent to iterate in a specific direction once the
 *           seek operation completes, this reduces the number of required
 *           network round trips during a seek.
 *           If the iteration direction is known at the time of the request
 *           the appropriate amount of data can be returned ahead of the
 *           request to iterate it.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.CursorBookmark} bookmark
 * @param {number=} offset
 * @param {number=} prefetch
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.seek = function(bookmark, offset, prefetch) {
  offset = typeof offset !== 'undefined' ? offset : 0;
  prefetch = typeof prefetch !== 'undefined' ? prefetch : 0;
  this.ListCollectionViewCursor_checkValid();
  if (this.view.length == 0) {
    this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX;
    this.ListCollectionViewCursor_setCurrent(null, false);
    return;
  }
  var /** @type {number} */ newIndex = this.ListCollectionViewCursor_currentIndex;
  if (bookmark == mx.collections.CursorBookmark["FIRST"]) {
    newIndex = 0;
  } else if (bookmark == mx.collections.CursorBookmark["LAST"]) {
    newIndex = (this.view.length - 1) >> 0;
  } else if (bookmark != mx.collections.CursorBookmark["CURRENT"]) {
    var /** @type {string} */ message;
    newIndex = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).http_$$www_adobe_com$2006$flex$mx$internal__getBookmarkIndex(bookmark);
    if (newIndex < 0) {
      this.ListCollectionViewCursor_setCurrent(null);
    }
  }
  newIndex += offset;
  var /** @type {Object} */ newCurrent = null;
  if (newIndex >= this.view.length) {
    this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX;
  } else if (newIndex < 0) {
    this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.BEFORE_FIRST_INDEX;
  } else {
    newCurrent = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(newIndex, prefetch);
    this.ListCollectionViewCursor_currentIndex = newIndex;
  }
  this.ListCollectionViewCursor_setCurrent(newCurrent);
};


/**
 * @private
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_checkValid = function() {
};


/**
 * @private
 * @param {mx.events.CollectionEvent} event
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_collectionEventHandler = function(event) {
  switch (event.kind) {
    case mx.events.CollectionEventKind.ADD:
      if (event.location <= this.ListCollectionViewCursor_currentIndex) {
        this.ListCollectionViewCursor_currentIndex += (event.items.length) >> 0;
      }
      break;
    case mx.events.CollectionEventKind.REMOVE:
      if (event.location < this.ListCollectionViewCursor_currentIndex) {
        this.ListCollectionViewCursor_currentIndex -= (event.items.length) >> 0;
      } else if (event.location == this.ListCollectionViewCursor_currentIndex) {
        if (this.ListCollectionViewCursor_currentIndex < this.view.length) {
          this.ListCollectionViewCursor_setCurrent(org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(this.ListCollectionViewCursor_currentIndex));
        } else {
          this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX;
          this.ListCollectionViewCursor_setCurrent(null);
        }
      }
      break;
    case mx.events.CollectionEventKind.MOVE:
      if (event.oldLocation == this.ListCollectionViewCursor_currentIndex) {
        this.ListCollectionViewCursor_currentIndex = event.location;
      } else {
        if (event.oldLocation < this.ListCollectionViewCursor_currentIndex) {
          this.ListCollectionViewCursor_currentIndex -= (event.items.length) >> 0;
        }
        if (event.location <= this.ListCollectionViewCursor_currentIndex) {
          this.ListCollectionViewCursor_currentIndex += (event.items.length) >> 0;
        }
      }
      break;
    case mx.events.CollectionEventKind.REFRESH:
      if (!(this.beforeFirst || this.afterLast)) {
        try {
          this.ListCollectionViewCursor_currentIndex = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemIndex(this.ListCollectionViewCursor_currentValue);
        } catch (e) {
          if (org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).sort) {
            this.ListCollectionViewCursor_currentIndex = org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).http_$$www_adobe_com$2006$flex$mx$internal__getLocalItemIndex(this.ListCollectionViewCursor_currentValue);
          }
        }
        if (this.ListCollectionViewCursor_currentIndex == -1) {
          this.ListCollectionViewCursor_setCurrent(null);
        }
      }
      break;
    case mx.events.CollectionEventKind.REPLACE:
      if (event.location == this.ListCollectionViewCursor_currentIndex) {
        this.ListCollectionViewCursor_setCurrent(org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).getItemAt(this.ListCollectionViewCursor_currentIndex));
      }
      break;
    case mx.events.CollectionEventKind.RESET:
      this.ListCollectionViewCursor_currentIndex = mx.collections.ListCollectionView.ListCollectionViewCursor.BEFORE_FIRST_INDEX;
      this.ListCollectionViewCursor_setCurrent(null);
      break;
  }
};


/**
 *  @asprivate
 * @private
 * @param {Object} value
 * @param {boolean=} dispatch
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ListCollectionViewCursor_setCurrent = function(value, dispatch) {
  dispatch = typeof dispatch !== 'undefined' ? dispatch : true;
  this.ListCollectionViewCursor_currentValue = value;
};


mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__view = function() {
  this.ListCollectionViewCursor_checkValid();
  return this.ListCollectionViewCursor__view;
};


mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__current = function() {
  this.ListCollectionViewCursor_checkValid();
  return this.ListCollectionViewCursor_currentValue;
};


mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__bookmark = function() {
  this.ListCollectionViewCursor_checkValid();
  if (this.view.length == 0 || this.beforeFirst)
    return mx.collections.CursorBookmark["FIRST"];
  else if (this.afterLast)
    return mx.collections.CursorBookmark["LAST"];
  else
    return org.apache.royale.utils.Language.as(this.view, mx.collections.ListCollectionView, true).http_$$www_adobe_com$2006$flex$mx$internal__getBookmark(this.ListCollectionViewCursor_currentIndex);
};


mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__beforeFirst = function() {
  this.ListCollectionViewCursor_checkValid();
  return this.ListCollectionViewCursor_currentIndex == mx.collections.ListCollectionView.ListCollectionViewCursor.BEFORE_FIRST_INDEX || this.view.length == 0;
};


mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__afterLast = function() {
  this.ListCollectionViewCursor_checkValid();
  return this.ListCollectionViewCursor_currentIndex == mx.collections.ListCollectionView.ListCollectionViewCursor.AFTER_LAST_INDEX || this.view.length == 0;
};


Object.defineProperties(mx.collections.ListCollectionView.ListCollectionViewCursor.prototype, /** @lends {mx.collections.ListCollectionView.ListCollectionViewCursor.prototype} */ {
/**
  * @export
  * @type {mx.collections.ICollectionView} */
view: {
get: mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__view},
/**
  * @export
  * @type {Object} */
current: {
get: mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__current},
/**
  * @export
  * @type {mx.collections.CursorBookmark} */
bookmark: {
get: mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__bookmark},
/**
  * @export
  * @type {boolean} */
beforeFirst: {
get: mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__beforeFirst},
/**
  * @export
  * @type {boolean} */
afterLast: {
get: mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.get__afterLast}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListCollectionViewCursor', qName: 'mx.collections.ListCollectionView.ListCollectionViewCursor', kind: 'class' }], interfaces: [mx.collections.IViewCursor] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'view': { type: 'mx.collections.ICollectionView', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor'},
        'current': { type: 'Object', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'cursorUpdate' } ] } ]; }},
        'bookmark': { type: 'mx.collections.CursorBookmark', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'cursorUpdate' } ] } ]; }},
        'beforeFirst': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'cursorUpdate' } ] } ]; }},
        'afterLast': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'cursorUpdate' } ] } ]; }}
      };
    },
    methods: function () {
      return {
        'ListCollectionViewCursor': { type: '', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'mx.collections.ListCollectionView', false ]; }},
        'findAny': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'Object', false ]; }},
        'findFirst': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'Object', false ]; }},
        'findLast': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'Object', false ]; }},
        'insert': { type: 'void', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'Object', false ]; }},
        'moveNext': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor'},
        'movePrevious': { type: 'Boolean', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor'},
        'remove': { type: 'Object', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor'},
        'seek': { type: 'void', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewCursor', parameters: function () { return [ 'mx.collections.CursorBookmark', false ,'int', true ,'int', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewCursor.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 *  @asprivate
 * @constructor
 * @extends {mx.collections.CursorBookmark}
 * @param {Object} value
 * @param {mx.collections.ListCollectionView} view
 * @param {number} viewRevision
 * @param {number} index
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark = function(value, view, viewRevision, index) {
  mx.collections.ListCollectionView.ListCollectionViewBookmark.base(this, 'constructor', value);
  this.http_$$www_adobe_com$2006$flex$mx$internal__view = view;
  this.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision = viewRevision;
  this.http_$$www_adobe_com$2006$flex$mx$internal__index = index;
};
goog.inherits(mx.collections.ListCollectionView.ListCollectionViewBookmark, mx.collections.CursorBookmark);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.ListCollectionView.ListCollectionViewBookmark', mx.collections.ListCollectionView.ListCollectionViewBookmark);


/**
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.http_$$www_adobe_com$2006$flex$mx$internal__index = 0;


/**
 * @type {mx.collections.ListCollectionView}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.http_$$www_adobe_com$2006$flex$mx$internal__view;


/**
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision = 0;


/**
 *  Gets the approximate index of the item represented by this bookmark
 *  in its view. If the item has been paged out, this method could throw an
 *  ItemPendingError.
 *
 *  @asreturn The index of the item. If the item is not in the current view,
 *  this method returns -1. This method also returns -1 if index-based location
 *  retrieval is not possible.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.getViewIndex = function() {
  return this.http_$$www_adobe_com$2006$flex$mx$internal__view.http_$$www_adobe_com$2006$flex$mx$internal__getBookmarkIndex(this);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ListCollectionViewBookmark', qName: 'mx.collections.ListCollectionView.ListCollectionViewBookmark', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::index': { type: 'int', get_set: function (/** mx.collections.ListCollectionView.ListCollectionViewBookmark */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__index = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__index;}},
        'http://www.adobe.com/2006/flex/mx/internal::view': { type: 'mx.collections.ListCollectionView', get_set: function (/** mx.collections.ListCollectionView.ListCollectionViewBookmark */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__view = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__view;}},
        'http://www.adobe.com/2006/flex/mx/internal::viewRevision': { type: 'int', get_set: function (/** mx.collections.ListCollectionView.ListCollectionViewBookmark */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__viewRevision;}}
      };
    },
    methods: function () {
      return {
        'ListCollectionViewBookmark': { type: '', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewBookmark', parameters: function () { return [ 'Object', false ,'mx.collections.ListCollectionView', false ,'int', false ,'int', false ]; }},
        'getViewIndex': { type: 'int', declaredBy: 'mx.collections.ListCollectionView.ListCollectionViewBookmark'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.ListCollectionView.ListCollectionViewBookmark.prototype.ROYALE_COMPILE_FLAGS = 26;
