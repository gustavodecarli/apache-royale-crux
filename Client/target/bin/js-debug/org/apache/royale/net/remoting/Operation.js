/**
 * Generated by Apache Royale Compiler from org/apache/royale/net/remoting/Operation.as
 * org.apache.royale.net.remoting.Operation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.net.remoting.Operation');
/* Royale Dependency List: org.apache.royale.net.RemoteObject,org.apache.royale.net.Responder,org.apache.royale.net.remoting.messages.AbstractMessage,org.apache.royale.net.remoting.messages.AcknowledgeMessage,org.apache.royale.net.remoting.messages.AcknowledgeMessageExt,org.apache.royale.net.remoting.messages.CommandMessage,org.apache.royale.net.remoting.messages.IMessage,org.apache.royale.net.remoting.messages.ISmallMessage,org.apache.royale.net.remoting.messages.RemotingMessage,org.apache.royale.net.remoting.messages.RoyaleClient,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 * This Operation is used by RemoteObject to deal with a BlazeDS, LCDS or CF AMF server
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @param {string} name
 * @param {org.apache.royale.net.RemoteObject} remoteObject
 * @param {Array} args
 */
org.apache.royale.net.remoting.Operation = function(name, remoteObject, args) {
  org.apache.royale.net.remoting.Operation.base(this, 'constructor');
  this.org_apache_royale_net_remoting_Operation__name = name;
  this.org_apache_royale_net_remoting_Operation__args = args;
  this.org_apache_royale_net_remoting_Operation__ro = remoteObject;
};
goog.inherits(org.apache.royale.net.remoting.Operation, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.net.remoting.Operation', org.apache.royale.net.remoting.Operation);


/**
 * @private
 * @type {string}
 */
org.apache.royale.net.remoting.Operation.prototype.org_apache_royale_net_remoting_Operation__name;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.net.remoting.Operation.prototype.org_apache_royale_net_remoting_Operation__args;


/**
 * @private
 * @type {org.apache.royale.net.RemoteObject}
 */
org.apache.royale.net.remoting.Operation.prototype.org_apache_royale_net_remoting_Operation__ro;


/**
 * performs the sendind. If we have a clientId, we send the message, if not we make a ping operation command
 * to make the server generate an UUID for us and use it in the rest of communications so the server knows who we are.
 * @export
 */
org.apache.royale.net.remoting.Operation.prototype.send = function() {
  var /** @type {string} */ id = org.apache.royale.net.remoting.messages.RoyaleClient.getInstance().id;
  if (id != null) {
    this.org_apache_royale_net_remoting_Operation_destinationResultHandler(null);
  } else {
    var /** @type {org.apache.royale.net.remoting.messages.IMessage} */ message = new org.apache.royale.net.remoting.messages.CommandMessage();
    org.apache.royale.utils.Language.as(message, org.apache.royale.net.remoting.messages.CommandMessage).operation = (id != null) ? org.apache.royale.net.remoting.messages.CommandMessage.TRIGGER_CONNECT_OPERATION : org.apache.royale.net.remoting.messages.CommandMessage.CLIENT_PING_OPERATION;
    this.setRoyaleClientIdOnMessage(message);
    message.headers[org.apache.royale.net.remoting.messages.CommandMessage.MESSAGING_VERSION] = this.messagingVersion;
    if (this.org_apache_royale_net_remoting_Operation__ro.enableSmallMessages && org.apache.royale.utils.Language.is(message, org.apache.royale.net.remoting.messages.ISmallMessage)) {
      var /** @type {org.apache.royale.net.remoting.messages.IMessage} */ smallMessage = org.apache.royale.utils.Language.as(message, org.apache.royale.net.remoting.messages.ISmallMessage, true).getSmallMessage();
      if (smallMessage != null) {
        message = smallMessage;
      }
    }
    this.org_apache_royale_net_remoting_Operation__ro.nc.call(null, new org.apache.royale.net.Responder(org.apache.royale.utils.Language.closure(this.org_apache_royale_net_remoting_Operation_destinationResultHandler, this, 'destinationResultHandler'), org.apache.royale.utils.Language.closure(this.org_apache_royale_net_remoting_Operation_destinationFaultHandler, this, 'destinationFaultHandler')), message);
  }
};


/**
 * @private
 * @param {Object} param
 */
org.apache.royale.net.remoting.Operation.prototype.org_apache_royale_net_remoting_Operation_destinationResultHandler = function(param) {
  
  if (org.apache.royale.utils.Language.is(param, org.apache.royale.net.remoting.messages.AcknowledgeMessage) || org.apache.royale.utils.Language.is(param, org.apache.royale.net.remoting.messages.AcknowledgeMessageExt)) {
    if (org.apache.royale.net.remoting.messages.RoyaleClient.getInstance().id == null && param.headers[org.apache.royale.net.remoting.messages.AbstractMessage.ROYALE_CLIENT_ID_HEADER] != null) {
      org.apache.royale.net.remoting.messages.RoyaleClient.getInstance().id = org.apache.royale.utils.Language.string(param.headers[org.apache.royale.net.remoting.messages.AbstractMessage.ROYALE_CLIENT_ID_HEADER]);
    }
  }
  var /** @type {org.apache.royale.net.remoting.messages.RemotingMessage} */ message = new org.apache.royale.net.remoting.messages.RemotingMessage();
  message.operation = this.org_apache_royale_net_remoting_Operation__name;
  message.body = this.org_apache_royale_net_remoting_Operation__args;
  message.destination = this.org_apache_royale_net_remoting_Operation__ro.destination;
  this.setRoyaleClientIdOnMessage(message);
  this.org_apache_royale_net_remoting_Operation__ro.nc.call(null, new org.apache.royale.net.Responder(org.apache.royale.utils.Language.closure(this.org_apache_royale_net_remoting_Operation__ro.resultHandler, this.org_apache_royale_net_remoting_Operation__ro, 'resultHandler'), org.apache.royale.utils.Language.closure(this.org_apache_royale_net_remoting_Operation__ro.faultHandler, this.org_apache_royale_net_remoting_Operation__ro, 'faultHandler')), message);
};


/**
 * @private
 * @param {Object} param
 */
org.apache.royale.net.remoting.Operation.prototype.org_apache_royale_net_remoting_Operation_destinationFaultHandler = function(param) {
  org.apache.royale.utils.Language.trace("destination fault handler", param);
};


/**
 *  @asprivate
 *  Utility method used to assign the RoyaleClient Id value to outbound messages.
 * 
 *  @asparam message The message to set the RoyaleClient Id on.
 * @protected
 * @param {org.apache.royale.net.remoting.messages.IMessage} message
 */
org.apache.royale.net.remoting.Operation.prototype.setRoyaleClientIdOnMessage = function(message) {
  var /** @type {string} */ id = org.apache.royale.net.remoting.messages.RoyaleClient.getInstance().id;
  message.headers[org.apache.royale.net.remoting.messages.AbstractMessage.ROYALE_CLIENT_ID_HEADER] = (id != null) ? id : org.apache.royale.net.remoting.messages.RoyaleClient.NULL_ROYALECLIENT_ID;
};


/**
 * @protected
 * @type {number}
 */
org.apache.royale.net.remoting.Operation.prototype.messagingVersion = 1.0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.net.remoting.Operation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Operation', qName: 'org.apache.royale.net.remoting.Operation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.net.remoting.Operation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'Operation': { type: '', declaredBy: 'org.apache.royale.net.remoting.Operation', parameters: function () { return [ 'String', false ,'org.apache.royale.net.RemoteObject', false ,'Array', false ]; }},
        'send': { type: 'void', declaredBy: 'org.apache.royale.net.remoting.Operation'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.Operation.prototype.ROYALE_COMPILE_FLAGS = 10;
