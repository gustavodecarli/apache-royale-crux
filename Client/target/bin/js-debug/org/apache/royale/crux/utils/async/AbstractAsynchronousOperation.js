/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/utils/async/AbstractAsynchronousOperation.as
 * org.apache.royale.crux.utils.async.AbstractAsynchronousOperation
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.utils.async.AbstractAsynchronousOperation');
/* Royale Dependency List: mx.rpc.IResponder*/




/**
 * Constructor.
 * @constructor
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation = function() {
  
  this.responders = [];
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.utils.async.AbstractAsynchronousOperation', org.apache.royale.crux.utils.async.AbstractAsynchronousOperation);


/**
 * @protected
 * @type {boolean}
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.concluded = false;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.responders;


/**
 * @inheritDoc
 * @export
 * @param {mx.rpc.IResponder} responder
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.addResponder = function(responder) {
  this.responders.push(responder);
};


/**
 * @inheritDoc
 * @export
 * @param {Object} data
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.complete = function(data) {
  if (!this.concluded) {
    var foreachiter0_target = this.responders;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var responder = foreachiter0_target[foreachiter0];
    {
      responder.result(data);
    }}
    
    this.concluded = true;
  } else {
  }
};


/**
 * @inheritDoc
 * @export
 * @param {Object} info
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.fail = function(info) {
  if (!this.concluded) {
    var foreachiter1_target = this.responders;
    for (var foreachiter1 in foreachiter1_target) 
    {
    var responder = foreachiter1_target[foreachiter1];
    {
      responder.fault(info);
    }}
    
    this.concluded = true;
  } else {
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AbstractAsynchronousOperation', qName: 'org.apache.royale.crux.utils.async.AbstractAsynchronousOperation', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'AbstractAsynchronousOperation': { type: '', declaredBy: 'org.apache.royale.crux.utils.async.AbstractAsynchronousOperation'},
        'addResponder': { type: 'void', declaredBy: 'org.apache.royale.crux.utils.async.AbstractAsynchronousOperation', parameters: function () { return [ 'mx.rpc.IResponder', false ]; }},
        'complete': { type: 'void', declaredBy: 'org.apache.royale.crux.utils.async.AbstractAsynchronousOperation', parameters: function () { return [ 'Object', false ]; }},
        'fail': { type: 'void', declaredBy: 'org.apache.royale.crux.utils.async.AbstractAsynchronousOperation', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.utils.async.AbstractAsynchronousOperation.prototype.ROYALE_COMPILE_FLAGS = 10;
