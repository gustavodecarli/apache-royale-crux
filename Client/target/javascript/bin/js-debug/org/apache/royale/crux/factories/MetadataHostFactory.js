/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/factories/MetadataHostFactory.as
 * org.apache.royale.crux.factories.MetadataHostFactory
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.factories.MetadataHostFactory');
/* Royale Dependency List: org.apache.royale.crux.reflection.IMetadataHost,org.apache.royale.crux.reflection.MetadataHostClass,org.apache.royale.crux.reflection.MetadataHostMethod,org.apache.royale.crux.reflection.MetadataHostProperty,org.apache.royale.crux.reflection.MethodParameter,org.apache.royale.reflection.DefinitionWithMetaData,org.apache.royale.reflection.MethodDefinition,org.apache.royale.reflection.ParameterDefinition,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.VariableDefinition,org.apache.royale.reflection.getDefinitionByName,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.crux.factories.MetadataHostFactory = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.factories.MetadataHostFactory', org.apache.royale.crux.factories.MetadataHostFactory);


/**
 * Returns an <code>IMetadataHost</code> instance representing a property,
 * method or class that is decorated with metadata.
 *
 * @asparam hostNode DefinitionWithMetaData node representing a property, method or class
 * @asreturn <code>IMetadataHost</code> instance
 *
 * @see org.apache.royale.crux.reflection.MetadataHostClass
 * @see org.apache.royale.crux.reflection.MetadataHostMethod
 * @see org.apache.royale.crux.reflection.MetadataHostProperty
 * @export
 * @param {org.apache.royale.reflection.DefinitionWithMetaData} hostNode
 * @return {org.apache.royale.crux.reflection.IMetadataHost}
 */
org.apache.royale.crux.factories.MetadataHostFactory.getMetadataHost = function(hostNode) {
  var /** @type {org.apache.royale.crux.reflection.IMetadataHost} */ host;
  if (org.apache.royale.utils.Language.is(hostNode, org.apache.royale.reflection.TypeDefinition)) {
    host = new org.apache.royale.crux.reflection.MetadataHostClass();
    host.type = org.apache.royale.utils.Language.as(org.apache.royale.reflection.getDefinitionByName(org.apache.royale.utils.Language.as(hostNode, org.apache.royale.reflection.TypeDefinition, true).qualifiedName), org.apache.royale.utils.Language.synthType('Class'));
  } else if (org.apache.royale.utils.Language.is(hostNode, org.apache.royale.reflection.MethodDefinition)) {
    var /** @type {org.apache.royale.crux.reflection.MetadataHostMethod} */ metadataHostMethod = new org.apache.royale.crux.reflection.MetadataHostMethod();
    host = metadataHostMethod;
    var /** @type {org.apache.royale.reflection.MethodDefinition} */ method = org.apache.royale.utils.Language.as(hostNode, org.apache.royale.reflection.MethodDefinition);
    if (method.returnType.qualifiedName != "void" && method.returnType.qualifiedName != "*") {
      metadataHostMethod.returnType = org.apache.royale.utils.Language.as(org.apache.royale.reflection.getDefinitionByName(method.returnType.qualifiedName), org.apache.royale.utils.Language.synthType('Class'), true);
    }
    var foreachiter0_target = method.parameters;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var pNode = foreachiter0_target[foreachiter0];
    {
      var /** @type {Object} */ pType = pNode.type.qualifiedName == "*" ? Object : org.apache.royale.utils.Language.as(org.apache.royale.reflection.getDefinitionByName(pNode.type.qualifiedName), org.apache.royale.utils.Language.synthType('Class'), true);
      metadataHostMethod.parameters.push(new org.apache.royale.crux.reflection.MethodParameter(pNode.index, pType, pNode.optional));
    }}
    
    metadataHostMethod.sourceDefinition = method;
  } else {
    var /** @type {org.apache.royale.reflection.VariableDefinition} */ varDef = org.apache.royale.utils.Language.as(hostNode, org.apache.royale.reflection.VariableDefinition);
    var /** @type {org.apache.royale.crux.reflection.MetadataHostProperty} */ metadataHostProperty = new org.apache.royale.crux.reflection.MetadataHostProperty();
    host = metadataHostProperty;
    metadataHostProperty.sourceDefinition = varDef;
    metadataHostProperty.type = varDef.type.qualifiedName == "*" ? Object : org.apache.royale.utils.Language.as(org.apache.royale.reflection.getDefinitionByName(varDef.type.qualifiedName), org.apache.royale.utils.Language.synthType('Class'), true);
  }
  host.name = hostNode.name;
  return host;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.factories.MetadataHostFactory.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MetadataHostFactory', qName: 'org.apache.royale.crux.factories.MetadataHostFactory', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.factories.MetadataHostFactory.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'MetadataHostFactory': { type: '', declaredBy: 'org.apache.royale.crux.factories.MetadataHostFactory'},
        '|getMetadataHost': { type: 'org.apache.royale.crux.reflection.IMetadataHost', declaredBy: 'org.apache.royale.crux.factories.MetadataHostFactory', parameters: function () { return [ 'org.apache.royale.reflection.DefinitionWithMetaData', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.factories.MetadataHostFactory.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./MetadataHostFactory.js.map
