/**
 * Generated by Apache Royale Compiler from mx/resources/LocaleSorter.as
 * mx.resources.LocaleSorter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.resources.LocaleSorter');
/* Royale Dependency List: XML,org.apache.royale.utils.Language*/
goog.provide('mx.resources.LocaleSorter.LocaleID');
goog.provide('mx.resources.LocaleSorter.LocaleRegistry');



/**
 * @constructor
 */
mx.resources.LocaleSorter = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.resources.LocaleSorter', mx.resources.LocaleSorter);


/**
 *  @asprivate
 *	Sorts a list of locales using the order specified
 *  by the user preferences.
 * 
 * 	@asparam appLocales An Array of locales supported by the application.
 *
 * 	@asparam systemPreferences The locale chain of user-preferred locales.
 *
 * 	@asparam ultimateFallbackLocale The ultimate fallback locale
 *  that will be used when no locale from systemPreference matches 
 * 	a locale from application supported locale list.
 *
 * 	@asparam addAll When true, adds all the non-matching locales
 *  at the end of the result list preserving the given order.
 *
 *	@asreturn A locale chain that matches user preferences order. 
 * @export
 * @param {Array} appLocales
 * @param {Array} systemPreferences
 * @param {string=} ultimateFallbackLocale
 * @param {boolean=} addAll
 * @return {Array}
 */
mx.resources.LocaleSorter.sortLocalesByPreference = function(appLocales, systemPreferences, ultimateFallbackLocale, addAll) {
  ultimateFallbackLocale = typeof ultimateFallbackLocale !== 'undefined' ? ultimateFallbackLocale : null;
  addAll = typeof addAll !== 'undefined' ? addAll : false;
  function promote(locale) {
    if (typeof(hasLocale[locale]) != "undefined") {
      result.push(appLocales[hasLocale[locale]]);
      delete hasLocale[locale];
    }
  };
  var /** @type {number} */ i = 0;
  var /** @type {number} */ j = 0;
  var /** @type {Array} */ result = [];
  var /** @type {Object} */ hasLocale = {};
  //var /** @type {number} */ i = 0;
  //var /** @type {number} */ j = 0;
  var /** @type {Array} */ locales = mx.resources.LocaleSorter.trimAndNormalize(appLocales);
  var /** @type {Array} */ preferenceLocales = mx.resources.LocaleSorter.trimAndNormalize(systemPreferences);
  mx.resources.LocaleSorter.addUltimateFallbackLocale(preferenceLocales, ultimateFallbackLocale);
  var /** @type {number} */ noLocales = (locales.length) >> 0;
  var /** @type {number} */ noPreferenceLocales = (preferenceLocales.length) >> 0;
  for (j = 0; j < noLocales; j++) {
    hasLocale[locales[j]] = j;
  }
  var /** @type {Array.<mx.resources.LocaleSorter.LocaleID>} */ preferenceLocalesID = new (org.apache.royale.utils.Language.synthVector('mx.resources.LocaleSorter.LocaleID'))(noPreferenceLocales);
  for (i = 0; i < noPreferenceLocales; i++) {
    preferenceLocalesID[i] = mx.resources.LocaleSorter.LocaleID.fromString(org.apache.royale.utils.Language.string(preferenceLocales[i]));
  }
  var /** @type {Array.<mx.resources.LocaleSorter.LocaleID>} */ localesID = new (org.apache.royale.utils.Language.synthVector('mx.resources.LocaleSorter.LocaleID'))(noLocales);
  for (i = 0; i < noLocales; i++) {
    localesID[i] = mx.resources.LocaleSorter.LocaleID.fromString(org.apache.royale.utils.Language.string(locales[i]));
  }
  for (i = 0; i < noPreferenceLocales; i++) {
    var /** @type {mx.resources.LocaleSorter.LocaleID} */ plocale = preferenceLocalesID[i].clone();
    promote(org.apache.royale.utils.Language.string(preferenceLocales[i]));
    promote(plocale.toString());
    while (plocale.transformToParent()) {
      promote(plocale.toString());
    }
    plocale = preferenceLocalesID[i].clone();
    for (j = 0; j < noPreferenceLocales; j++) {
      if (plocale.isSiblingOf(preferenceLocalesID[j]))
        promote(org.apache.royale.utils.Language.string(preferenceLocales[j]));
    }
    for (j = 0; j < noLocales; j++) {
      if (plocale.isSiblingOf(localesID[j]))
        promote(org.apache.royale.utils.Language.string(locales[j]));
    }
  }
  if (addAll) {
    for (j = 0; j < noLocales; j++) {
      promote(org.apache.royale.utils.Language.string(locales[j]));
    }
  }
  return result;
};


/**
 *  @asprivate
 * @private
 * @param {Array} list
 * @return {Array}
 */
mx.resources.LocaleSorter.trimAndNormalize = function(list) {
  var /** @type {Array} */ resultList = [];
  for (var /** @type {number} */ i = 0; i < list.length; i++) {
    resultList.push(mx.resources.LocaleSorter.normalizeLocale(org.apache.royale.utils.Language.string(list[i])));
  }
  return resultList;
};


/**
 *  @asprivate
 * @private
 * @param {string} locale
 * @return {string}
 */
mx.resources.LocaleSorter.normalizeLocale = function(locale) {
  return locale.toLowerCase().replace(/-/g, "_");
};


/**
 *  @asprivate
 * @private
 * @param {Array} preferenceLocales
 * @param {string} ultimateFallbackLocale
 */
mx.resources.LocaleSorter.addUltimateFallbackLocale = function(preferenceLocales, ultimateFallbackLocale) {
  if (ultimateFallbackLocale != null && ultimateFallbackLocale != "") {
    var /** @type {string} */ locale = mx.resources.LocaleSorter.normalizeLocale(ultimateFallbackLocale);
    if (preferenceLocales.indexOf(locale) == -1) {
      preferenceLocales.push(locale);
    }
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.resources.LocaleSorter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LocaleSorter', qName: 'mx.resources.LocaleSorter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.resources.LocaleSorter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|sortLocalesByPreference': { type: 'Array', declaredBy: 'mx.resources.LocaleSorter', parameters: function () { return [ 'Array', false ,'Array', false ,'String', true ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 */
mx.resources.LocaleSorter.LocaleID = function() {
  
  this.LocaleID_extended_langs = [];
  this.LocaleID_variants = [];
  this.LocaleID_extensions = {};
  this.LocaleID_privates = [];
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.resources.LocaleSorter.LocaleID', mx.resources.LocaleSorter.LocaleID);


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_PRIMARY_LANGUAGE = 0;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_EXTENDED_LANGUAGES = 1;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_SCRIPT = 2;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_REGION = 3;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_VARIANTS = 4;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_EXTENSIONS = 5;


/**
 * @export
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.STATE_PRIVATES = 6;


/**
 *  @asprivate
 * @private
 * @param {Array} dest
 * @param {Array} src
 */
mx.resources.LocaleSorter.LocaleID.appendElements = function(dest, src) {
  for (var /** @type {number} */ i = 0, /** @type {number} */ argc = (src.length) >>> 0; i < argc; i++) {
    dest.push(src[i]);
  }
};


/**
 *  @asprivate
 * @export
 * @param {string} str
 * @return {mx.resources.LocaleSorter.LocaleID}
 */
mx.resources.LocaleSorter.LocaleID.fromString = function(str) {
  var /** @type {mx.resources.LocaleSorter.LocaleID} */ localeID = new mx.resources.LocaleSorter.LocaleID();
  var /** @type {number} */ state = mx.resources.LocaleSorter.LocaleID.STATE_PRIMARY_LANGUAGE;
  var /** @type {Array} */ subtags = str.replace(/-/g, '_').split('_');
  var /** @type {Array} */ last_extension;
  for (var /** @type {number} */ i = 0, /** @type {number} */ l = (subtags.length) >> 0; i < l; i++) {
    var /** @type {string} */ subtag = org.apache.royale.utils.Language.string(subtags[i].toLowerCase());
    if (state == mx.resources.LocaleSorter.LocaleID.STATE_PRIMARY_LANGUAGE) {
      if (subtag == "x") {
        localeID.LocaleID_privateLangs = true;
      } else if (subtag == "i") {
        localeID.LocaleID_lang += "i-";
      } else {
        localeID.LocaleID_lang += subtag;
        state = mx.resources.LocaleSorter.LocaleID.STATE_EXTENDED_LANGUAGES;
      }
    } else {
      var /** @type {number} */ subtag_length = (subtag.length) >> 0;
      if (subtag_length == 0)
        continue;
      var /** @type {string} */ firstChar = subtag.charAt(0).toLowerCase();
      if (state <= mx.resources.LocaleSorter.LocaleID.STATE_EXTENDED_LANGUAGES && subtag_length == 3) {
        localeID.LocaleID_extended_langs.push(subtag);
        if (localeID.LocaleID_extended_langs.length == 3) {
          state = mx.resources.LocaleSorter.LocaleID.STATE_SCRIPT;
        }
      } else if (state <= mx.resources.LocaleSorter.LocaleID.STATE_SCRIPT && subtag_length == 4) {
        localeID.LocaleID_script = subtag;
        state = mx.resources.LocaleSorter.LocaleID.STATE_REGION;
      } else if (state <= mx.resources.LocaleSorter.LocaleID.STATE_REGION && (subtag_length == 2 || subtag_length == 3)) {
        localeID.LocaleID_region = subtag;
        state = mx.resources.LocaleSorter.LocaleID.STATE_VARIANTS;
      } else if (state <= mx.resources.LocaleSorter.LocaleID.STATE_VARIANTS && ((firstChar >= "a" && firstChar <= "z" && subtag_length >= 5) || (firstChar >= "0" && firstChar <= "9" && subtag_length >= 4))) {
        localeID.LocaleID_variants.push(subtag);
        state = mx.resources.LocaleSorter.LocaleID.STATE_VARIANTS;
      } else if (state < mx.resources.LocaleSorter.LocaleID.STATE_PRIVATES && subtag_length == 1) {
        if (subtag == "x") {
          state = mx.resources.LocaleSorter.LocaleID.STATE_PRIVATES;
          last_extension = localeID.LocaleID_privates;
        } else {
          state = mx.resources.LocaleSorter.LocaleID.STATE_EXTENSIONS;
          last_extension = localeID.LocaleID_extensions[subtag] || [];
          localeID.LocaleID_extensions[subtag] = last_extension;
        }
      } else if (state >= mx.resources.LocaleSorter.LocaleID.STATE_EXTENSIONS) {
        last_extension.push(subtag);
      }
    }
  }
  localeID.canonicalize();
  return localeID;
};


/**
 * @private
 * @type {string}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_lang = "";


/**
 * @private
 * @type {string}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_script = "";


/**
 * @private
 * @type {string}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_region = "";


/**
 * @private
 * @type {Array}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_extended_langs;


/**
 * @private
 * @type {Array}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_variants;


/**
 * @private
 * @type {Object}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_extensions;


/**
 * @private
 * @type {Array}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_privates;


/**
 * @private
 * @type {boolean}
 */
mx.resources.LocaleSorter.LocaleID.prototype.LocaleID_privateLangs = false;


/**
 *  @asprivate
 * @export
 * @return {mx.resources.LocaleSorter.LocaleID}
 */
mx.resources.LocaleSorter.LocaleID.prototype.clone = function() {
  var /** @type {mx.resources.LocaleSorter.LocaleID} */ copy = new mx.resources.LocaleSorter.LocaleID();
  copy.LocaleID_lang = this.LocaleID_lang;
  copy.LocaleID_script = this.LocaleID_script;
  copy.LocaleID_region = this.LocaleID_region;
  copy.LocaleID_extended_langs = this.LocaleID_extended_langs.concat();
  copy.LocaleID_variants = this.LocaleID_variants.concat();
  copy.LocaleID_extensions = {};
  for (var /** @type {string} */ i in this.LocaleID_extensions) {
    if (this.LocaleID_extensions.hasOwnProperty(i)) {
      copy.LocaleID_extensions[i] = this.LocaleID_extensions[i].concat();
    }
  }
  copy.LocaleID_privates = this.LocaleID_privates.concat();
  copy.LocaleID_privateLangs = this.LocaleID_privateLangs;
  return copy;
};


/**
 *  @asprivate
 * @export
 */
mx.resources.LocaleSorter.LocaleID.prototype.canonicalize = function() {
  for (var /** @type {string} */ i in this.LocaleID_extensions) {
    if (this.LocaleID_extensions.hasOwnProperty(i)) {
      if (this.LocaleID_extensions[i].length == 0)
        delete this.LocaleID_extensions[i];
      else
        this.LocaleID_extensions[i] = this.LocaleID_extensions[i].sort();
    }
  }
  this.LocaleID_extended_langs = this.LocaleID_extended_langs.sort();
  this.LocaleID_variants = this.LocaleID_variants.sort();
  this.LocaleID_privates = this.LocaleID_privates.sort();
  if (this.LocaleID_script == "")
    this.LocaleID_script = mx.resources.LocaleSorter.LocaleRegistry.getScriptByLang(this.LocaleID_lang);
  if (this.LocaleID_script == "" && this.LocaleID_region != "")
    this.LocaleID_script = mx.resources.LocaleSorter.LocaleRegistry.getScriptByLangAndRegion(this.LocaleID_lang, this.LocaleID_region);
  if (this.LocaleID_region == "" && this.LocaleID_script != "") {
    this.LocaleID_region = mx.resources.LocaleSorter.LocaleRegistry.getDefaultRegionForLangAndScript(this.LocaleID_lang, this.LocaleID_script);
  }
};


/**
 *  @asprivate
 * @export
 * @return {string}
 */
mx.resources.LocaleSorter.LocaleID.prototype.toString = function() {
  var /** @type {Array} */ stack = [this.LocaleID_lang];
  mx.resources.LocaleSorter.LocaleID.appendElements(stack, this.LocaleID_extended_langs);
  if (this.LocaleID_script != "")
    stack.push(this.LocaleID_script);
  if (this.LocaleID_region != "")
    stack.push(this.LocaleID_region);
  mx.resources.LocaleSorter.LocaleID.appendElements(stack, this.LocaleID_variants);
  for (var /** @type {string} */ i in this.LocaleID_extensions) {
    if (this.LocaleID_extensions.hasOwnProperty(i)) {
      stack.push(i);
      mx.resources.LocaleSorter.LocaleID.appendElements(stack, this.LocaleID_extensions[i]);
    }
  }
  if (this.LocaleID_privates.length > 0) {
    stack.push("x");
    mx.resources.LocaleSorter.LocaleID.appendElements(stack, this.LocaleID_privates);
  }
  return stack.join("_");
};


/**
 *  @asprivate
 * @export
 * @param {mx.resources.LocaleSorter.LocaleID} locale
 * @return {boolean}
 */
mx.resources.LocaleSorter.LocaleID.prototype.equals = function(locale) {
  return this.toString() == locale.toString();
};


/**
 *  @asprivate
 * @export
 * @param {mx.resources.LocaleSorter.LocaleID} other
 * @return {boolean}
 */
mx.resources.LocaleSorter.LocaleID.prototype.isSiblingOf = function(other) {
  return this.LocaleID_lang == other.LocaleID_lang && this.LocaleID_script == other.LocaleID_script;
};


/**
 *  @asprivate
 * @export
 * @return {boolean}
 */
mx.resources.LocaleSorter.LocaleID.prototype.transformToParent = function() {
  if (this.LocaleID_privates.length > 0) {
    this.LocaleID_privates.splice(this.LocaleID_privates.length - 1, 1);
    return true;
  }
  var /** @type {string} */ lastExtensionName = null;
  for (var /** @type {string} */ i in this.LocaleID_extensions) {
    if (this.LocaleID_extensions.hasOwnProperty(i))
      lastExtensionName = i;
  }
  if (lastExtensionName) {
    var /** @type {Array} */ lastExtension = this.LocaleID_extensions[lastExtensionName];
    if (lastExtension.length == 1) {
      delete this.LocaleID_extensions[lastExtensionName];
      return true;
    }
    lastExtension.splice(lastExtension.length - 1, 1);
    return true;
  }
  if (this.LocaleID_variants.length > 0) {
    this.LocaleID_variants.splice(this.LocaleID_variants.length - 1, 1);
    return true;
  }
  if (this.LocaleID_script != "") {
    if (mx.resources.LocaleSorter.LocaleRegistry.getScriptByLang(this.LocaleID_lang) != "") {
      this.LocaleID_script = "";
      return true;
    } else if (this.LocaleID_region == "") {
      var /** @type {string} */ defaultRegion = mx.resources.LocaleSorter.LocaleRegistry.getDefaultRegionForLangAndScript(this.LocaleID_lang, this.LocaleID_script);
      if (defaultRegion != "") {
        this.LocaleID_region = defaultRegion;
        this.LocaleID_script = "";
        return true;
      }
    }
  }
  if (this.LocaleID_region != "") {
    if (!(this.LocaleID_script == "" && mx.resources.LocaleSorter.LocaleRegistry.getScriptByLang(this.LocaleID_lang) == "")) {
      this.LocaleID_region = "";
      return true;
    }
  }
  if (this.LocaleID_extended_langs.length > 0) {
    this.LocaleID_extended_langs.splice(this.LocaleID_extended_langs.length - 1, 1);
    return true;
  }
  return false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.resources.LocaleSorter.LocaleID.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LocaleID', qName: 'mx.resources.LocaleSorter.LocaleID', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.resources.LocaleSorter.LocaleID.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|fromString': { type: 'mx.resources.LocaleSorter.LocaleID', declaredBy: 'mx.resources.LocaleSorter.LocaleID', parameters: function () { return [ 'String', false ]; }},
        'LocaleID': { type: '', declaredBy: 'mx.resources.LocaleSorter.LocaleID'},
        'clone': { type: 'mx.resources.LocaleSorter.LocaleID', declaredBy: 'mx.resources.LocaleSorter.LocaleID'},
        'canonicalize': { type: 'void', declaredBy: 'mx.resources.LocaleSorter.LocaleID'},
        'toString': { type: 'String', declaredBy: 'mx.resources.LocaleSorter.LocaleID'},
        'equals': { type: 'Boolean', declaredBy: 'mx.resources.LocaleSorter.LocaleID', parameters: function () { return [ 'LocaleID', false ]; }},
        'isSiblingOf': { type: 'Boolean', declaredBy: 'mx.resources.LocaleSorter.LocaleID', parameters: function () { return [ 'LocaleID', false ]; }},
        'transformToParent': { type: 'Boolean', declaredBy: 'mx.resources.LocaleSorter.LocaleID'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleID.prototype.ROYALE_COMPILE_FLAGS = 26;



/**
 * @constructor
 */
mx.resources.LocaleSorter.LocaleRegistry = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.resources.LocaleSorter.LocaleRegistry', mx.resources.LocaleSorter.LocaleRegistry);


/**
 * @private
 * @const
 * @type {Array}
 */
mx.resources.LocaleSorter.LocaleRegistry.SCRIPTS = ["", "latn", "ethi", "arab", "beng", "cyrl", "thaa", "tibt", "grek", "gujr", "hebr", "deva", "armn", "jpan", "geor", "khmr", "knda", "kore", "laoo", "mlym", "mymr", "orya", "guru", "sinh", "taml", "telu", "thai", "nkoo", "blis", "hans", "hant", "mong", "syrc"];


/**
 * @private
 * @const
 * @type {Object}
 */
mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_BY_ID = {latn:1, ethi:2, arab:3, beng:4, cyrl:5, thaa:6, tibt:7, grek:8, gujr:9, hebr:10, deva:11, armn:12, jpan:13, geor:14, khmr:15, knda:16, kore:17, laoo:18, mlym:19, mymr:20, orya:21, guru:22, sinh:23, taml:24, telu:25, thai:26, nkoo:27, blis:28, hans:29, hant:30, mong:31, syrc:32};


/**
 * @private
 * @const
 * @type {Object}
 */
mx.resources.LocaleSorter.LocaleRegistry.DEFAULT_REGION_BY_LANG_AND_SCRIPT = {bg:{5:"bg"}, ca:{1:"es"}, zh:{30:"tw", 29:"cn"}, cs:{1:"cz"}, da:{1:"dk"}, de:{1:"de"}, el:{8:"gr"}, en:{1:"us"}, es:{1:"es"}, fi:{1:"fi"}, fr:{1:"fr"}, he:{10:"il"}, hu:{1:"hu"}, "is":{1:"is"}, it:{1:"it"}, ja:{13:"jp"}, ko:{17:"kr"}, nl:{1:"nl"}, nb:{1:"no"}, pl:{1:"pl"}, pt:{1:"br"}, ro:{1:"ro"}, ru:{5:"ru"}, hr:{1:"hr"}, sk:{1:"sk"}, sq:{1:"al"}, sv:{1:"se"}, th:{26:"th"}, tr:{1:"tr"}, ur:{3:"pk"}, id:{1:"id"}, uk:{5:"ua"}, be:{5:"by"}, sl:{1:"si"}, et:{1:"ee"}, lv:{1:"lv"}, lt:{1:"lt"}, fa:{3:"ir"}, vi:{1:"vn"}, hy:{12:"am"}, az:{1:"az", 5:"az"}, eu:{1:"es"}, mk:{5:"mk"}, af:{1:"za"}, ka:{14:"ge"}, fo:{1:"fo"}, hi:{11:"in"}, ms:{1:"my"}, kk:{5:"kz"}, ky:{5:"kg"}, sw:{1:"ke"}, uz:{1:"uz", 5:"uz"}, tt:{5:"ru"}, pa:{22:"in"}, gu:{9:"in"}, ta:{24:"in"}, te:{25:"in"}, kn:{16:"in"}, mr:{11:"in"}, sa:{11:"in"}, mn:{5:"mn"}, gl:{1:"es"}, kok:{11:"in"}, syr:{32:"sy"}, dv:{6:"mv"}, nn:{1:"no"}, sr:{1:"cs", 5:"cs"}, cy:{1:"gb"}, mi:{1:"nz"}, mt:{1:"mt"}, quz:{1:"bo"}, tn:{1:"za"}, xh:{1:"za"}, zu:{1:"za"}, nso:{1:"za"}, se:{1:"no"}, smj:{1:"no"}, sma:{1:"no"}, sms:{1:"fi"}, smn:{1:"fi"}, bs:{1:"ba"}};


/**
 * @private
 * @const
 * @type {Object}
 */
mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_ID_BY_LANG = {ab:5, af:1, am:2, ar:3, "as":4, ay:1, be:5, bg:5, bn:4, bs:1, ca:1, ch:1, cs:1, cy:1, da:1, de:1, dv:6, dz:7, el:8, en:1, eo:1, es:1, et:1, eu:1, fa:3, fi:1, fj:1, fo:1, fr:1, frr:1, fy:1, ga:1, gl:1, gn:1, gu:9, gv:1, he:10, hi:11, hr:1, ht:1, hu:1, hy:12, id:1, "in":1, "is":1, it:1, iw:10, ja:13, ka:14, kk:5, kl:1, km:15, kn:16, ko:17, la:1, lb:1, ln:1, lo:18, lt:1, lv:1, mg:1, mh:1, mk:5, ml:19, mo:1, mr:11, ms:1, mt:1, my:20, na:1, nb:1, nd:1, ne:11, nl:1, nn:1, no:1, nr:1, ny:1, om:1, or:21, pa:22, pl:1, ps:3, pt:1, qu:1, rn:1, ro:1, ru:5, rw:1, sg:1, si:23, sk:1, sl:1, sm:1, so:1, sq:1, ss:1, st:1, sv:1, sw:1, ta:24, te:25, th:26, ti:2, tl:1, tn:1, to:1, tr:1, ts:1, uk:5, ur:3, ve:1, vi:1, wo:1, xh:1, yi:10, zu:1, cpe:1, dsb:1, frs:1, gsw:1, hsb:1, kok:11, mai:11, men:1, nds:1, niu:1, nqo:27, nso:1, son:1, tem:1, tkl:1, tmh:1, tpi:1, tvl:1, zbl:28};


/**
 * @private
 * @const
 * @type {Object}
 */
mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_ID_BY_LANG_AND_REGION = {zh:{cn:29, sg:29, tw:30, hk:30, mo:30}, mn:{cn:31, sg:5}, pa:{pk:3, "in":22}, ha:{gh:1, ne:1}};


/**
 *  @asprivate
 *  Given a language and a region, returns the script system
 *  used to write the language there.
 *
 *  Examples:
 *  lang zh (Chinese), region cn (China) -> hans (Simplified Chinese)
 *  lang zh (Chinese), region tw (Taiwan) -> hast (Traditional Chinese)
 * @export
 * @param {string} lang
 * @param {string} region
 * @return {string}
 */
mx.resources.LocaleSorter.LocaleRegistry.getScriptByLangAndRegion = function(lang, region) {
  var /** @type {Object} */ langRegions = mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_ID_BY_LANG_AND_REGION[lang];
  if (langRegions == null)
    return "";
  var /** @type {Object} */ scriptID = langRegions[region];
  if (scriptID == null)
    return "";
  return org.apache.royale.utils.Language.string(mx.resources.LocaleSorter.LocaleRegistry.SCRIPTS[org.apache.royale.utils.Language._int(scriptID)].toLowerCase());
};


/**
 *  @asprivate
 *  Given a language, returns the script generally used to write it.
 *
 *  Examples:
 *  lang bg (Bulgarian) -> cyrl (Cyrillic)
 * @export
 * @param {string} lang
 * @return {string}
 */
mx.resources.LocaleSorter.LocaleRegistry.getScriptByLang = function(lang) {
  var /** @type {Object} */ scriptID = mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_ID_BY_LANG[lang];
  if (scriptID == null)
    return "";
  return org.apache.royale.utils.Language.string(mx.resources.LocaleSorter.LocaleRegistry.SCRIPTS[org.apache.royale.utils.Language._int(scriptID)].toLowerCase());
};


/**
 *  @asprivate
 *  Given a language and a script used for writing it,
 *  returns the most prominent region where that combination is used.
 *
 *  Examples:
 * @export
 * @param {string} lang
 * @param {string} script
 * @return {string}
 */
mx.resources.LocaleSorter.LocaleRegistry.getDefaultRegionForLangAndScript = function(lang, script) {
  var /** @type {Object} */ langObj = mx.resources.LocaleSorter.LocaleRegistry.DEFAULT_REGION_BY_LANG_AND_SCRIPT[lang];
  var /** @type {Object} */ scriptID = mx.resources.LocaleSorter.LocaleRegistry.SCRIPT_BY_ID[script];
  if (langObj == null || scriptID == null)
    return "";
  return org.apache.royale.utils.Language.string(langObj[org.apache.royale.utils.Language._int(scriptID)] || "");
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.resources.LocaleSorter.LocaleRegistry.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'LocaleRegistry', qName: 'mx.resources.LocaleSorter.LocaleRegistry', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.resources.LocaleSorter.LocaleRegistry.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|getScriptByLangAndRegion': { type: 'String', declaredBy: 'mx.resources.LocaleSorter.LocaleRegistry', parameters: function () { return [ 'String', false ,'String', false ]; }},
        '|getScriptByLang': { type: 'String', declaredBy: 'mx.resources.LocaleSorter.LocaleRegistry', parameters: function () { return [ 'String', false ]; }},
        '|getDefaultRegionForLangAndScript': { type: 'String', declaredBy: 'mx.resources.LocaleSorter.LocaleRegistry', parameters: function () { return [ 'String', false ,'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.resources.LocaleSorter.LocaleRegistry.prototype.ROYALE_COMPILE_FLAGS = 26;
