/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/processors/EventHandlerProcessor.as
 * org.apache.royale.crux.processors.EventHandlerProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.processors.EventHandlerProcessor');
/* Royale Dependency List: org.apache.royale.crux.Bean,org.apache.royale.crux.CruxConfig,org.apache.royale.crux.metadata.EventHandlerMetadataTag,org.apache.royale.crux.metadata.EventTypeExpression,org.apache.royale.crux.processors.ProcessorPriority,org.apache.royale.crux.reflection.ClassConstant,org.apache.royale.crux.reflection.IMetadataTag,org.apache.royale.crux.reflection.TypeCache,org.apache.royale.crux.reflection.TypeDescriptor,org.apache.royale.crux.utils.event.EventHandler,org.apache.royale.events.IEventDispatcher,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.reflection.utils.getMembersWithNameMatch,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.crux.processors.BaseMetadataProcessor');



/**
 * Constructor
 * @constructor
 * @extends {org.apache.royale.crux.processors.BaseMetadataProcessor}
 * @param {Array=} metadataNames
 */
org.apache.royale.crux.processors.EventHandlerProcessor = function(metadataNames) {
  metadataNames = typeof metadataNames !== 'undefined' ? metadataNames : null;
  
  this.eventHandlersByEventType = new Map();
  this.eventHandlerClass = org.apache.royale.crux.utils.event.EventHandler;
  org.apache.royale.crux.processors.EventHandlerProcessor.base(this, 'constructor', (metadataNames == null) ? [org.apache.royale.crux.processors.EventHandlerProcessor.EVENT_HANDLER, org.apache.royale.crux.processors.EventHandlerProcessor.MEDIATE] : metadataNames, org.apache.royale.crux.metadata.EventHandlerMetadataTag);
};
goog.inherits(org.apache.royale.crux.processors.EventHandlerProcessor, org.apache.royale.crux.processors.BaseMetadataProcessor);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.EventHandlerProcessor', org.apache.royale.crux.processors.EventHandlerProcessor);


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.EVENT_HANDLER = "EventHandler";


/**
 * @protected
 * @const
 * @type {string}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.MEDIATE = "Mediate";


/**
 * @protected
 * @type {Map}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.eventHandlersByEventType;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.eventHandlerClass;


/**
 * @inheritDoc
 * @export
 * @override
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.setUpMetadataTag = function(metadataTag, bean) {
  var /** @type {org.apache.royale.crux.metadata.EventHandlerMetadataTag} */ eventHandlerTag = org.apache.royale.utils.Language.as(metadataTag, org.apache.royale.crux.metadata.EventHandlerMetadataTag);
  if (this.validateEventHandlerMetadataTag(eventHandlerTag)) {
    var /** @type {org.apache.royale.crux.metadata.EventTypeExpression} */ expression = new org.apache.royale.crux.metadata.EventTypeExpression(eventHandlerTag.event, this.crux);
    var foreachiter0_target = expression.eventTypes;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var eventType = foreachiter0_target[foreachiter0];
    {
      var /** @type {Function} */ method = org.apache.royale.utils.Language.as(bean.source[eventHandlerTag.host.name], Function);
      method = org.apache.royale.utils.Language.closure(method, bean.source, org.apache.royale.utils.Language.string(eventHandlerTag.host.name));
      this.addEventHandlerByEventType(eventHandlerTag, method, expression.eventClass, eventType);
    }}
    
  }
};


/**
 * @inheritDoc
 * @export
 * @override
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.tearDownMetadataTag = function(metadataTag, bean) {
  var /** @type {org.apache.royale.crux.metadata.EventHandlerMetadataTag} */ eventHandlerTag = org.apache.royale.utils.Language.as(metadataTag, org.apache.royale.crux.metadata.EventHandlerMetadataTag);
  var /** @type {org.apache.royale.crux.metadata.EventTypeExpression} */ expression = new org.apache.royale.crux.metadata.EventTypeExpression(eventHandlerTag.event, this.crux);
  var foreachiter1_target = expression.eventTypes;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var eventType = foreachiter1_target[foreachiter1];
  {
    var /** @type {Function} */ method = org.apache.royale.utils.Language.as(bean.source[eventHandlerTag.host.name], Function);
    method = org.apache.royale.utils.Language.closure(method, bean.source, org.apache.royale.utils.Language.string(eventHandlerTag.host.name));
    this.removeEventHandlerByEventType(eventHandlerTag, method, expression.eventClass, eventType);
  }}
  
};


/**
 * Add Mediator By Event Type
 * @protected
 * @param {org.apache.royale.crux.metadata.EventHandlerMetadataTag} eventHandlerTag
 * @param {Function} method
 * @param {Object} eventClass
 * @param {string} eventType
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.addEventHandlerByEventType = function(eventHandlerTag, method, eventClass, eventType) {
  var /** @type {org.apache.royale.crux.utils.event.EventHandler} */ eventHandler = new this.eventHandlerClass(eventHandlerTag, method, eventClass);
  
  var /** @type {Array} */ eventTypeHandlers = this.eventHandlersByEventType.get(eventType);
  if (!eventTypeHandlers) {
    eventTypeHandlers = [];
    this.eventHandlersByEventType.set(eventType, eventTypeHandlers);
  }
  eventTypeHandlers.push(eventHandler);
  var /** @type {org.apache.royale.events.IEventDispatcher} */ dispatcher = null;
  if (eventHandlerTag.scope == org.apache.royale.crux.CruxConfig.GLOBAL_DISPATCHER)
    dispatcher = this.crux.globalDispatcher;
  else if (eventHandlerTag.scope == org.apache.royale.crux.CruxConfig.LOCAL_DISPATCHER)
    dispatcher = this.crux.dispatcher;
  else
    dispatcher = this.crux.config.defaultDispatcher == org.apache.royale.crux.CruxConfig.LOCAL_DISPATCHER ? this.crux.dispatcher : this.crux.globalDispatcher;
  dispatcher.addEventListener(eventType, org.apache.royale.utils.Language.closure(eventHandler.handleEvent, eventHandler, 'handleEvent'), eventHandlerTag.useCapture);
};


/**
 * Remove Mediator By Event Type
 * @protected
 * @param {org.apache.royale.crux.metadata.EventHandlerMetadataTag} eventHandlerTag
 * @param {Function} method
 * @param {Object} eventClass
 * @param {string} eventType
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.removeEventHandlerByEventType = function(eventHandlerTag, method, eventClass, eventType) {
  var /** @type {org.apache.royale.events.IEventDispatcher} */ dispatcher = null;
  if (eventHandlerTag.scope == org.apache.royale.crux.CruxConfig.GLOBAL_DISPATCHER)
    dispatcher = this.crux.globalDispatcher;
  else if (eventHandlerTag.scope == org.apache.royale.crux.CruxConfig.LOCAL_DISPATCHER)
    dispatcher = this.crux.dispatcher;
  else
    dispatcher = this.crux.config.defaultDispatcher == org.apache.royale.crux.CruxConfig.LOCAL_DISPATCHER ? this.crux.dispatcher : this.crux.globalDispatcher;
  
  var /** @type {Array} */ eventTypeHandlers = this.eventHandlersByEventType.get(eventType);
  if (eventTypeHandlers) {
    var /** @type {number} */ eventHandlerIndex = 0;
    var foreachiter2_target = eventTypeHandlers;
    for (var foreachiter2 in foreachiter2_target) 
    {
    var eventHandler = foreachiter2_target[foreachiter2];
    {
      if ((eventHandler.method == method) && (eventHandler.eventClass == eventClass)) {
        dispatcher.removeEventListener(eventType, org.apache.royale.utils.Language.closure(eventHandler.handleEvent, eventHandler, 'handleEvent'), eventHandlerTag.useCapture);
        eventTypeHandlers.splice(eventHandlerIndex, 1);
        break;
      }
      eventHandlerIndex++;
    }}
    
    if (eventTypeHandlers.length == 0) {
      
      this.eventHandlersByEventType.delete(eventType);
    }
  }
};


/**
 * Parse Event Type Expression
 *
 * Processes an event type expression into an event type. Accepts a String specifying either the event type
 * (ex. 'type') or a class constant reference (ex. 'SomeEvent.TYPE').  If a class constant reference is specified,
 * it will be evaluated to obtain its String value.
 *
 * Class constant references are only supported in 'strict' mode.
 *
 * @asparam value A String that defines an Event type expression.
 * @asreturns The event type.
 * @protected
 * @param {string} value
 * @return {string}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.parseEventTypeExpression = function(value) {
  if (this.crux.config.strict && org.apache.royale.crux.reflection.ClassConstant.isClassConstant(value)) {
    return org.apache.royale.utils.Language.string(org.apache.royale.crux.reflection.ClassConstant.getConstantValue(org.apache.royale.crux.reflection.ClassConstant.getClass(value, this.crux.config.eventPackages), org.apache.royale.crux.reflection.ClassConstant.getConstantName(value)));
  } else {
    return value;
  }
};


/**
 * Validate EventHandler Metadata Tag
 *
 * @asparam mediator The EventHandlerMetadataTag
 * @protected
 * @param {org.apache.royale.crux.metadata.EventHandlerMetadataTag} eventHandlerTag
 * @return {boolean}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.validateEventHandlerMetadataTag = function(eventHandlerTag) {
  if (eventHandlerTag.event == null || eventHandlerTag.event.length == 0) {
    throw new Error("Missing \"event\" property in [EventHandler] tag: " + eventHandlerTag.asTag);
  }
  if (org.apache.royale.crux.reflection.ClassConstant.isClassConstant(eventHandlerTag.event)) {
    var /** @type {Object} */ eventClass = org.apache.royale.crux.reflection.ClassConstant.getClass(eventHandlerTag.event, this.crux.config.eventPackages);
    if (eventClass == null)
      throw new Error("Could not get a reference to class for " + eventHandlerTag.event + ". Did you specify its package in cruxConfig::eventPackages?");
    var /** @type {org.apache.royale.crux.reflection.TypeDescriptor} */ descriptor = org.apache.royale.crux.reflection.TypeCache.getTypeDescriptor(eventClass);
    var foreachiter3_target = eventHandlerTag.properties;
    for (var foreachiter3 in foreachiter3_target) 
    {
    var property = foreachiter3_target[foreachiter3];
    {
      var /** @type {Array} */ checkList = [];
      org.apache.royale.reflection.utils.getMembersWithNameMatch(descriptor.typeDefinition.variables, property, checkList);
      if (checkList.length == 0) {
        org.apache.royale.reflection.utils.getMembersWithNameMatch(descriptor.typeDefinition.accessors, property, checkList);
      }
      if (checkList.length == 0) {
        throw new Error("Unable to handle event: " + property + " does not exist as a property of " + org.apache.royale.reflection.getQualifiedClassName(eventClass) + ".");
      }
    }}
    
  }
  return true;
};


org.apache.royale.crux.processors.EventHandlerProcessor.prototype.get__priority = function() {
  return org.apache.royale.crux.processors.ProcessorPriority.EVENT_HANDLER;
};


Object.defineProperties(org.apache.royale.crux.processors.EventHandlerProcessor.prototype, /** @lends {org.apache.royale.crux.processors.EventHandlerProcessor.prototype} */ {
/**
  * @export
  * @type {number} */
priority: {
get: org.apache.royale.crux.processors.EventHandlerProcessor.prototype.get__priority}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventHandlerProcessor', qName: 'org.apache.royale.crux.processors.EventHandlerProcessor', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'priority': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.EventHandlerProcessor'}
      };
    },
    methods: function () {
      return {
        'EventHandlerProcessor': { type: '', declaredBy: 'org.apache.royale.crux.processors.EventHandlerProcessor', parameters: function () { return [ 'Array', true ]; }},
        'setUpMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.EventHandlerProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }},
        'tearDownMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.EventHandlerProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.EventHandlerProcessor.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./EventHandlerProcessor.js.map
