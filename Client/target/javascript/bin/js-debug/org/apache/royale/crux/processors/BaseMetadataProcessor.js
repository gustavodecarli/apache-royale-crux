/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/processors/BaseMetadataProcessor.as
 * org.apache.royale.crux.processors.BaseMetadataProcessor
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.processors.BaseMetadataProcessor');
/* Royale Dependency List: org.apache.royale.crux.Bean,org.apache.royale.crux.IBeanFactory,org.apache.royale.crux.ICrux,org.apache.royale.crux.processors.ProcessorPriority,org.apache.royale.crux.reflection.IMetadataTag,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.crux.processors.IMetadataProcessor');



/**
 * Constructor
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.crux.processors.IMetadataProcessor}
 * @param {Array} metadataNames
 * @param {Object=} metadataClass
 */
org.apache.royale.crux.processors.BaseMetadataProcessor = function(metadataNames, metadataClass) {
  metadataClass = typeof metadataClass !== 'undefined' ? metadataClass : null;
  org.apache.royale.crux.processors.BaseMetadataProcessor.base(this, 'constructor');
  this._metadataNames = metadataNames;
  this._metadataClass = metadataClass;
};
goog.inherits(org.apache.royale.crux.processors.BaseMetadataProcessor, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.processors.BaseMetadataProcessor', org.apache.royale.crux.processors.BaseMetadataProcessor);


/**
 * @protected
 * @type {org.apache.royale.crux.ICrux}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.crux;


/**
 * @protected
 * @type {org.apache.royale.crux.IBeanFactory}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.beanFactory;


/**
 * @protected
 * @type {Array}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype._metadataNames;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype._metadataClass;


/**
 * @export
 * @param {org.apache.royale.crux.ICrux} crux
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.init = function(crux) {
  this.crux = crux;
  this.beanFactory = crux.beanFactory;
};


/**
 * @export
 * @param {Array} metadataTags
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.setUpMetadataTags = function(metadataTags, bean) {
  var /** @type {org.apache.royale.crux.reflection.IMetadataTag} */ metadataTag;
  if (this.metadataClass != null) {
    for (var /** @type {number} */ i = 0; i < metadataTags.length; i++) {
      metadataTag = org.apache.royale.utils.Language.as(metadataTags[i], org.apache.royale.crux.reflection.IMetadataTag);
      metadataTags.splice(i, 1, this.createMetadataTag(metadataTag));
    }
  }
  var foreachiter0_target = metadataTags;
  for (var foreachiter0 in foreachiter0_target) 
  {
  metadataTag = foreachiter0_target[foreachiter0];
  {
    this.setUpMetadataTag(metadataTag, bean);
  }}
  
};


/**
 * @export
 * @param {org.apache.royale.crux.reflection.IMetadataTag} metadataTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.setUpMetadataTag = function(metadataTag, bean) {
};


/**
 * @export
 * @param {Array} metadataTags
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.tearDownMetadataTags = function(metadataTags, bean) {
  var /** @type {org.apache.royale.crux.reflection.IMetadataTag} */ metadataTag;
  if (this.metadataClass != null) {
    for (var /** @type {number} */ i = 0; i < metadataTags.length; i++) {
      metadataTag = org.apache.royale.utils.Language.as(metadataTags[i], org.apache.royale.crux.reflection.IMetadataTag);
      metadataTags.splice(i, 1, this.createMetadataTag(metadataTag));
    }
  }
  var foreachiter1_target = metadataTags;
  for (var foreachiter1 in foreachiter1_target) 
  {
  metadataTag = foreachiter1_target[foreachiter1];
  {
    this.tearDownMetadataTag(metadataTag, bean);
  }}
  
};


/**
 * @export
 * @param {org.apache.royale.crux.reflection.IMetadataTag} metadataTag
 * @param {org.apache.royale.crux.Bean} bean
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.tearDownMetadataTag = function(metadataTag, bean) {
};


/**
 * @protected
 * @param {org.apache.royale.crux.reflection.IMetadataTag} metadataTag
 * @return {org.apache.royale.crux.reflection.IMetadataTag}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.createMetadataTag = function(metadataTag) {
  var /** @type {org.apache.royale.crux.reflection.IMetadataTag} */ tag = new this.metadataClass();
  tag.copyFrom(metadataTag);
  return tag;
};


org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__metadataNames = function() {
  return this._metadataNames;
};


org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__metadataClass = function() {
  return this._metadataClass;
};


org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__priority = function() {
  return org.apache.royale.crux.processors.ProcessorPriority.DEFAULT;
};


Object.defineProperties(org.apache.royale.crux.processors.BaseMetadataProcessor.prototype, /** @lends {org.apache.royale.crux.processors.BaseMetadataProcessor.prototype} */ {
/**
  * @export
  * @type {Array} */
metadataNames: {
get: org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__metadataNames},
/**
  * @export
  * @type {Object} */
metadataClass: {
get: org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__metadataClass},
/**
  * @export
  * @type {number} */
priority: {
get: org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.get__priority}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BaseMetadataProcessor', qName: 'org.apache.royale.crux.processors.BaseMetadataProcessor', kind: 'class' }], interfaces: [org.apache.royale.crux.processors.IMetadataProcessor] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'metadataNames': { type: 'Array', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor'},
        'metadataClass': { type: 'Class', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor'},
        'priority': { type: 'int', access: 'readonly', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor'}
      };
    },
    methods: function () {
      return {
        'BaseMetadataProcessor': { type: '', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'Array', false ,'Class', true ]; }},
        'init': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'org.apache.royale.crux.ICrux', false ]; }},
        'setUpMetadataTags': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'Array', false ,'org.apache.royale.crux.Bean', false ]; }},
        'setUpMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }},
        'tearDownMetadataTags': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'Array', false ,'org.apache.royale.crux.Bean', false ]; }},
        'tearDownMetadataTag': { type: 'void', declaredBy: 'org.apache.royale.crux.processors.BaseMetadataProcessor', parameters: function () { return [ 'org.apache.royale.crux.reflection.IMetadataTag', false ,'org.apache.royale.crux.Bean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.processors.BaseMetadataProcessor.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./BaseMetadataProcessor.js.map
