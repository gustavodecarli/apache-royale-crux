/**
 * Generated by Apache Royale Compiler from org/apache/royale/events/ProgressEvent.as
 * org.apache.royale.events.ProgressEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.events.ProgressEvent');
/* Royale Dependency List: org.apache.royale.events.IRoyaleEvent*/

goog.require('org.apache.royale.events.Event');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {number=} current
 * @param {number=} total
 */
org.apache.royale.events.ProgressEvent = function(type, bubbles, cancelable, current, total) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  current = typeof current !== 'undefined' ? current : NaN;
  total = typeof total !== 'undefined' ? total : NaN;
  org.apache.royale.events.ProgressEvent.base(this, 'constructor', type, bubbles, cancelable);
  this.current = current;
  this.total = total;
};
goog.inherits(org.apache.royale.events.ProgressEvent, org.apache.royale.events.Event);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.events.ProgressEvent', org.apache.royale.events.ProgressEvent);


/**
 * @export
 * @type {number}
 */
org.apache.royale.events.ProgressEvent.prototype.current;


/**
 * @export
 * @type {number}
 */
org.apache.royale.events.ProgressEvent.prototype.total;


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.ProgressEvent.PROGRESS = "progress";


/**
 * @export
 * @const
 * @type {string}
 */
org.apache.royale.events.ProgressEvent.UPLOAD_PROGRESS = "uploadprogress";


/**
 * Create a copy/clone of the ProgressEvent object.
 *
 * @langversion 3.0
 * @playerversion Flash 10.2
 * @playerversion AIR 2.6
 * @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.events.ProgressEvent.prototype.cloneEvent = function() {
  return new org.apache.royale.events.ProgressEvent(this.type, this.bubbles, this.cancelable, this.current, this.total);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.events.ProgressEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ProgressEvent', qName: 'org.apache.royale.events.ProgressEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.events.ProgressEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'current': { type: 'Number', get_set: function (/** org.apache.royale.events.ProgressEvent */ inst, /** * */ v) {return v !== undefined ? inst.current = v : inst.current;}},
        'total': { type: 'Number', get_set: function (/** org.apache.royale.events.ProgressEvent */ inst, /** * */ v) {return v !== undefined ? inst.total = v : inst.total;}}
      };
    },
    methods: function () {
      return {
        'ProgressEvent': { type: '', declaredBy: 'org.apache.royale.events.ProgressEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'Number', true ,'Number', true ]; }},
        'cloneEvent': { type: 'org.apache.royale.events.IRoyaleEvent', declaredBy: 'org.apache.royale.events.ProgressEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.events.ProgressEvent.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./ProgressEvent.js.map
