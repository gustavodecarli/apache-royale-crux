/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/binding/BindingUtils.as
 * org.apache.royale.crux.binding.BindingUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.binding.BindingUtils');
/* Royale Dependency List: org.apache.royale.binding.PropertyWatcher,org.apache.royale.crux.binding.BindableChainInfo,org.apache.royale.crux.binding.CruxBinding,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.crux.binding.BindingUtils = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.binding.BindingUtils', org.apache.royale.crux.binding.BindingUtils);


/**
 *  Binds a public property or setter function, <code>prop</code> on the <code>site</code>
 *  Object, to a bindable property or property chain.
 *  If a CruxBinding instance is successfully created, <code>prop</code>
 *  is initialized to the current value of <code>chain</code>.
 *
 *  @asparam site The Object defining the root host for the property to be bound
 *  to <code>chain</code>.
 *
 *  @asparam prop The destination prop chain or a setter function for the destination value
 *
 *  @asparam host The object that hosts the property or property chain
 *  to be watched.
 *
 *  @asparam chain An Array specifying the chain to be watched.
 *
 *
 *  @asreturn A CruxBinding instance, if at least one property name has
 *  been specified to the <code>chain</code> argument; null otherwise.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} site
 * @param {Object} prop
 * @param {Object} host
 * @param {Array} chain
 * @return {org.apache.royale.crux.binding.CruxBinding}
 */
org.apache.royale.crux.binding.BindingUtils.bindProperty = function(site, prop, host, chain) {
  var /** @type {org.apache.royale.crux.binding.CruxBinding} */ cb = new org.apache.royale.crux.binding.CruxBinding();
  cb.setDocument(site);
  if (org.apache.royale.utils.Language.is(prop, String)) {
    prop = [prop];
  }
  if (org.apache.royale.utils.Language.is(prop, Array)) {
    cb.destinationData = prop;
  } else {
    cb.destinationFunction = org.apache.royale.utils.Language.as(prop, Function);
  }
  cb.sourceRoot = host;
  if (chain.length == 1) {
    cb.source = org.apache.royale.utils.Language.as(chain[0], org.apache.royale.crux.binding.BindableChainInfo, true).name;
  } else {
    var /** @type {Array} */ names = [];
    var foreachiter0_target = chain;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var info = foreachiter0_target[foreachiter0];
    
      names.push(info.name);}
    
    cb.source = names;
  }
  org.apache.royale.crux.binding.BindingUtils.setupWatchers(cb, chain);
  return cb;
};


/**
 * @royaleignorecoercion Function
 * @royaleignorecoercion String
 * @private
 * @param {org.apache.royale.crux.binding.CruxBinding} binding
 * @param {Array} watcherChain
 */
org.apache.royale.crux.binding.BindingUtils.setupWatchers = function(binding, watcherChain) {
  var /** @type {org.apache.royale.crux.binding.BindableChainInfo} */ watcherInfo = watcherChain[0];
  var /** @type {Object} */ parentObject = binding.sourceRoot;
  var /** @type {org.apache.royale.binding.PropertyWatcher} */ watcher;
  var /** @type {org.apache.royale.binding.PropertyWatcher} */ parentWatcher;
  while (watcherInfo) {
    var /** @type {Array} */ events = [];
    for (var /** @type {string} */ key in watcherInfo.changeEvents) {
      if (watcherInfo.changeEvents[key]) {
        events.push(key);
      }
    }
    watcher = new org.apache.royale.binding.PropertyWatcher(parentObject, watcherInfo.name, events.length == 1 ? events[0] : events, null);
    if (parentWatcher) {
      watcher.parentChanged(parentWatcher.value);
    } else {
      watcher.parentChanged(parentObject);
    }
    if (parentWatcher) {
      parentWatcher.addChild(watcher);
    }
    watcherInfo = watcherInfo.next;
    parentWatcher = watcher;
    if (!binding.rootWatcher)
      binding.rootWatcher = watcher;
  }
  watcher.addBinding(binding);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.binding.BindingUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BindingUtils', qName: 'org.apache.royale.crux.binding.BindingUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.binding.BindingUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|bindProperty': { type: 'org.apache.royale.crux.binding.CruxBinding', declaredBy: 'org.apache.royale.crux.binding.BindingUtils', parameters: function () { return [ 'Object', false ,'Object', false ,'Object', false ,'Array', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.binding.BindingUtils.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./BindingUtils.js.map
