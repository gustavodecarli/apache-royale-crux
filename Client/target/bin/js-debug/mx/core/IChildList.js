/**
 * Generated by Apache Royale Compiler from mx/core/IChildList.as
 * mx.core.IChildList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.core.IChildList');
/* Royale Dependency List: mx.core.IUIComponent,XML*/




/**
 * @interface
 */
mx.core.IChildList = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.core.IChildList', mx.core.IChildList);
/**  * @type {number}
 */mx.core.IChildList.prototype.numChildren;
/**
 *  Adds a child DisplayObject after the end of this child list.
 *
 *  <p>Calling <code>childList.addChild(child)</code> is the same as calling
 *  <code>childList.addChild(child, childList.numChildren)</code>
 *  After it has been added, its index of the new child
 *  will be <code>(child.numChildren - 1)</code></p>
 *
 *  @asparam child The DisplayObject to add as a child.
 *
 *  @asreturn The child that was added; this is the same
 *  as the argument passed in.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.addChild = function(child) {
};
/**
 *  Adds a child DisplayObject to this child list at the index specified.
 *  An index of 0 represents the beginning of the DisplayList,
 *  and an index of <code>numChildren</code> represents the end.
 *
 *  <p>Adding a child anywhere except at the end of a child list
 *  will increment the indexes of children that were previously
 *  at that index or at higher indices.</p>
 *
 *  @asparam child The DisplayObject to add as a child.
 *
 *  @asparam index The index to add the child at.
 *
 *  @asreturn The child that was added; this is the same
 *  as the <code>child</code> argument passed in.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @param {number} index
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.addChildAt = function(child, index) {
};
/**
 *  Removes the specified child DisplayObject from this child list.
 *
 *  <p>Removing a child anywhere except from the end of a child list
 *  will decrement the indexes of children that were at higher indices.</p>
 *
 *  <p>The removed child will have its parent set to null and will be
 *  garbage collected if no other references to it exist.</p>
 *
 *  @asparam child The DisplayObject to remove.
 *
 *  @asreturn The child that was removed; this is the same
 *  as the argument passed in.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.removeChild = function(child) {
};
/**
 *  Removes the child DisplayObject at the specified index
 *  from this child list.
 *
 *  <p>Removing a child anywhere except from the end of a child list
 *  will decrement the indexes of children that were at higher indices.</p>
 *
 *  <p>The removed child will have its parent set to null and will be
 *  garbage collected if no other references to it exist.</p>
 *
 *  @asparam index The child index of the DisplayObject to remove.
 *
 *  @asreturn The child that was removed.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.removeChildAt = function(index) {
};
/**
 *  Gets the child DisplayObject at the specified index in this child list.
 *
 *  @asparam index An integer from 0 to <code>(numChildren - 1)</code>
 *  that specifies the index of a child in this child list.
 *
 *  @asreturn The child at the specified index.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.getChildAt = function(index) {
};
/**
 *  Gets the child DisplayObject with the specified name
 *  in this child list.
 *
 *  @asparam name The name of the child to return.
 *
 *  @asreturn The child with the specified name.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string} name
 * @return {mx.core.IUIComponent}
 */
mx.core.IChildList.prototype.getChildByName = function(name) {
};
/**
 *  Gets the index of a specific child in this child list.
 *
 *  <p>The first child in the child list has an index of 0,
 *  the second child has an index of 1, and the last child
 *  has an index of <code>(numChildren - 1)</code>.</p>
 *
 *  <p>If <code>getChildIndex(myChild)</code> returns 5,
 *  then <code>myView.getChildAt(5)</code> returns
 *  <code>myChild</code>.</p>
 *
 *  <p>If you add a child by calling the <code>addChild()</code> method,
 *  the new child's index is equal to the largest index among the
 *  existing children plus one.</p>
 *
 *  <p>You can insert a child at a specified index by using the
 *  <code>addChildAt()</code> method
 *  In that case the children previously at that index and higher
 *  indices have their index increased by 1 so that all
 *  children are indexed from 0 to <code>(numChildren - 1)</code>.</p>
 *
 *  <p>If you remove a child by calling the <code>removeChild()</code>
 *  or <code>removeChildAt()</code> method, then the children
 *  at higher indices have their index decreased by 1 so that
 *  all children are indexed from 0 to <code>(numChildren - 1)</code>.</p>
 *
 *  <p>If you change a child's index by calling the
 *  <code>setChildIndex()</code> method, then the children between
 *  the old index and the new index, inclusive, have their indexes
 *  adjusted so that all children are indexed from
 *  0 to <code>(numChildren - 1)</code>.</p>
 *
 *  @asparam child The child whose index to get.
 *
 *  @asreturn The index of the child, which is an integer
 *  between 0 and <code>(numChildren - 1)</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @return {number}
 */
mx.core.IChildList.prototype.getChildIndex = function(child) {
};
/**
 *  Changes the index of a particular child in this child list.
 *  See the <code>getChildIndex()</code> method for a
 *  description of the child's index.
 * 
 *  @asparam child The child whose index to set.
 *
 *  @asparam newIndex The new index for the specified child.
 *  This must be an integer between zero and <code>(numChildren - 1)</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @param {number} newIndex
 */
mx.core.IChildList.prototype.setChildIndex = function(child, newIndex) {
};
/**
 *  Determines if a DisplayObject is in this child list,
 *  or is a descendant of an child in this child list.
 *
 *  @asparam child The DisplayObject to test.
 *
 *  @asreturn <code>true</code> if the DisplayObject is in this child list
 *  or is a descendant of an child in this child list;
 *  <code>false</code> otherwise.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.core.IUIComponent} child
 * @return {boolean}
 */
mx.core.IChildList.prototype.contains = function(child) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.core.IChildList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IChildList', qName: 'mx.core.IChildList', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.core.IChildList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'numChildren': { type: 'int', access: 'readonly', declaredBy: 'mx.core.IChildList'}
      };
    },
    methods: function () {
      return {
        'addChild': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ]; }},
        'addChildAt': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ,'int', false ]; }},
        'removeChild': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ]; }},
        'removeChildAt': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'int', false ]; }},
        'getChildAt': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'int', false ]; }},
        'getChildByName': { type: 'mx.core.IUIComponent', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'String', false ]; }},
        'getChildIndex': { type: 'int', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ]; }},
        'setChildIndex': { type: 'void', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ,'int', false ]; }},
        'contains': { type: 'Boolean', declaredBy: 'mx.core.IChildList', parameters: function () { return [ 'mx.core.IUIComponent', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.core.IChildList.prototype.ROYALE_COMPILE_FLAGS = 26;
