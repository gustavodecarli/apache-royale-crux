/**
 * Generated by Apache Royale Compiler from mx/rpc/AbstractInvoker.as
 * mx.rpc.AbstractInvoker
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.AbstractInvoker');
/* Royale Dependency List: mx.core.mx_internal,mx.logging.ILogger,mx.logging.Log,mx.messaging.errors.MessagingError,mx.messaging.events.MessageEvent,mx.messaging.events.MessageFaultEvent,mx.messaging.messages.AsyncMessage,mx.messaging.messages.IMessage,mx.netmon.NetworkMonitor,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.rpc.ActiveCalls,mx.rpc.AsyncDispatcher,mx.rpc.AsyncRequest,mx.rpc.AsyncToken,mx.rpc.Fault,mx.rpc.Responder,mx.rpc.events.AbstractEvent,mx.rpc.events.FaultEvent,mx.rpc.events.InvokeEvent,mx.rpc.events.ResultEvent,mx.utils.ObjectProxy,org.apache.royale.events.Event,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 *  @asprivate
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 */
mx.rpc.AbstractInvoker = function() {
  
  this.mx_rpc_AbstractInvoker_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.rpc.AbstractInvoker.base(this, 'constructor');
  this.mx_rpc_AbstractInvoker__log = mx.logging.Log.getLogger("mx.rpc.AbstractInvoker");
  this.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls = new mx.rpc.ActiveCalls();
};
goog.inherits(mx.rpc.AbstractInvoker, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.AbstractInvoker', mx.rpc.AbstractInvoker);


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.rpc.AbstractInvoker.prototype.mx_rpc_AbstractInvoker_resourceManager;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.AbstractInvoker.prototype.mx_rpc_AbstractInvoker__keepLastResult = true;


/**
 * @private
 * @type {boolean}
 */
mx.rpc.AbstractInvoker.prototype.mx_rpc_AbstractInvoker__keepLastResultSet = false;


/** @asprivate
 * sets keepLastResult if not set locally, typically by container Service or RemoteObject
 * @asparam value
 * @export
 * @param {boolean} value
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setKeepLastResultIfNotSet = function(value) {
  if (!this.mx_rpc_AbstractInvoker__keepLastResultSet)
    this.mx_rpc_AbstractInvoker__keepLastResult = value;
};


/**
 * @export
 * @type {Function}
 */
mx.rpc.AbstractInvoker.prototype.operationManager;


/**
 * @export
 * @type {Object}
 */
mx.rpc.AbstractInvoker.prototype.resultType;


/**
 * @export
 * @type {Object}
 */
mx.rpc.AbstractInvoker.prototype.resultElementType;


/**
 * @const
 * @type {string}
 */
mx.rpc.AbstractInvoker.http_$$www_adobe_com$2006$flex$mx$internal__BINDING_RESULT = "resultForBinding";


/**
 *  Cancels the last service invocation or an invokation with the specified ID.
 *  Even though the network operation may still continue, no result or fault event
 *  is dispatched.
 * 
 *  @asparam id The messageId of the invocation to cancel. Optional. If omitted, the
 *         last service invocation is canceled.
 *  
 *  @asreturn The AsyncToken associated with the call that is cancelled or null if no call was cancelled.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {string=} id
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.AbstractInvoker.prototype.cancel = function(id) {
  id = typeof id !== 'undefined' ? id : null;
  if (id != null)
    return this.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls.removeCall(id);
  else
    return this.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls.cancelLast();
};


/**
 *  Sets the <code>result</code> property of the invoker to <code>null</code>.
 *  This is useful when the result is a large object that is no longer being
 *  used.
 *
 *  @asparam fireBindingEvent Set to <code>true</code> if you want anything
 *  bound to the result to update. Otherwise, set to
 *  <code>false</code>.
 *  The default value is <code>true</code>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {boolean=} fireBindingEvent
 */
mx.rpc.AbstractInvoker.prototype.clearResult = function(fireBindingEvent) {
  fireBindingEvent = typeof fireBindingEvent !== 'undefined' ? fireBindingEvent : true;
  if (fireBindingEvent)
    this.setResult(null);
  else
    this.http_$$www_adobe_com$2006$flex$mx$internal___result = null;
};


/**
 *  This hook is exposed to update the lastResult property.  Since lastResult
 *  is ordinarily updated automatically by the service, you do not typically 
 *  call this.  It is used by managed services that want to ensure lastResult
 *  always points to "the" managed instance for a given identity even if the
 *  the service returns a new copy of the same object.  
 *
 *  @asparam result The new value for the lastResult property.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} result
 */
mx.rpc.AbstractInvoker.prototype.setResult = function(result) {
  this.http_$$www_adobe_com$2006$flex$mx$internal___result = result;
  this.dispatchEvent(new org.apache.royale.events.Event(mx.rpc.AbstractInvoker.http_$$www_adobe_com$2006$flex$mx$internal__BINDING_RESULT));
};


/**
 *  This method is overridden in subclasses to redirect the event to another
 *  class.
 *
 *  @asprivate
 * @export
 * @param {mx.rpc.events.AbstractEvent} event
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent = function(event) {
  event.http_$$www_adobe_com$2006$flex$mx$internal__callTokenResponders();
  if (!event.isDefaultPrevented()) {
    this.dispatchEvent(event);
  }
};


/**
 * Monitor an rpc event that is being dispatched
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.rpc.events.AbstractEvent} event
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__monitorRpcEvent = function(event) {
  if (mx.netmon.NetworkMonitor.isMonitoring()) {
    if (org.apache.royale.utils.Language.is(event, mx.rpc.events.ResultEvent)) {
      mx.netmon.NetworkMonitor.monitorResult(event.message, org.apache.royale.utils.Language.as(event, mx.rpc.events.ResultEvent, true).result);
    } else if (org.apache.royale.utils.Language.is(event, mx.rpc.events.FaultEvent)) {
      mx.netmon.NetworkMonitor.monitorFault(event.message, org.apache.royale.utils.Language.as(event, mx.rpc.events.FaultEvent, true).fault);
    }
  }
};


/**
 *  Take the MessageAckEvent and take the result, store it, and broadcast out
 *  appropriately.
 *
 *  @asprivate
 * @export
 * @param {mx.messaging.events.MessageEvent} event
 */
mx.rpc.AbstractInvoker.prototype.resultHandler = function(event) {
  var /** @type {mx.rpc.AsyncToken} */ token = this.http_$$www_adobe_com$2006$flex$mx$internal__preHandle(event);
  if (token == null)
    return;
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__processResult(event.message, token)) {
    this.dispatchEvent(new org.apache.royale.events.Event(mx.rpc.AbstractInvoker.http_$$www_adobe_com$2006$flex$mx$internal__BINDING_RESULT));
    var /** @type {mx.rpc.events.ResultEvent} */ resultEvent = mx.rpc.events.ResultEvent.createEvent(this.http_$$www_adobe_com$2006$flex$mx$internal___result, token, event.message);
    resultEvent.headers = this.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders;
    this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(resultEvent);
    if (!this.mx_rpc_AbstractInvoker__keepLastResult) {
      this.http_$$www_adobe_com$2006$flex$mx$internal___result = null;
    }
  }
};


/**
 *  Take the fault and convert it into a rpc.events.FaultEvent.
 *
 *  @asprivate
 * @export
 * @param {mx.messaging.events.MessageFaultEvent} event
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__faultHandler = function(event) {
  var /** @type {mx.messaging.events.MessageEvent} */ msgEvent = mx.messaging.events.MessageEvent.createEvent(mx.messaging.events.MessageEvent.MESSAGE, event.message);
  var /** @type {mx.rpc.AsyncToken} */ token = this.http_$$www_adobe_com$2006$flex$mx$internal__preHandle(msgEvent);
  if ((token == null) && (org.apache.royale.utils.Language.as(event.message, mx.messaging.messages.AsyncMessage, true).correlationId != null) && (org.apache.royale.utils.Language.as(event.message, mx.messaging.messages.AsyncMessage, true).correlationId != "") && (event.faultCode != "Client.Authentication")) {
    return;
  }
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__processFault(event.message, token)) {
    var /** @type {mx.rpc.Fault} */ fault = new mx.rpc.Fault(event.faultCode, event.faultString, event.faultDetail);
    fault.content = event.message.body;
    fault.rootCause = event.rootCause;
    var /** @type {mx.rpc.events.FaultEvent} */ faultEvent = mx.rpc.events.FaultEvent.createEvent(fault, token, event.message);
    faultEvent.headers = this.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders;
    this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(faultEvent);
  }
};


/**
 * Return the id for the NetworkMonitor.
 * @asprivate
 * @export
 * @return {string}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getNetmonId = function() {
  return null;
};


/**
 * @asprivate
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.rpc.AsyncToken=} token
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__invoke = function(message, token) {
  token = typeof token !== 'undefined' ? token : null;
  if (token == null)
    token = new mx.rpc.AsyncToken(message);
  else
    token.http_$$www_adobe_com$2006$flex$mx$internal__setMessage(message);
  this.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls.addCall(message.messageId, token);
  var /** @type {mx.rpc.Fault} */ fault;
  try {
    this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.invoke(message, new mx.rpc.Responder(org.apache.royale.utils.Language.closure(this.resultHandler, this, 'resultHandler'), org.apache.royale.utils.Language.closure(this.http_$$www_adobe_com$2006$flex$mx$internal__faultHandler, this, 'http://www.adobe.com/2006/flex/mx/internal::faultHandler')));
    this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent(mx.rpc.events.InvokeEvent.createEvent(token, message));
  } catch (e) {
    if (org.apache.royale.utils.Language.is(e, mx.messaging.errors.MessagingError)) {
      this.mx_rpc_AbstractInvoker__log.warn(e.toString());
      var /** @type {string} */ errorText = this.mx_rpc_AbstractInvoker_resourceManager.getString("rpc", "cannotConnectToDestination", [this.http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest.destination]);
      fault = new mx.rpc.Fault("InvokeFailed", e.toString(), errorText);
      new mx.rpc.AsyncDispatcher(org.apache.royale.utils.Language.closure(this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent, this, 'http://www.adobe.com/2006/flex/mx/internal::dispatchRpcEvent'), [mx.rpc.events.FaultEvent.createEvent(fault, token, message)], 10);
    } else {
      this.mx_rpc_AbstractInvoker__log.warn(e.toString());
      fault = new mx.rpc.Fault("InvokeFailed", e.message);
      new mx.rpc.AsyncDispatcher(org.apache.royale.utils.Language.closure(this.http_$$www_adobe_com$2006$flex$mx$internal__dispatchRpcEvent, this, 'http://www.adobe.com/2006/flex/mx/internal::dispatchRpcEvent'), [mx.rpc.events.FaultEvent.createEvent(fault, token, message)], 10);
    }
  }
  return token;
};


/**
 * Find the matching call object and pass it back.
 *
 * @asprivate
 * @export
 * @param {mx.messaging.events.MessageEvent} event
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__preHandle = function(event) {
  return this.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls.removeCall(org.apache.royale.utils.Language.as(event.message, mx.messaging.messages.AsyncMessage, true).correlationId);
};


/**
 * @asprivate
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.rpc.AsyncToken} token
 * @return {boolean}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__processFault = function(message, token) {
  return true;
};


/**
 * @asprivate
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.rpc.AsyncToken} token
 * @return {boolean}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__processResult = function(message, token) {
  var /** @type {Object} */ body = message.body;
  if (this.makeObjectsBindable && (body != null) && (org.apache.royale.reflection.getQualifiedClassName(body) == "Object")) {
    this.http_$$www_adobe_com$2006$flex$mx$internal___result = new mx.utils.ObjectProxy(body);
  } else {
    this.http_$$www_adobe_com$2006$flex$mx$internal___result = body;
  }
  return true;
};


/**
 * @type {mx.rpc.ActiveCalls}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls;


/**
 * @type {Array}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders;


/**
 * @type {Object}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal___result;


/**
 * @type {boolean}
 */
mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable;


/**
 * @private
 * @type {mx.rpc.AsyncRequest}
 */
mx.rpc.AbstractInvoker.prototype.mx_rpc_AbstractInvoker__asyncRequest;


/**
 * @private
 * @type {mx.logging.ILogger}
 */
mx.rpc.AbstractInvoker.prototype.mx_rpc_AbstractInvoker__log;


mx.rpc.AbstractInvoker.prototype.get__keepLastResult = function() {
  return this.mx_rpc_AbstractInvoker__keepLastResult;
};


mx.rpc.AbstractInvoker.prototype.set__keepLastResult = function(value) {
  this.mx_rpc_AbstractInvoker__keepLastResult = value;
  this.mx_rpc_AbstractInvoker__keepLastResultSet = true;
};


mx.rpc.AbstractInvoker.prototype.get__lastResult = function() {
  return this.http_$$www_adobe_com$2006$flex$mx$internal___result;
};


mx.rpc.AbstractInvoker.prototype.get__makeObjectsBindable = function() {
  return this.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable;
};


mx.rpc.AbstractInvoker.prototype.set__makeObjectsBindable = function(b) {
  this.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable = b;
};


mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__asyncRequest = function() {
  if (this.mx_rpc_AbstractInvoker__asyncRequest == null) {
    this.mx_rpc_AbstractInvoker__asyncRequest = new mx.rpc.AsyncRequest();
  }
  return this.mx_rpc_AbstractInvoker__asyncRequest;
};


mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__asyncRequest = function(req) {
  this.mx_rpc_AbstractInvoker__asyncRequest = req;
};


Object.defineProperties(mx.rpc.AbstractInvoker.prototype, /** @lends {mx.rpc.AbstractInvoker.prototype} */ {
/**
  * @export
  * @type {boolean} */
keepLastResult: {
get: mx.rpc.AbstractInvoker.prototype.get__keepLastResult,
set: mx.rpc.AbstractInvoker.prototype.set__keepLastResult},
/**
  * @export
  * @type {Object} */
lastResult: {
get: mx.rpc.AbstractInvoker.prototype.get__lastResult},
/**
  * @export
  * @type {boolean} */
makeObjectsBindable: {
get: mx.rpc.AbstractInvoker.prototype.get__makeObjectsBindable,
set: mx.rpc.AbstractInvoker.prototype.set__makeObjectsBindable},
/**
  * @export
  * @type {mx.rpc.AsyncRequest} */
http_$$www_adobe_com$2006$flex$mx$internal__asyncRequest: {
get: mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__asyncRequest,
set: mx.rpc.AbstractInvoker.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__asyncRequest}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.AbstractInvoker.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AbstractInvoker', qName: 'mx.rpc.AbstractInvoker', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.AbstractInvoker.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'operationManager': { type: 'Function', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.operationManager = v : inst.operationManager;}},
        'resultType': { type: 'Class', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.resultType = v : inst.resultType;}},
        'resultElementType': { type: 'Class', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.resultElementType = v : inst.resultElementType;}},
        'http://www.adobe.com/2006/flex/mx/internal::activeCalls': { type: 'mx.rpc.ActiveCalls', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__activeCalls;}},
        'http://www.adobe.com/2006/flex/mx/internal::_responseHeaders': { type: 'Array', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders = v : inst.http_$$www_adobe_com$2006$flex$mx$internal___responseHeaders;}},
        'http://www.adobe.com/2006/flex/mx/internal::_result': { type: 'Object', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal___result = v : inst.http_$$www_adobe_com$2006$flex$mx$internal___result;}},
        'http://www.adobe.com/2006/flex/mx/internal::_makeObjectsBindable': { type: 'Boolean', get_set: function (/** mx.rpc.AbstractInvoker */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable = v : inst.http_$$www_adobe_com$2006$flex$mx$internal___makeObjectsBindable;}}
      };
    },
    accessors: function () {
      return {
        'keepLastResult': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.AbstractInvoker'},
        'lastResult': { type: 'Object', access: 'readonly', declaredBy: 'mx.rpc.AbstractInvoker', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'resultForBinding' } ] } ]; }},
        'makeObjectsBindable': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.rpc.AbstractInvoker'},
        'http://www.adobe.com/2006/flex/mx/internal::asyncRequest': { type: 'mx.rpc.AsyncRequest', access: 'readwrite', declaredBy: 'mx.rpc.AbstractInvoker'}
      };
    },
    methods: function () {
      return {
        'AbstractInvoker': { type: '', declaredBy: 'mx.rpc.AbstractInvoker'},
        'http://www.adobe.com/2006/flex/mx/internal::setKeepLastResultIfNotSet': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'Boolean', false ]; }},
        'cancel': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'String', true ]; }},
        'clearResult': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'Boolean', true ]; }},
        'setResult': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'Object', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::dispatchRpcEvent': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.rpc.events.AbstractEvent', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::monitorRpcEvent': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.rpc.events.AbstractEvent', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::faultHandler': { type: 'void', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.messaging.events.MessageFaultEvent', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::getNetmonId': { type: 'String', declaredBy: 'mx.rpc.AbstractInvoker'},
        'http://www.adobe.com/2006/flex/mx/internal::invoke': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', true ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::preHandle': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.messaging.events.MessageEvent', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::processFault': { type: 'Boolean', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::processResult': { type: 'Boolean', declaredBy: 'mx.rpc.AbstractInvoker', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ,'mx.rpc.AsyncToken', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.AbstractInvoker.prototype.ROYALE_COMPILE_FLAGS = 26;
