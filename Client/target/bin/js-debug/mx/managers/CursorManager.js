/**
 * Generated by Apache Royale Compiler from mx/managers/CursorManager.as
 * mx.managers.CursorManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.managers.CursorManager');
/* Royale Dependency List: mx.managers.ICursorManager,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
mx.managers.CursorManager = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.managers.CursorManager', mx.managers.CursorManager);


/**
 * @private
 * @type {mx.managers.ICursorManager}
 */
mx.managers.CursorManager._impl;


/**
 *  @asprivate
 *  Returns the singleton instance of the implementation class
 *  that was registered for the specified interface,
 *  by looking up the class in the registry
 *  and calling its getInstance() method.
 *
 *  This method should not be called at static initialization time,
 *  because the factory class may not have called registerClass() yet.
 * @export
 * @param {string} interfaceName
 * @return {Object}
 */
mx.managers.CursorManager.getInstance = function(interfaceName) {
  var /** @type {Object} */ classMap = {};
  var /** @type {Object} */ c = classMap[interfaceName];
  if (!c) {
    throw new Error("No class registered for interface '" + interfaceName + "'.");
  }
  return c["getInstance"]();
};


/**
 *  Creates a new cursor and sets an optional priority for the cursor.
 *  Adds the new cursor to the cursor list.
 *
 *  @asparam cursorClass Class of the cursor to display.
 *
 *  @asparam priority Integer that specifies
 *  the priority level of the cursor.
 *  Possible values are <code>CursorManagerPriority.HIGH</code>,
 *  <code>CursorManagerPriority.MEDIUM</code>, and <code>CursorManagerPriority.LOW</code>.
 *
 *  @asparam xOffset Number that specifies the x offset
 *  of the cursor, in pixels, relative to the mouse pointer.
 *
 *  @asparam yOffset Number that specifies the y offset
 *  of the cursor, in pixels, relative to the mouse pointer.
 *
 *  @asparam setter The IUIComponent that set the cursor. Necessary (in multi-window environments) 
 *  to know which window needs to display the cursor. 
 *
 *  @asreturn The ID of the cursor.
 *
 *  @see mx.managers.CursorManagerPriority
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {Object} cursorClass
 * @param {number=} priority
 * @param {number=} xOffset
 * @param {number=} yOffset
 * @return {number}
 */
mx.managers.CursorManager.setCursor = function(cursorClass, priority, xOffset, yOffset) {
  priority = typeof priority !== 'undefined' ? priority : 2;
  xOffset = typeof xOffset !== 'undefined' ? xOffset : 0;
  yOffset = typeof yOffset !== 'undefined' ? yOffset : 0;
  return mx.managers.CursorManager["impl"].setCursor(cursorClass, priority, xOffset, yOffset);
};


/**
 *  Removes a cursor from the cursor list.
 *  If the cursor being removed is the currently displayed cursor,
 *  the CursorManager displays the next cursor in the list, if one exists.
 *  If the list becomes empty, the CursorManager displays
 *  the default system cursor.
 *
 *  @asparam cursorID ID of cursor to remove.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 * @param {number} cursorID
 */
mx.managers.CursorManager.removeCursor = function(cursorID) {
  mx.managers.CursorManager["impl"].removeCursor(cursorID);
};


/**
 *  Displays the busy cursor.
 *  The busy cursor has a priority of CursorManagerPriority.LOW.
 *  Therefore, if the cursor list contains a cursor
 *  with a higher priority, the busy cursor is not displayed 
 *  until you remove the higher priority cursor.
 *  To create a busy cursor at a higher priority level,
 *  use the <code>setCursor()</code> method.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 */
mx.managers.CursorManager.setBusyCursor = function() {
  document.body.style.cursor = "wait";
};


/**
 *  Removes the busy cursor from the cursor list.
 *  If other busy cursor requests are still active in the cursor list,
 *  which means you called the <code>setBusyCursor()</code> method more than once,
 *  a busy cursor does not disappear until you remove
 *  all busy cursors from the list.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 0.9.3
 * @export
 */
mx.managers.CursorManager.removeBusyCursor = function() {
  document.body.style.cursor = "auto";
};


mx.managers.CursorManager.get__impl = function() {
  if (!mx.managers.CursorManager._impl) {
    mx.managers.CursorManager._impl = org.apache.royale.utils.Language.as(mx.managers.CursorManager.getInstance("mx.managers::ICursorManager"), mx.managers.ICursorManager, true);
  }
  return mx.managers.CursorManager._impl;
};


mx.managers.CursorManager.get__currentCursorID = function() {
  return mx.managers.CursorManager["impl"].currentCursorID;
};


mx.managers.CursorManager.set__currentCursorID = function(value) {
  mx.managers.CursorManager["impl"].currentCursorID = value;
};


Object.defineProperties(mx.managers.CursorManager, /** @lends {mx.managers.CursorManager} */ {
/**
  * @export
  * @type {mx.managers.ICursorManager} */
impl: {
get: mx.managers.CursorManager.get__impl},
/**
  * @export
  * @type {number} */
currentCursorID: {
get: mx.managers.CursorManager.get__currentCursorID,
set: mx.managers.CursorManager.set__currentCursorID}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.managers.CursorManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CursorManager', qName: 'mx.managers.CursorManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.managers.CursorManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|currentCursorID': { type: 'int', access: 'readwrite', declaredBy: 'mx.managers.CursorManager'}
      };
    },
    methods: function () {
      return {
        '|getInstance': { type: 'Object', declaredBy: 'mx.managers.CursorManager', parameters: function () { return [ 'String', false ]; }},
        '|setCursor': { type: 'int', declaredBy: 'mx.managers.CursorManager', parameters: function () { return [ 'Class', false ,'int', true ,'Number', true ,'Number', true ]; }},
        '|removeCursor': { type: 'void', declaredBy: 'mx.managers.CursorManager', parameters: function () { return [ 'int', false ]; }},
        '|setBusyCursor': { type: 'void', declaredBy: 'mx.managers.CursorManager'},
        '|removeBusyCursor': { type: 'void', declaredBy: 'mx.managers.CursorManager'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.managers.CursorManager.prototype.ROYALE_COMPILE_FLAGS = 26;
