/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/binding/CruxBinding.as
 * org.apache.royale.crux.binding.CruxBinding
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.binding.CruxBinding');
/* Royale Dependency List: org.apache.royale.binding.PropertyWatcher,org.apache.royale.core.IStrand,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.binding.GenericBinding');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.binding.GenericBinding}
 */
org.apache.royale.crux.binding.CruxBinding = function() {
  org.apache.royale.crux.binding.CruxBinding.base(this, 'constructor');
};
goog.inherits(org.apache.royale.crux.binding.CruxBinding, org.apache.royale.binding.GenericBinding);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.binding.CruxBinding', org.apache.royale.crux.binding.CruxBinding);


/**
 * @export
 * @type {org.apache.royale.binding.PropertyWatcher}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.rootWatcher;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.sourceRoot;


/**
 * @royaleignorecoercion Array
 * @royaleignorecoercion Function
 * @private
 * @return {Object}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.org_apache_royale_crux_binding_CruxBinding_getValueFromSource = function() {
  if (org.apache.royale.utils.Language.is(this.source, Array)) {
    var /** @type {Array} */ arr = this.source;
    var /** @type {number} */ n = (arr.length) >> 0;
    var /** @type {Object} */ obj;
    obj = this.sourceRoot[arr[0]];
    if (obj == null)
      return null;
    for (var /** @type {number} */ i = 1; i < n; i++) {
      obj = obj[arr[i]];
      if (obj == null)
        return null;
    }
    return obj;
  } else if (org.apache.royale.utils.Language.is(this.source, String)) {
    obj = this.sourceRoot[this.source];
    return obj;
  }
  return null;
};


/**
 * @royaleignorecoercion Array
 * @private
 * @param {Object} value
 */
org.apache.royale.crux.binding.CruxBinding.prototype.org_apache_royale_crux_binding_CruxBinding_applyValue = function(value) {
  if (this.destinationFunction != null) {
    this.destinationFunction.apply(this.document, [value]);
  } else if (org.apache.royale.utils.Language.is(this.destinationData, Array)) {
    var /** @type {Array} */ arr = this.destinationData;
    var /** @type {number} */ n = (arr.length) >> 0;
    var /** @type {Object} */ obj = this.document;
    for (var /** @type {number} */ i = 1; i < n - 1; i++) {
      obj = obj[arr[i]];
      if (obj == null)
        return;
    }
    obj[arr[n - 1]] = value;
  }
};


/**
 *  The method that gets called by the watcher when the value
 *  may have changed.
 *
 *  @asparam value The new value.
 *  @asparam getFromSource true if the value parameter should be ignored, and an
 *  attempt should be made to get the value directly from the source object.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @export
 * @override
 */
org.apache.royale.crux.binding.CruxBinding.prototype.valueChanged = function(value, getFromSource) {
  try {
    if (getFromSource) {
      value = this.org_apache_royale_crux_binding_CruxBinding_getValueFromSource();
    }
    this.org_apache_royale_crux_binding_CruxBinding_applyValue(value);
  } catch (e) {
  }
};


/**
 * @export
 */
org.apache.royale.crux.binding.CruxBinding.prototype.unwatch = function() {
  if (this.rootWatcher) {
    this.rootWatcher.parentChanged(null);
  }
};


org.apache.royale.crux.binding.CruxBinding.prototype.set__strand = function(value) {
  throw new Error('this is not intended for use as a Bead');
};


Object.defineProperties(org.apache.royale.crux.binding.CruxBinding.prototype, /** @lends {org.apache.royale.crux.binding.CruxBinding.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: org.apache.royale.crux.binding.CruxBinding.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CruxBinding', qName: 'org.apache.royale.crux.binding.CruxBinding', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'rootWatcher': { type: 'org.apache.royale.binding.PropertyWatcher', get_set: function (/** org.apache.royale.crux.binding.CruxBinding */ inst, /** * */ v) {return v !== undefined ? inst.rootWatcher = v : inst.rootWatcher;}},
        'sourceRoot': { type: 'Object', get_set: function (/** org.apache.royale.crux.binding.CruxBinding */ inst, /** * */ v) {return v !== undefined ? inst.sourceRoot = v : inst.sourceRoot;}}
      };
    },
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.crux.binding.CruxBinding'}
      };
    },
    methods: function () {
      return {
        'CruxBinding': { type: '', declaredBy: 'org.apache.royale.crux.binding.CruxBinding'},
        'valueChanged': { type: 'void', declaredBy: 'org.apache.royale.crux.binding.CruxBinding', parameters: function () { return [ 'Object', false ,'Boolean', false ]; }},
        'unwatch': { type: 'void', declaredBy: 'org.apache.royale.crux.binding.CruxBinding'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.binding.CruxBinding.prototype.ROYALE_COMPILE_FLAGS = 10;
