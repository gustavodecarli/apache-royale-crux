/**
 * Generated by Apache Royale Compiler from org/apache/royale/core/StatesWithTransitionsImpl.as
 * org.apache.royale.core.StatesWithTransitionsImpl
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.core.StatesWithTransitionsImpl');
/* Royale Dependency List: org.apache.royale.core.IChild,org.apache.royale.core.IContainer,org.apache.royale.core.IParent,org.apache.royale.core.IStrand,org.apache.royale.effects.Effect,org.apache.royale.events.Event,org.apache.royale.events.IEventDispatcher,org.apache.royale.events.ValueChangeEvent,org.apache.royale.states.AddItems,org.apache.royale.states.SetEventHandler,org.apache.royale.states.SetProperty,org.apache.royale.states.State,org.apache.royale.states.Transition,org.apache.royale.utils.MXMLDataInterpreter,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.core.IBead');
goog.require('org.apache.royale.core.IStatesImpl');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IStatesImpl}
 * @implements {org.apache.royale.core.IBead}
 */
org.apache.royale.core.StatesWithTransitionsImpl = function() {
  org.apache.royale.core.StatesWithTransitionsImpl.base(this, 'constructor');
};
goog.inherits(org.apache.royale.core.StatesWithTransitionsImpl, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.core.StatesWithTransitionsImpl', org.apache.royale.core.StatesWithTransitionsImpl);


/**
 * @private
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl__strand;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_sawInitComplete;


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.core.IStatesObject
 * @private
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_initialStateHandler = function(event) {
  this.org_apache_royale_core_StatesWithTransitionsImpl_sawInitComplete = true;
  this.org_apache_royale_core_StatesWithTransitionsImpl_stateChangeHandler(new org.apache.royale.events.ValueChangeEvent("currentStateChange", false, false, null, this.org_apache_royale_core_StatesWithTransitionsImpl__strand.currentState));
};


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.core.IStatesObject
 * @private
 * @param {org.apache.royale.events.ValueChangeEvent} event
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_stateChangeHandler = function(event) {
  if (!this.org_apache_royale_core_StatesWithTransitionsImpl_sawInitComplete)
    return;
  this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects = [];
  var /** @type {Object} */ doc = this.org_apache_royale_core_StatesWithTransitionsImpl__strand;
  var /** @type {Array} */ transitions = doc.transitions;
  if (transitions && transitions.length > 0) {
    var foreachiter0_target = transitions;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var t = foreachiter0_target[foreachiter0];
    {
      if (t.fromState == "*" || t.fromState == event.oldValue) {
        if (t.toState == "*" || t.toState == event.newValue) {
          var /** @type {Array} */ theseEffects = t.effects.slice();
          var foreachiter1_target = theseEffects;
          for (var foreachiter1 in foreachiter1_target) 
          {
          var e = foreachiter1_target[foreachiter1];
          {
            e.captureStartValues();
          }}
          
          this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects = this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.concat.apply(this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects, theseEffects);
        }
      }
    }}
    
  }
  var /** @type {Array} */ arr = doc.states;
  var /** @type {org.apache.royale.states.State} */ oldState;
  var /** @type {org.apache.royale.states.State} */ newState;
  var foreachiter2_target = arr;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var s = foreachiter2_target[foreachiter2];
  {
    if (s.name == event.oldValue) {
      oldState = s;
      break;
    }
  }}
  
  var foreachiter3_target = arr;
  for (var foreachiter3 in foreachiter3_target) 
  {
  s = foreachiter3_target[foreachiter3];
  {
    if (s.name == event.newValue) {
      newState = s;
      break;
    }
  }}
  
  if (oldState)
    this.org_apache_royale_core_StatesWithTransitionsImpl_revert(oldState, newState);
  if (newState)
    this.org_apache_royale_core_StatesWithTransitionsImpl_apply(oldState, newState);
  if (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects && this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.length > 0) {
    var foreachiter4_target = this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects;
    for (var foreachiter4 in foreachiter4_target) 
    {
    e = foreachiter4_target[foreachiter4];
    {
      e.captureEndValues();
    }}
    
  }
  var /** @type {boolean} */ playingTransition;
  if (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects && this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.length > 0) {
    playingTransition = true;
    var foreachiter5_target = this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects;
    for (var foreachiter5 in foreachiter5_target) 
    {
    e = foreachiter5_target[foreachiter5];
    {
      e.addEventListener(org.apache.royale.effects.Effect.EFFECT_END, org.apache.royale.utils.Language.closure(this.org_apache_royale_core_StatesWithTransitionsImpl_effectEndHandler, this, 'effectEndHandler'));
      e.play();
    }}
    
  }
  if (!playingTransition)
    doc.dispatchEvent(new org.apache.royale.events.Event("stateChangeComplete"));
};


/**
 * @private
 * @type {Array}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects;


/**
 *  @asprivate
 *  @royaleignorecoercion org.apache.royale.core.IStatesObject
 * @private
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_effectEndHandler = function(event) {
  if (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects == null)
    return;
  var /** @type {number} */ n = (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.length) >> 0;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    event.target.removeEventListener(org.apache.royale.effects.Effect.EFFECT_END, org.apache.royale.utils.Language.closure(this.org_apache_royale_core_StatesWithTransitionsImpl_effectEndHandler, this, 'effectEndHandler'));
    if (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects[i] == event.target)
      this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.splice(i, 1);
  }
  if (this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects.length == 0) {
    this.org_apache_royale_core_StatesWithTransitionsImpl_transitionEffects = null;
    var /** @type {Object} */ doc = this.org_apache_royale_core_StatesWithTransitionsImpl__strand;
    doc.dispatchEvent(new org.apache.royale.events.Event("stateChangeComplete"));
  }
};


/**
 * @royaleignorecoercion Array
 * @royaleignorecoercion org.apache.royale.states.AddItems
 * @private
 * @param {org.apache.royale.core.IChild} child
 * @param {org.apache.royale.states.State} s
 * @return {boolean}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_isItemInState = function(child, s) {
  if (s == null)
    return false;
  var /** @type {Array} */ arr = s.overrides;
  var foreachiter6_target = arr;
  for (var foreachiter6 in foreachiter6_target) 
  {
  var o = foreachiter6_target[foreachiter6];
  {
    if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.AddItems)) {
      var /** @type {Object} */ ai = o;
      if (ai.items == null) {
        ai.items = ai.itemsDescriptor.items;
        if (ai.items == null) {
          ai.items = org.apache.royale.utils.MXMLDataInterpreter.generateMXMLArray(ai.document, null, ai.itemsDescriptor.descriptor);
          ai.itemsDescriptor.items = ai.items;
        }
      }
      var foreachiter7_target = ai.items;
      for (var foreachiter7 in foreachiter7_target) 
      {
      var item = foreachiter7_target[foreachiter7];
      {
        if (item == child)
          return true;
      }}
      
    }
  }}
  
  return false;
};


/**
 * @royaleignorecoercion Array
 * @royaleignorecoercion org.apache.royale.states.AddItems
 * @royaleignorecoercion org.apache.royale.core.IParent
 * @royaleignorecoercion org.apache.royale.core.IContainer
 * @royaleignorecoercion org.apache.royale.states.SetProperty
 * @royaleignorecoercion org.apache.royale.states.SetEventHandler
 * @private
 * @param {org.apache.royale.states.State} s
 * @param {org.apache.royale.states.State} newState
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_revert = function(s, newState) {
  var /** @type {Array} */ arr = s.overrides;
  var foreachiter8_target = arr;
  for (var foreachiter8 in foreachiter8_target) 
  {
  var o = foreachiter8_target[foreachiter8];
  {
    if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.AddItems)) {
      var /** @type {Object} */ ai = o;
      var /** @type {boolean} */ childrenAdded = false;
      var foreachiter9_target = ai.items;
      for (var foreachiter9 in foreachiter9_target) 
      {
      var item = foreachiter9_target[foreachiter9];
      {
        if (!this.org_apache_royale_core_StatesWithTransitionsImpl_isItemInState(item, newState)) {
          var /** @type {Object} */ parent = item.parent;
          parent.removeElement(item);
          childrenAdded = true;
        }
      }}
      
      if (childrenAdded && org.apache.royale.utils.Language.is(parent, org.apache.royale.core.IContainer))
        parent.childrenAdded();
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetProperty)) {
      var /** @type {Object} */ sp = o;
      if (sp.target != null)
        sp.document[sp.target][sp.name] = sp.previousValue;
      else
        sp.document[sp.name] = sp.previousValue;
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetEventHandler)) {
      var /** @type {Object} */ seh = o;
      if (seh.target != null) {
        seh.document[seh.target].removeEventListener(seh.name, seh.handlerFunction);
      } else {
        seh.document.removeEventListener(seh.name, seh.handlerFunction);
      }
    }
  }}
  
};


/**
 * @royaleignorecoercion Array
 * @royaleignorecoercion org.apache.royale.states.AddItems
 * @royaleignorecoercion org.apache.royale.core.IChild
 * @royaleignorecoercion org.apache.royale.core.IParent
 * @royaleignorecoercion org.apache.royale.core.IContainer
 * @royaleignorecoercion org.apache.royale.states.SetProperty
 * @royaleignorecoercion org.apache.royale.states.SetEventHandler
 * @private
 * @param {org.apache.royale.states.State} oldState
 * @param {org.apache.royale.states.State} s
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.org_apache_royale_core_StatesWithTransitionsImpl_apply = function(oldState, s) {
  var /** @type {Array} */ arr = s.overrides;
  var foreachiter10_target = arr;
  for (var foreachiter10 in foreachiter10_target) 
  {
  var o = foreachiter10_target[foreachiter10];
  {
    if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.AddItems)) {
      var /** @type {Object} */ ai = o;
      if (ai.items == null) {
        ai.items = ai.itemsDescriptor.items;
        if (ai.items == null) {
          ai.items = org.apache.royale.utils.MXMLDataInterpreter.generateMXMLArray(ai.document, null, ai.itemsDescriptor.descriptor);
          ai.itemsDescriptor.items = ai.items;
        }
      }
      var /** @type {boolean} */ childrenAdded = false;
      var foreachiter11_target = ai.items;
      for (var foreachiter11 in foreachiter11_target) 
      {
      var item = foreachiter11_target[foreachiter11];
      {
        if (!this.org_apache_royale_core_StatesWithTransitionsImpl_isItemInState(item, oldState)) {
          var /** @type {Object} */ parent = ai.document;
          if (ai.destination != null)
            parent = parent[ai.destination];
          if (ai.relativeTo != null) {
            var /** @type {Object} */ child = ai.document[ai.relativeTo];
            if (ai.destination == null)
              parent = child.parent;
            if (parent != null) {
              var /** @type {number} */ index = parent.getElementIndex(child);
              if (ai.position == "after")
                index++;
              parent.addElementAt(item, index);
              childrenAdded = true;
            }
          } else if (ai.position == "first") {
            parent.addElementAt(item, 0);
          } else {
            parent.addElement(item);
            childrenAdded = true;
          }
        }
      }}
      
      if (childrenAdded && org.apache.royale.utils.Language.is(parent, org.apache.royale.core.IContainer))
        parent.childrenAdded();
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetProperty)) {
      var /** @type {Object} */ sp = o;
      if (sp.target != null) {
        sp.previousValue = sp.document[sp.target][sp.name];
        sp.document[sp.target][sp.name] = sp.value;
      } else {
        sp.previousValue = sp.document[sp.name];
        sp.document[sp.name] = sp.value;
      }
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetEventHandler)) {
      var /** @type {Object} */ seh = o;
      if (seh.target != null) {
        seh.document[seh.target].addEventListener(seh.name, seh.handlerFunction);
      } else {
        seh.document.addEventListener(seh.name, seh.handlerFunction);
      }
    }
  }}
  
};


org.apache.royale.core.StatesWithTransitionsImpl.prototype.set__strand = function(value) {
  this.org_apache_royale_core_StatesWithTransitionsImpl__strand = value;
  this.org_apache_royale_core_StatesWithTransitionsImpl__strand.addEventListener("currentStateChange", org.apache.royale.utils.Language.closure(this.org_apache_royale_core_StatesWithTransitionsImpl_stateChangeHandler, this, 'stateChangeHandler'));
  this.org_apache_royale_core_StatesWithTransitionsImpl__strand.addEventListener("initComplete", org.apache.royale.utils.Language.closure(this.org_apache_royale_core_StatesWithTransitionsImpl_initialStateHandler, this, 'initialStateHandler'));
};


Object.defineProperties(org.apache.royale.core.StatesWithTransitionsImpl.prototype, /** @lends {org.apache.royale.core.StatesWithTransitionsImpl.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: org.apache.royale.core.StatesWithTransitionsImpl.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'StatesWithTransitionsImpl', qName: 'org.apache.royale.core.StatesWithTransitionsImpl', kind: 'class' }], interfaces: [org.apache.royale.core.IStatesImpl, org.apache.royale.core.IBead] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.core.StatesWithTransitionsImpl'}
      };
    },
    methods: function () {
      return {
        'StatesWithTransitionsImpl': { type: '', declaredBy: 'org.apache.royale.core.StatesWithTransitionsImpl'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.core.StatesWithTransitionsImpl.prototype.ROYALE_COMPILE_FLAGS = 10;
