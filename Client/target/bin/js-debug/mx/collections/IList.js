/**
 * Generated by Apache Royale Compiler from mx/collections/IList.as
 * mx.collections.IList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.collections.IList');
/* Royale Dependency List: XML*/

goog.require('org.apache.royale.events.IEventDispatcher');



/**
 * @interface
 * @extends {org.apache.royale.events.IEventDispatcher}
 */
mx.collections.IList = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.IList', mx.collections.IList);
/**  * @type {number}
 */mx.collections.IList.prototype.length;
/**
 *  Adds the specified item to the end of the list.
 *  Equivalent to <code>addItemAt(item, length)</code>.
 *
 *  @asparam item The item to add.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.IList.prototype.addItem = function(item) {
};
/**
 *  Adds the item at the specified index.  
 *  The index of any item greater than the index of the added item is increased by one.  
 *  If the the specified index is less than zero or greater than the length
 *  of the list, a RangeError is thrown.
 * 
 *  @asparam item The item to place at the index.
 *
 *  @asparam index The index at which to place the item.
 *
 *  @throws RangeError if index is less than 0 or greater than the length of the list. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 */
mx.collections.IList.prototype.addItemAt = function(item, index) {
};
/**
 *  Gets the item at the specified index.
 * 
 *  @asparam index The index in the list from which to retrieve the item.
 *
 *  @asparam prefetch An <code>int</code> indicating both the direction
 *  and number of items to fetch during the request if the item is
 *  not local.
 *
 *  @asreturn The item at that index, or <code>null</code> if there is none.
 *
 *  @throws mx.collections.errors.ItemPendingError if the data for that index needs to be 
 *  loaded from a remote location.
 *
 *  @throws RangeError if <code>index &lt; 0</code>
 *  or <code>index >= length</code>.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @param {number=} prefetch
 * @return {Object}
 */
mx.collections.IList.prototype.getItemAt = function(index, prefetch) {
};
/**
 *  Returns the index of the item if it is in the list such that
 *  getItemAt(index) == item.
 * 
 *  <p>Note: unlike <code>IViewCursor.find<i>xxx</i>()</code> methods,
 *  The <code>getItemIndex()</code> method cannot take a parameter with 
 *  only a subset of the fields in the item being serched for; 
 *  this method always searches for an item that exactly matches
 *  the input parameter.</p>
 * 
 *  @asparam item The item to find.
 *
 *  @asreturn The index of the item, or -1 if the item is not in the list.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @return {number}
 */
mx.collections.IList.prototype.getItemIndex = function(item) {
};
/**
 *  Notifies the view that an item has been updated.  
 *  This is useful if the contents of the view do not implement 
 *  <code>IEventDispatcher</code> and dispatches a 
 *  <code>PropertyChangeEvent</code>.  
 *  If a property is specified the view may be able to optimize its 
 *  notification mechanism.
 *  Otherwise it may choose to simply refresh the whole view.
 *
 *  @asparam item The item within the view that was updated.
 *
 *  @asparam property The name of the property that was updated.
 *
 *  @asparam oldValue The old value of that property. (If property was null,
 *  this can be the old value of the item.)
 *
 *  @asparam newValue The new value of that property. (If property was null,
 *  there's no need to specify this as the item is assumed to be
 *  the new value.)
 *
 *  @see mx.events.CollectionEvent
 *  @see mx.events.PropertyChangeEvent
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {Object=} property
 * @param {Object=} oldValue
 * @param {Object=} newValue
 */
mx.collections.IList.prototype.itemUpdated = function(item, property, oldValue, newValue) {
};
mx.collections.IList.prototype.removeAll = function() {
};
/**
 *  Removes the item at the specified index and returns it.  
 *  Any items that were after this index are now one index earlier.
 *
 *  @asparam index The index from which to remove the item.
 *
 *  @asreturn The item that was removed.
 *
 *  @throws RangeError is index is less than 0 or greater than length. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {Object}
 */
mx.collections.IList.prototype.removeItemAt = function(index) {
};
/**
 *  Places the item at the specified index.  
 *  If an item was already at that index the new item will replace it
 *  and it will be returned.
 *
 *  @asparam item The new item to be placed at the specified index.
 *
 *  @asparam index The index at which to place the item.
 *
 *  @asreturn The item that was replaced, or <code>null</code> if none.
 *
 *  @throws RangeError if index is less than 0 or greater than length.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 * @return {Object}
 */
mx.collections.IList.prototype.setItemAt = function(item, index) {
};
/**
 *  Returns an Array that is populated in the same order as the IList
 *  implementation.
 *  This method can throw an ItemPendingError.
 *
 *  @asreturn The array.
 *  
 *  @throws mx.collections.errors.ItemPendingError If the data is not yet completely loaded
 *  from a remote location.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Array}
 */
mx.collections.IList.prototype.toArray = function() {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.IList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'IList', qName: 'mx.collections.IList', kind: 'interface' }], interfaces: [org.apache.royale.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.IList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'length': { type: 'int', access: 'readonly', declaredBy: 'mx.collections.IList'}
      };
    },
    methods: function () {
      return {
        'addItem': { type: 'void', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'Object', false ]; }},
        'addItemAt': { type: 'void', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'getItemAt': { type: 'Object', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'int', false ,'int', true ]; }},
        'getItemIndex': { type: 'int', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'Object', false ]; }},
        'itemUpdated': { type: 'void', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'Object', false ,'Object', true ,'Object', true ,'Object', true ]; }},
        'removeAll': { type: 'void', declaredBy: 'mx.collections.IList'},
        'removeItemAt': { type: 'Object', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'int', false ]; }},
        'setItemAt': { type: 'Object', declaredBy: 'mx.collections.IList', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'toArray': { type: 'Array', declaredBy: 'mx.collections.IList'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.IList.prototype.ROYALE_COMPILE_FLAGS = 26;
