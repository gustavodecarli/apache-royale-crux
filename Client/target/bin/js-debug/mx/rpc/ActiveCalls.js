/**
 * Generated by Apache Royale Compiler from mx/rpc/ActiveCalls.as
 * mx.rpc.ActiveCalls
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.ActiveCalls');
/* Royale Dependency List: mx.core.mx_internal,mx.rpc.AsyncToken,org.apache.royale.utils.Language,XML*/




/**
 * @constructor
 */
mx.rpc.ActiveCalls = function() {
  ;
  this.mx_rpc_ActiveCalls_calls = {};
  this.mx_rpc_ActiveCalls_callOrder = [];
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.ActiveCalls', mx.rpc.ActiveCalls);


/**
 * @private
 * @type {Object}
 */
mx.rpc.ActiveCalls.prototype.mx_rpc_ActiveCalls_calls;


/**
 * @private
 * @type {Array}
 */
mx.rpc.ActiveCalls.prototype.mx_rpc_ActiveCalls_callOrder;


/**
 * @export
 * @param {string} id
 * @param {mx.rpc.AsyncToken} token
 */
mx.rpc.ActiveCalls.prototype.addCall = function(id, token) {
  this.mx_rpc_ActiveCalls_calls[id] = token;
  this.mx_rpc_ActiveCalls_callOrder.push(id);
};


/**
 * @export
 * @return {Array}
 */
mx.rpc.ActiveCalls.prototype.getAllMessages = function() {
  var /** @type {Array} */ msgs = [];
  for (var /** @type {string} */ id in this.mx_rpc_ActiveCalls_calls) {
    msgs.push(this.mx_rpc_ActiveCalls_calls[id]);
  }
  return msgs;
};


/**
 * @export
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.ActiveCalls.prototype.cancelLast = function() {
  if (this.mx_rpc_ActiveCalls_callOrder.length > 0) {
    return this.removeCall(org.apache.royale.utils.Language.as(this.mx_rpc_ActiveCalls_callOrder[this.mx_rpc_ActiveCalls_callOrder.length - 1], String));
  }
  return null;
};


/**
 * @export
 * @return {boolean}
 */
mx.rpc.ActiveCalls.prototype.hasActiveCalls = function() {
  return this.mx_rpc_ActiveCalls_callOrder.length > 0;
};


/**
 * @export
 * @param {string} id
 * @return {mx.rpc.AsyncToken}
 */
mx.rpc.ActiveCalls.prototype.removeCall = function(id) {
  var /** @type {mx.rpc.AsyncToken} */ token = this.mx_rpc_ActiveCalls_calls[id];
  if (token != null) {
    delete this.mx_rpc_ActiveCalls_calls[id];
    this.mx_rpc_ActiveCalls_callOrder.splice(this.mx_rpc_ActiveCalls_callOrder.lastIndexOf(id), 1);
  }
  return token;
};


/**
 * @export
 * @param {string} id
 * @return {boolean}
 */
mx.rpc.ActiveCalls.prototype.wasLastCall = function(id) {
  if (this.mx_rpc_ActiveCalls_callOrder.length > 0) {
    return this.mx_rpc_ActiveCalls_callOrder[this.mx_rpc_ActiveCalls_callOrder.length - 1] == id;
  }
  return false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.ActiveCalls.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ActiveCalls', qName: 'mx.rpc.ActiveCalls', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.ActiveCalls.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'ActiveCalls': { type: '', declaredBy: 'mx.rpc.ActiveCalls'},
        'addCall': { type: 'void', declaredBy: 'mx.rpc.ActiveCalls', parameters: function () { return [ 'String', false ,'mx.rpc.AsyncToken', false ]; }},
        'getAllMessages': { type: 'Array', declaredBy: 'mx.rpc.ActiveCalls'},
        'cancelLast': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.ActiveCalls'},
        'hasActiveCalls': { type: 'Boolean', declaredBy: 'mx.rpc.ActiveCalls'},
        'removeCall': { type: 'mx.rpc.AsyncToken', declaredBy: 'mx.rpc.ActiveCalls', parameters: function () { return [ 'String', false ]; }},
        'wasLastCall': { type: 'Boolean', declaredBy: 'mx.rpc.ActiveCalls', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.ActiveCalls.prototype.ROYALE_COMPILE_FLAGS = 26;
