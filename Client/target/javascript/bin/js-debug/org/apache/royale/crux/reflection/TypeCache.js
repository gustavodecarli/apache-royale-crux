/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/reflection/TypeCache.as
 * org.apache.royale.crux.reflection.TypeCache
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.reflection.TypeCache');
/* Royale Dependency List: org.apache.royale.crux.reflection.TypeDescriptor,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.describeType,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.reflection.utils.getStaticConstantsByConvention,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
org.apache.royale.crux.reflection.TypeCache = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.reflection.TypeCache', org.apache.royale.crux.reflection.TypeCache);


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.reflection.TypeCache.typeDescriptors;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.reflection.TypeCache.staticConstantCollections;


/**
 * Will return TypeDescriptor instance either retrieved from cache or freshly
 * constructed from <code>describeType</code> call.
 *
 * @asparam target Object whose type is to be inspected and returned.
 * @asparam domain to associate the typeDescriptors with
 * 
 * @asreturn TypeDescriptor instance representing the type of the object that was passed in.
 * @export
 * @param {Object} target
 * @return {org.apache.royale.crux.reflection.TypeDescriptor}
 */
org.apache.royale.crux.reflection.TypeCache.getTypeDescriptor = function(target) {
  org.apache.royale.crux.reflection.TypeCache.typeDescriptors = org.apache.royale.crux.reflection.TypeCache.typeDescriptors || {};
  var /** @type {string} */ className = org.apache.royale.reflection.getQualifiedClassName(target);
  if (org.apache.royale.crux.reflection.TypeCache.typeDescriptors[className] != null)
    return org.apache.royale.crux.reflection.TypeCache.typeDescriptors[className];
  var /** @type {org.apache.royale.reflection.TypeDefinition} */ definition = org.apache.royale.reflection.describeType(target);
  var /** @type {org.apache.royale.crux.reflection.TypeDescriptor} */ typeDescriptor = new org.apache.royale.crux.reflection.TypeDescriptor();
  org.apache.royale.crux.reflection.TypeCache.typeDescriptors[className] = typeDescriptor.fromTypeDefinition(definition);
  return org.apache.royale.crux.reflection.TypeCache.typeDescriptors[className];
};


/**
 * Will return static constant array instance either retrieved from cache or freshly
 * constructed from a utility reflection method call.
 *
 * @asparam target Class whose type is to be inspected for return value.
 *
 * @asreturn TypeDescriptor instance representing the type of the object that was passed in.
 * @export
 * @param {Object} target
 * @return {Array}
 */
org.apache.royale.crux.reflection.TypeCache.getStaticConstantCollection = function(target) {
  var /** @type {Object} */ classRef = org.apache.royale.utils.Language.is(target, org.apache.royale.utils.Language.synthType('Class')) ? org.apache.royale.utils.Language.as(target, org.apache.royale.utils.Language.synthType('Class')) : target.constructor;
  var /** @type {string} */ className = org.apache.royale.reflection.getQualifiedClassName(classRef);
  org.apache.royale.crux.reflection.TypeCache.staticConstantCollections = org.apache.royale.crux.reflection.TypeCache.staticConstantCollections || {};
  if (org.apache.royale.crux.reflection.TypeCache.staticConstantCollections[className] != null)
    return org.apache.royale.crux.reflection.TypeCache.staticConstantCollections[className];
  var /** @type {Array} */ collection = org.apache.royale.reflection.utils.getStaticConstantsByConvention(classRef);
  org.apache.royale.crux.reflection.TypeCache.staticConstantCollections[className] = collection;
  return collection;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.reflection.TypeCache.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TypeCache', qName: 'org.apache.royale.crux.reflection.TypeCache', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.reflection.TypeCache.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|getTypeDescriptor': { type: 'org.apache.royale.crux.reflection.TypeDescriptor', declaredBy: 'org.apache.royale.crux.reflection.TypeCache', parameters: function () { return [ 'Object', false ]; }},
        '|getStaticConstantCollection': { type: 'Array', declaredBy: 'org.apache.royale.crux.reflection.TypeCache', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.reflection.TypeCache.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./TypeCache.js.map
