/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/utils/services/URLRequestHelper.as
 * org.apache.royale.crux.utils.services.URLRequestHelper
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.utils.services.URLRequestHelper');
/* Royale Dependency List: org.apache.royale.crux.ICrux,org.apache.royale.crux.utils.services.CruxURLRequest,org.apache.royale.net.URLLoader,org.apache.royale.net.URLRequest*/

goog.require('org.apache.royale.crux.ICruxAware');
goog.require('org.apache.royale.crux.utils.services.IURLRequestHelper');



/**
 * @constructor
 * @implements {org.apache.royale.crux.utils.services.IURLRequestHelper}
 * @implements {org.apache.royale.crux.ICruxAware}
 */
org.apache.royale.crux.utils.services.URLRequestHelper = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.utils.services.URLRequestHelper', org.apache.royale.crux.utils.services.URLRequestHelper);


/**
 * @protected
 * @type {org.apache.royale.crux.ICrux}
 */
org.apache.royale.crux.utils.services.URLRequestHelper.prototype._crux;


/** Delegates execute url request call to Crux 
 * @export
 * @param {org.apache.royale.net.URLRequest} request
 * @param {Function} resultHandler
 * @param {Function=} faultHandler
 * @param {Function=} progressHandler
 * @param {Function=} httpStatusHandler
 * @param {Array=} handlerArgs
 * @return {org.apache.royale.net.URLLoader}
 */
org.apache.royale.crux.utils.services.URLRequestHelper.prototype.executeURLRequest = function(request, resultHandler, faultHandler, progressHandler, httpStatusHandler, handlerArgs) {
  faultHandler = typeof faultHandler !== 'undefined' ? faultHandler : null;
  progressHandler = typeof progressHandler !== 'undefined' ? progressHandler : null;
  httpStatusHandler = typeof httpStatusHandler !== 'undefined' ? httpStatusHandler : null;
  handlerArgs = typeof handlerArgs !== 'undefined' ? handlerArgs : null;
  if (faultHandler == null && this._crux.config.defaultFaultHandler != null)
    faultHandler = this._crux.config.defaultFaultHandler;
  return new org.apache.royale.crux.utils.services.CruxURLRequest(request, resultHandler, faultHandler, progressHandler, httpStatusHandler, handlerArgs).loader;
};


org.apache.royale.crux.utils.services.URLRequestHelper.prototype.set__crux = function(crux) {
  this._crux = crux;
};


Object.defineProperties(org.apache.royale.crux.utils.services.URLRequestHelper.prototype, /** @lends {org.apache.royale.crux.utils.services.URLRequestHelper.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.crux.ICrux} */
crux: {
set: org.apache.royale.crux.utils.services.URLRequestHelper.prototype.set__crux}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.utils.services.URLRequestHelper.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'URLRequestHelper', qName: 'org.apache.royale.crux.utils.services.URLRequestHelper', kind: 'class' }], interfaces: [org.apache.royale.crux.utils.services.IURLRequestHelper, org.apache.royale.crux.ICruxAware] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.utils.services.URLRequestHelper.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'crux': { type: 'org.apache.royale.crux.ICrux', access: 'writeonly', declaredBy: 'org.apache.royale.crux.utils.services.URLRequestHelper'}
      };
    },
    methods: function () {
      return {
        'executeURLRequest': { type: 'org.apache.royale.net.URLLoader', declaredBy: 'org.apache.royale.crux.utils.services.URLRequestHelper', parameters: function () { return [ 'org.apache.royale.net.URLRequest', false ,'Function', false ,'Function', true ,'Function', true ,'Function', true ,'Array', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.utils.services.URLRequestHelper.prototype.ROYALE_COMPILE_FLAGS = 10;
