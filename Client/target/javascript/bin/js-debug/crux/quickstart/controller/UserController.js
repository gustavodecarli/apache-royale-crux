/**
 * Generated by Apache Royale Compiler from crux/quickstart/controller/UserController.as
 * crux.quickstart.controller.UserController
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('crux.quickstart.controller.UserController');
/* Royale Dependency List: crux.quickstart.model.User,crux.quickstart.service.UserService,mx.rpc.events.ResultEvent,org.apache.royale.crux.utils.services.ServiceHelper,org.apache.royale.events.ValueChangeEvent,org.apache.royale.jewel.Alert,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.events.EventDispatcher');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 */
crux.quickstart.controller.UserController = function() {// Compiler generated Binding support implementation:
crux.quickstart.controller.UserController.base(this, 'constructor');

};
// Compiler generated Binding support implementation:
goog.inherits(crux.quickstart.controller.UserController, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('crux.quickstart.controller.UserController', crux.quickstart.controller.UserController);


/**
 * @export
 * @type {crux.quickstart.service.UserService}
 */
crux.quickstart.controller.UserController.prototype.userService = null;


/**
 * @export
 * @type {org.apache.royale.crux.utils.services.ServiceHelper}
 */
crux.quickstart.controller.UserController.prototype.serviceHelper = null;


/**
 * @export
 * @type {crux.quickstart.model.User}
 */
crux.quickstart.controller.UserController.prototype.currentUser_ = null;


/**
 * [PostConstruct] methods are invoked after all dependencies are injected.
 * In this example, we set up a default user after the bean is created.
 * @export
 */
crux.quickstart.controller.UserController.prototype.createDefaultUser = function() {
org.apache.royale.utils.Language.trace('[PostConstruct] executing createDefaultUser in UserController');
this.currentUser = new crux.quickstart.model.User();
};


/**
 * Perform a server request to save the user
 * @export
 * @param {crux.quickstart.model.User} user
 */
crux.quickstart.controller.UserController.prototype.saveUser = function(user) {
org.apache.royale.utils.Language.trace('[EventHandler] executing saveUser in UserController via EventHandler processing');
this.serviceHelper.executeServiceCall(this.userService.saveUser(user), org.apache.royale.utils.Language.closure(this.crux_quickstart_controller_UserController_handleSaveUserResult, this, 'handleSaveUserResult'));
};


/**
 * Handle the server call result
 * @private
 * @param {mx.rpc.events.ResultEvent} event
 */
crux.quickstart.controller.UserController.prototype.crux_quickstart_controller_UserController_handleSaveUserResult = function(event) {
this.currentUser = org.apache.royale.utils.Language.as(event.result, crux.quickstart.model.User);
org.apache.royale.jewel.Alert.show('User saved successfully! id:' + this.currentUser.id, 'Success');
};Object.defineProperties(crux.quickstart.controller.UserController.prototype, /** @lends {crux.quickstart.controller.UserController.prototype} */ {
/** @export
  * @type {crux.quickstart.model.User} */
currentUser: {
/** @this {crux.quickstart.controller.UserController} */
get: function() {
return this.currentUser_;
},

/** @this {crux.quickstart.controller.UserController} */
set: function(value) {
if (value != this.currentUser_) {
    var oldValue = this.currentUser_;
    this.currentUser_ = value;
    this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(
         this, "currentUser", oldValue, value));
}
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
crux.quickstart.controller.UserController.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'UserController', qName: 'crux.quickstart.controller.UserController', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
crux.quickstart.controller.UserController.prototype.ROYALE_REFLECTION_INFO = function () {
return {
  variables: function () {
    return {
      'userService': { type: 'crux.quickstart.service.UserService', get_set: function (/** crux.quickstart.controller.UserController */ inst, /** * */ v) {return v !== undefined ? inst.userService = v : inst.userService;}, metadata: function () { return [ { name: 'Inject' } ]; }},
      'serviceHelper': { type: 'org.apache.royale.crux.utils.services.ServiceHelper', get_set: function (/** crux.quickstart.controller.UserController */ inst, /** * */ v) {return v !== undefined ? inst.serviceHelper = v : inst.serviceHelper;}, metadata: function () { return [ { name: 'Inject' } ]; }}
    };
  },
  accessors: function () {
    return {
      'currentUser': { type: 'crux.quickstart.model.User', access: 'readwrite', declaredBy: 'crux.quickstart.controller.UserController', metadata: function () { return [ { name: 'Bindable' } ]; }}
    };
  },
  methods: function () {
    return {
      'createDefaultUser': { type: 'void', declaredBy: 'crux.quickstart.controller.UserController', metadata: function () { return [ { name: 'PostConstruct' } ]; }},
      'saveUser': { type: 'void', declaredBy: 'crux.quickstart.controller.UserController', parameters: function () { return [ 'crux.quickstart.model.User', false ]; }, metadata: function () { return [ { name: 'EventHandler', args: [ { key: 'event', value: 'UserEvent.SAVE_USER_REQUESTED' }, { key: 'properties', value: 'user' } ] } ]; }}
    };
  }
};
};
/**
 * @const
 * @type {number}
 */
crux.quickstart.controller.UserController.prototype.ROYALE_COMPILE_FLAGS = 15;
goog.exportProperty(crux.quickstart.controller.UserController.prototype, 'userService', crux.quickstart.controller.UserController.prototype.userService);
goog.exportProperty(crux.quickstart.controller.UserController.prototype, 'serviceHelper', crux.quickstart.controller.UserController.prototype.serviceHelper);

//# sourceMappingURL=./UserController.js.map
