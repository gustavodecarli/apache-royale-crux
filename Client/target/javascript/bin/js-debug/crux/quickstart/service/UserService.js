/**
 * Generated by Apache Royale Compiler from crux/quickstart/service/UserService.as
 * crux.quickstart.service.UserService
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('crux.quickstart.service.UserService');
/* Royale Dependency List: crux.quickstart.model.User,mx.rpc.AsyncToken,org.apache.royale.crux.utils.services.MockDelegateHelper,org.apache.royale.events.IEventDispatcher*/




/**
 * @constructor
 */
crux.quickstart.service.UserService = function() {
  this.crux_quickstart_service_UserService_mockHelper = new org.apache.royale.crux.utils.services.MockDelegateHelper();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('crux.quickstart.service.UserService', crux.quickstart.service.UserService);


/**
 * @export
 * @type {org.apache.royale.events.IEventDispatcher}
 */
crux.quickstart.service.UserService.prototype.dispatcher = null;


/**
 * @private
 * @type {org.apache.royale.crux.utils.services.MockDelegateHelper}
 */
crux.quickstart.service.UserService.prototype.crux_quickstart_service_UserService_mockHelper = null;


/**
 * In a real app, we'd invoke a RemoteObject, HTTPService, etc.
 * For this simple example, we'll set a random ID on the returned User
 * to simulate the process of saving a User.
 * @export
 * @param {crux.quickstart.model.User} user
 * @return {mx.rpc.AsyncToken}
 */
crux.quickstart.service.UserService.prototype.saveUser = function(user) {
  user = user.clone();
  user.id = (Math.round(Math.random() * 100)) >> 0;
  return this.crux_quickstart_service_UserService_mockHelper.createMockResult(user);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
crux.quickstart.service.UserService.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'UserService', qName: 'crux.quickstart.service.UserService', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
crux.quickstart.service.UserService.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'dispatcher': { type: 'org.apache.royale.events.IEventDispatcher', get_set: function (/** crux.quickstart.service.UserService */ inst, /** * */ v) {return v !== undefined ? inst.dispatcher = v : inst.dispatcher;}, metadata: function () { return [ { name: 'Dispatcher' } ]; }}
      };
    },
    methods: function () {
      return {
        'UserService': { type: '', declaredBy: 'crux.quickstart.service.UserService'},
        'saveUser': { type: 'mx.rpc.AsyncToken', declaredBy: 'crux.quickstart.service.UserService', parameters: function () { return [ 'crux.quickstart.model.User', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
crux.quickstart.service.UserService.prototype.ROYALE_COMPILE_FLAGS = 15;

//# sourceMappingURL=./UserService.js.map
