/**
 * Generated by Apache Royale Compiler from mx/messaging/MessageAgent.as
 * mx.messaging.MessageAgent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.MessageAgent');
/* Royale Dependency List: mx.core.mx_internal,mx.events.PropertyChangeEvent,mx.logging.ILogger,mx.logging.Log,mx.messaging.Channel,mx.messaging.ChannelSet,mx.messaging.channels.PollingChannel,mx.messaging.config.ConfigMap,mx.messaging.config.ServerConfig,mx.messaging.errors.InvalidDestinationError,mx.messaging.events.ChannelEvent,mx.messaging.events.ChannelFaultEvent,mx.messaging.events.MessageAckEvent,mx.messaging.events.MessageEvent,mx.messaging.events.MessageFaultEvent,mx.messaging.messages.AbstractMessage,mx.messaging.messages.AcknowledgeMessage,mx.messaging.messages.CommandMessage,mx.messaging.messages.ErrorMessage,mx.messaging.messages.IMessage,mx.messaging.messages.MessagePerformanceUtils,mx.netmon.NetworkMonitor,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.utils.Base64Encoder,mx.utils.UIDUtil,org.apache.royale.utils.Language,XML*/

goog.require('org.apache.royale.events.EventDispatcher');
goog.require('mx.core.IMXMLObject');



/**
 *  Constructor.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3           
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {mx.core.IMXMLObject}
 */
mx.messaging.MessageAgent = function() {
  
  this.mx_messaging_MessageAgent_resourceManager = mx.resources.ResourceManager.getInstance();
  this.mx_messaging_MessageAgent__id = mx.utils.UIDUtil.createUID();
  this.mx_messaging_MessageAgent__channelSetMode = mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__AUTO_CONFIGURED_CHANNELSET;
  mx.messaging.MessageAgent.base(this, 'constructor');
};
goog.inherits(mx.messaging.MessageAgent, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.MessageAgent', mx.messaging.MessageAgent);


/**
 * @const
 * @type {number}
 */
mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__AUTO_CONFIGURED_CHANNELSET = 0;


/**
 * @const
 * @type {number}
 */
mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__MANUALLY_ASSIGNED_CHANNELSET = 1;


/**
 * @export
 * @type {string}
 */
mx.messaging.MessageAgent.prototype._agentType = "mx.messaging.MessageAgent";


/**
 * @export
 * @type {string}
 */
mx.messaging.MessageAgent.prototype._credentials;


/**
 * @export
 * @type {string}
 */
mx.messaging.MessageAgent.prototype._credentialsCharset;


/**
 * @export
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype._disconnectBarrier;


/**
 * @private
 * @type {mx.messaging.events.ChannelEvent}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__pendingConnectEvent;


/**
 * @private
 * @type {string}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__remoteCredentials = "";


/**
 * @private
 * @type {string}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__remoteCredentialsCharset;


/**
 * @private
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__sendRemoteCredentials;


/**
 * @export
 * @type {mx.logging.ILogger}
 */
mx.messaging.MessageAgent.prototype._log;


/**
 * @private
 * @type {Array}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__clientIdWaitQueue;


/**
 * @export
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype._ignoreFault = false;


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent_resourceManager;


/**
 * @private
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__authenticated;


/**
 *  @asprivate
 * @export
 * @param {boolean} value
 * @param {string} creds
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setAuthenticated = function(value, creds) {
  if (this.mx_messaging_MessageAgent__authenticated != value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "authenticated", this.mx_messaging_MessageAgent__authenticated, value);
    this.mx_messaging_MessageAgent__authenticated = value;
    this.dispatchEvent(event);
    if (value)
      this.assertCredentials(creds);
  }
};


/**
 * @private
 * @type {mx.messaging.ChannelSet}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__channelSet;


/**
 *  @asprivate
 *  This method is called by ChannelSet.connect(agent) to set up the bidirectional
 *  relationship between the MessageAgent and the ChannelSet.
 *  It also handles the case of customer code calling channelSet.connect(agent)
 *  directly rather than assigning the ChannelSet to the MessageAgent's channelSet
 *  property.
 * @export
 * @param {mx.messaging.ChannelSet} value
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__internalSetChannelSet = function(value) {
  if (this.mx_messaging_MessageAgent__channelSet != value) {
    if (this.mx_messaging_MessageAgent__channelSet != null)
      this.mx_messaging_MessageAgent__channelSet.disconnect(this);
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "channelSet", this.mx_messaging_MessageAgent__channelSet, value);
    this.mx_messaging_MessageAgent__channelSet = value;
    if (this.mx_messaging_MessageAgent__channelSet != null) {
      if (this._credentials)
        this.mx_messaging_MessageAgent__channelSet.setCredentials(this._credentials, this, this._credentialsCharset);
      this.mx_messaging_MessageAgent__channelSet.connect(this);
    }
    this.dispatchEvent(event);
  }
};


/**
 * @private
 * @type {string}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__clientId;


/**
 *  @asprivate
 *  This method is used to assign a server-generated client id to the MessageAgent
 *  in the common scenario.
 *  It may also be used by the framework to sync up cooperating MessageAgents under
 *  a single client id value so that they appear as a single MessageAgent to the server.
 *  Assigning a client id value will flush any messages that have been queued while we
 *  were waiting for a server-generated client id value to be returned.
 *  Queued messages are sent to the server in order.
 * @export
 * @param {string} value
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setClientId = function(value) {
  if (this.mx_messaging_MessageAgent__clientId != value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "clientId", this.mx_messaging_MessageAgent__clientId, value);
    this.mx_messaging_MessageAgent__clientId = value;
    this.flushClientIdWaitQueue();
    this.dispatchEvent(event);
  }
};


/**
 * @private
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__connected = false;


/**
 *  @asprivate
 * @export
 * @param {boolean} value
 */
mx.messaging.MessageAgent.prototype.setConnected = function(value) {
  if (this.mx_messaging_MessageAgent__connected != value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "connected", this.mx_messaging_MessageAgent__connected, value);
    this.mx_messaging_MessageAgent__connected = value;
    this.dispatchEvent(event);
    this.http_$$www_adobe_com$2006$flex$mx$internal__setAuthenticated(!!(value && this.channelSet && this.channelSet.authenticated), this._credentials);
  }
};


/**
 * @private
 * @type {string}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__destination = "";


/**
 * @private
 * @type {string}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__id;


/**
 * @private
 * @type {number}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__requestTimeout = -1;


/**
 * @private
 * @type {number}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__channelSetMode;


/**
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = false;


/**
 * @private
 * @type {boolean}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent__needsConfig;


/**
 *  Invoked by a MessageResponder upon receiving a result for a sent
 *  message. Subclasses may override this method if they need to perform
 *  custom acknowledgement processing, but must invoke
 *  <code>super.acknowledge()</code> as well. This method dispatches a
 *  MessageAckEvent.
 *
 *  @asparam ackMsg The AcknowledgMessage returned.
 *
 *  @asparam msg The original sent message.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.messages.AcknowledgeMessage} ackMsg
 * @param {mx.messaging.messages.IMessage} msg
 */
mx.messaging.MessageAgent.prototype.acknowledge = function(ackMsg, msg) {
  if (mx.logging.Log.isInfo())
    this._log.info("'{0}' {2} acknowledge of '{1}'.", this.id, msg.messageId, this._agentType);
  if (mx.logging.Log.isDebug() && this.mx_messaging_MessageAgent_isCurrentChannelNotNull() && this.mx_messaging_MessageAgent_getCurrentChannel().mpiEnabled) {
    try {
      var /** @type {mx.messaging.messages.MessagePerformanceUtils} */ mpiutil = new mx.messaging.messages.MessagePerformanceUtils(ackMsg);
      this._log.debug(mpiutil.prettyPrint());
    } catch (e) {
      this._log.debug("Could not get message performance information for: " + msg.toString());
    }
  }
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested) {
    this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = false;
    mx.messaging.config.ServerConfig.http_$$www_adobe_com$2006$flex$mx$internal__updateServerConfigData(org.apache.royale.utils.Language.as(ackMsg.body, mx.messaging.config.ConfigMap));
    this.http_$$www_adobe_com$2006$flex$mx$internal__needsConfig = false;
    if (this.mx_messaging_MessageAgent__pendingConnectEvent)
      this.channelConnectHandler(this.mx_messaging_MessageAgent__pendingConnectEvent);
    this.mx_messaging_MessageAgent__pendingConnectEvent = null;
  }
  if (this.clientId == null) {
    if (ackMsg.clientId != null)
      this.http_$$www_adobe_com$2006$flex$mx$internal__setClientId(ackMsg.clientId);
    else
      this.flushClientIdWaitQueue();
  }
  this.dispatchEvent(mx.messaging.events.MessageAckEvent.createEvent(ackMsg, msg));
  this.mx_messaging_MessageAgent_monitorRpcMessage(ackMsg, msg);
};


/**
 *  Disconnects the MessageAgent's network connection.
 *  This method does not wait for outstanding network operations to complete.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3       
 * @export
 */
mx.messaging.MessageAgent.prototype.disconnect = function() {
  if (!this._disconnectBarrier) {
    this.mx_messaging_MessageAgent__clientIdWaitQueue = null;
    if (this.connected)
      this._disconnectBarrier = true;
    if (this.mx_messaging_MessageAgent__channelSetMode == mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__AUTO_CONFIGURED_CHANNELSET)
      this.http_$$www_adobe_com$2006$flex$mx$internal__internalSetChannelSet(null);
    else if (this.mx_messaging_MessageAgent__channelSet != null)
      this.mx_messaging_MessageAgent__channelSet.disconnect(this);
  }
};


/**
 *  Invoked by a MessageResponder upon receiving a fault for a sent message.
 *  Subclasses may override this method if they need to perform custom fault
 *  processing, but must invoke <code>super.fault()</code> as well. This
 *  method dispatchs a MessageFaultEvent.
 *
 *  @asparam errMsg The ErrorMessage.
 *
 *  @asparam msg The original sent message that caused this fault.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.messages.ErrorMessage} errMsg
 * @param {mx.messaging.messages.IMessage} msg
 */
mx.messaging.MessageAgent.prototype.fault = function(errMsg, msg) {
  if (mx.logging.Log.isError())
    this._log.error("'{0}' {2} fault for '{1}'.", this.id, msg.messageId, this._agentType);
  this._ignoreFault = false;
  this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = false;
  if (errMsg.headers[mx.messaging.messages.ErrorMessage.RETRYABLE_HINT_HEADER])
    delete errMsg.headers[mx.messaging.messages.ErrorMessage.RETRYABLE_HINT_HEADER];
  if (this.clientId == null) {
    if (errMsg.clientId != null)
      this.http_$$www_adobe_com$2006$flex$mx$internal__setClientId(errMsg.clientId);
    else
      this.flushClientIdWaitQueue();
  }
  this.dispatchEvent(mx.messaging.events.MessageFaultEvent.createEvent(errMsg));
  this.mx_messaging_MessageAgent_monitorRpcMessage(errMsg, msg);
  this.handleAuthenticationFault(errMsg, msg);
};


/**
 *  Handles a CONNECT ChannelEvent. Subclasses that need to perform custom
 *  processing should override this method, and invoke
 *  <code>super.channelConnectHandler()</code>.
 *
 *  @asparam event The ChannelEvent.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.events.ChannelEvent} event
 */
mx.messaging.MessageAgent.prototype.channelConnectHandler = function(event) {
  this._disconnectBarrier = false;
  if (this.http_$$www_adobe_com$2006$flex$mx$internal__needsConfig) {
    if (mx.logging.Log.isInfo())
      this._log.info("'{0}' {1} waiting for configuration information.", this.id, this._agentType);
    this.mx_messaging_MessageAgent__pendingConnectEvent = event;
  } else {
    if (mx.logging.Log.isInfo())
      this._log.info("'{0}' {1} connected.", this.id, this._agentType);
    this.setConnected(true);
    this.dispatchEvent(event);
  }
};


/**
 *  Handles a DISCONNECT ChannelEvent. Subclasses that need to perform
 *  custom processing should override this method, and invoke
 *  <code>super.channelDisconnectHandler()</code>.
 *
 *  @asparam event The ChannelEvent.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.events.ChannelEvent} event
 */
mx.messaging.MessageAgent.prototype.channelDisconnectHandler = function(event) {
  if (mx.logging.Log.isWarn())
    this._log.warn("'{0}' {1} channel disconnected.", this.id, this._agentType);
  this.setConnected(false);
  if (this.mx_messaging_MessageAgent__remoteCredentials != null) {
    this.mx_messaging_MessageAgent__sendRemoteCredentials = true;
  }
  this.dispatchEvent(event);
};


/**
 *  Handles a ChannelFaultEvent. Subclasses that need to perform custom
 *  processing should override this method, and invoke
 *  <code>super.channelFaultHandler()</code>.
 *
 *  @asparam The ChannelFaultEvent
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.events.ChannelFaultEvent} event
 */
mx.messaging.MessageAgent.prototype.channelFaultHandler = function(event) {
  if (mx.logging.Log.isWarn())
    this._log.warn("'{0}' {1} channel faulted with {2} {3}", this.id, this._agentType, event.faultCode, event.faultDetail);
  if (!event.channel.connected) {
    this.setConnected(false);
    if (this.mx_messaging_MessageAgent__remoteCredentials != null) {
      this.mx_messaging_MessageAgent__sendRemoteCredentials = true;
    }
  }
  this.dispatchEvent(event);
};


/**
 *  Called after the implementing object has been created
 *  and all properties specified on the tag have been assigned.
 *
 *  @asparam document MXML document that created this object.
 *
 *  @asparam id id used by the document to refer to this object.
 *  If the object is a deep property on the document, id is null.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {Object} document
 * @param {string} id
 */
mx.messaging.MessageAgent.prototype.initialized = function(document, id) {
  this.id = id;
};


/**
 *  Logs the MessageAgent out from its remote destination.
 *  Logging out of a destination applies to everything connected using the same ChannelSet
 *  as specified in the server configuration. For example, if several DataService components
 *  are connected over an RTMP channel and <code>logout()</code> is invoked on one of them,
 *  all other client components that are connected using the same ChannelSet are also logged out.
 *
 *  <p><b>Note:</b> Adobe recommends that you use the mx.messaging.ChannelSet.logout() method
 *  rather than this method. </p>
 *
 *  @see mx.messaging.ChannelSet#logout()
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 */
mx.messaging.MessageAgent.prototype.logout = function() {
  this._credentials = null;
  if (this.channelSet)
    this.channelSet.logout(this);
};


/**
 *  Sets the credentials that the MessageAgent uses to authenticate to
 *  destinations.
 *  The credentials are applied to all services connected over the same ChannelSet.
 *
 *  @asparam username The username.
 *  @asparam password The password.
 *  @asparam charset The character set encoding to use while encoding the
 *  credentials. The default is null, which implies the legacy charset of
 *  ISO-Latin-1. The only other supported charset is &quot;UTF-8&quot;.
 *
 *  @throws flash.errors.IllegalOperationError in two situations; if credentials
 *  have already been set and an authentication is in progress with the remote
 *  detination, or if authenticated and the credentials specified don't match
 *  the currently authenticated credentials.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {string} username
 * @param {string} password
 * @param {string=} charset
 */
mx.messaging.MessageAgent.prototype.setCredentials = function(username, password, charset) {
  charset = typeof charset !== 'undefined' ? charset : null;
  if (username == null && password == null) {
    this._credentials = null;
    this._credentialsCharset = null;
  } else {
    var /** @type {string} */ cred = username + ":" + password;
    var /** @type {mx.utils.Base64Encoder} */ encoder = new mx.utils.Base64Encoder();
    if (charset == mx.utils.Base64Encoder.CHARSET_UTF_8)
      encoder.encodeUTFBytes(cred);
    else
      encoder.encode(cred);
    this._credentials = encoder.drain();
    this._credentialsCharset = charset;
  }
  if (this.channelSet != null)
    this.channelSet.setCredentials(this._credentials, this, this._credentialsCharset);
};


/**
 *  Sets the remote credentials that will be passed through to the remote destination
 *  for authenticating to secondary systems.
 *
 *  @asparam username The username.
 *  @asparam password The password.
 *  @asparam charset The character set encoding to use while encoding the
 *  remote credentials. The default is null, which implies the legacy
 *  charset of ISO-Latin-1. The only other currently supported option is
 *  &quot;UTF-8&quot;.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {string} username
 * @param {string} password
 * @param {string=} charset
 */
mx.messaging.MessageAgent.prototype.setRemoteCredentials = function(username, password, charset) {
  charset = typeof charset !== 'undefined' ? charset : null;
  if (username == null && password == null) {
    this.mx_messaging_MessageAgent__remoteCredentials = "";
    this.mx_messaging_MessageAgent__remoteCredentialsCharset = null;
  } else {
    var /** @type {string} */ cred = username + ":" + password;
    var /** @type {mx.utils.Base64Encoder} */ encoder = new mx.utils.Base64Encoder();
    if (charset == mx.utils.Base64Encoder.CHARSET_UTF_8)
      encoder.encodeUTFBytes(cred);
    else
      encoder.encode(cred);
    this.mx_messaging_MessageAgent__remoteCredentials = encoder.drain();
    this.mx_messaging_MessageAgent__remoteCredentialsCharset = charset;
  }
  this.mx_messaging_MessageAgent__sendRemoteCredentials = true;
};


/**
 * Returns true if there are any pending requests for the passed in message.
 * This method should be overriden by subclasses
 *
 * @asparam msg The message for which the existence of pending requests is checked.
 *
 * @asreturn Returns <code>true</code> if there are any pending requests for the
 * passed in message.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3     
 * @export
 * @param {mx.messaging.messages.IMessage} msg
 * @return {boolean}
 */
mx.messaging.MessageAgent.prototype.hasPendingRequestForMessage = function(msg) {
  return false;
};


/**
 *  @asprivate
 *  Internal hook for ChannelSet to assign credentials when it has authenticated
 *  successfully via a direct <code>login(...)</code> call to the server or logged
 *  out directly.
 * @export
 * @param {string} credentials
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__internalSetCredentials = function(credentials) {
  this._credentials = credentials;
};


/**
 *  @asprivate
 * @export
 * @param {string} value
 */
mx.messaging.MessageAgent.prototype.assertCredentials = function(value) {
  if (this._credentials != null && (this._credentials != value)) {
    var /** @type {mx.messaging.messages.ErrorMessage} */ errMsg = new mx.messaging.messages.ErrorMessage();
    errMsg.faultCode = "Client.Authentication.Error";
    errMsg.faultString = "Credentials specified do not match those used on underlying connection.";
    errMsg.faultDetail = "Channel was authenticated with a different set of credentials than those used for this agent.";
    this.dispatchEvent(mx.messaging.events.MessageFaultEvent.createEvent(errMsg));
  }
};


/**
 *  @asprivate
 *  Utility method to flush any pending queued messages to send once we have
 *  received a clientId from the remote destination.
 * @export
 */
mx.messaging.MessageAgent.prototype.flushClientIdWaitQueue = function() {
  if (this.mx_messaging_MessageAgent__clientIdWaitQueue != null) {
    if (this.clientId != null) {
      while (this.mx_messaging_MessageAgent__clientIdWaitQueue.length > 0) {
        this.internalSend(org.apache.royale.utils.Language.as(this.mx_messaging_MessageAgent__clientIdWaitQueue.shift(), mx.messaging.messages.IMessage));
      }
    }
    if (this.clientId == null) {
      if (this.mx_messaging_MessageAgent__clientIdWaitQueue.length > 0) {
        var /** @type {Array} */ saveQueue = this.mx_messaging_MessageAgent__clientIdWaitQueue;
        this.mx_messaging_MessageAgent__clientIdWaitQueue = null;
        this.internalSend(org.apache.royale.utils.Language.as(saveQueue.shift(), mx.messaging.messages.IMessage));
        this.mx_messaging_MessageAgent__clientIdWaitQueue = saveQueue;
      } else {
        this.mx_messaging_MessageAgent__clientIdWaitQueue = null;
      }
    }
  }
};


/**
 * Handles the authentication fault on the server. If the authenticated flag is true, 
 * the authentication fault must have been caused by a session expiration on the server.
 * Set the authenticated state to false and if loginAfterDisconnect flag is enabled,
 * resend credentials to the server by disconnecting and resending the message again.
 *
 *  @asparam errMsg The Error Message.
 *  @asparam msg The message that caused the fault and should be resent once we have
 *  disconnected/connected causing re-authentication.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.messages.ErrorMessage} errMsg
 * @param {mx.messaging.messages.IMessage} msg
 */
mx.messaging.MessageAgent.prototype.handleAuthenticationFault = function(errMsg, msg) {
  if (errMsg.faultCode == "Client.Authentication" && this.authenticated && this.mx_messaging_MessageAgent_isCurrentChannelNotNull()) {
    var /** @type {mx.messaging.Channel} */ currentChannel = this.mx_messaging_MessageAgent_getCurrentChannel();
    currentChannel.http_$$www_adobe_com$2006$flex$mx$internal__setAuthenticated(false);
    if (org.apache.royale.utils.Language.is(currentChannel, mx.messaging.channels.PollingChannel) && org.apache.royale.utils.Language.as(currentChannel, mx.messaging.channels.PollingChannel).http_$$www_adobe_com$2006$flex$mx$internal__loginAfterDisconnect) {
      this.reAuthorize(msg);
      this._ignoreFault = true;
    }
  }
};


/**
 *  Used to automatically initialize the <code>channelSet</code> property for the
 *  MessageAgent before it connects for the first time.
 *  Subtypes may override to perform custom initialization.
 *
 *  @asparam message The message that needs to be sent.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.messages.IMessage} message
 */
mx.messaging.MessageAgent.prototype.initChannelSet = function(message) {
  if (this.mx_messaging_MessageAgent__channelSet == null) {
    this.mx_messaging_MessageAgent__channelSetMode = mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__AUTO_CONFIGURED_CHANNELSET;
    this.http_$$www_adobe_com$2006$flex$mx$internal__internalSetChannelSet(mx.messaging.config.ServerConfig.getChannelSet(this.destination));
  }
  if (this.mx_messaging_MessageAgent__channelSet.connected && this.http_$$www_adobe_com$2006$flex$mx$internal__needsConfig && !this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested) {
    message.headers[mx.messaging.messages.CommandMessage.NEEDS_CONFIG_HEADER] = true;
    this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = true;
  }
  this.mx_messaging_MessageAgent__channelSet.connect(this);
  if (this._credentials != null)
    this.channelSet.setCredentials(this._credentials, this, this._credentialsCharset);
};


/**
 *  Sends a Message from the MessageAgent to its destination using the
 *  agent's ChannelSet. MessageAgent subclasses must use this method to
 *  send their messages.
 *
 *  @asparam message The message to send.
 *
 *  @asparam waitForClientId If true the message may be queued until a clientId has been
 *                         assigned to the agent. In general this is the desired behavior.
 *                         For special behavior (automatic reconnect and resubscribe) the
 *                         agent may pass false to override the default queuing behavior.
 *
 *  @throws mx.messaging.errors.InvalidDestinationError If no destination is set.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3      
 * @export
 * @param {mx.messaging.messages.IMessage} message
 * @param {boolean=} waitForClientId
 */
mx.messaging.MessageAgent.prototype.internalSend = function(message, waitForClientId) {
  waitForClientId = typeof waitForClientId !== 'undefined' ? waitForClientId : true;
  if ((message.clientId == null) && waitForClientId && (this.clientId == null)) {
    if (this.mx_messaging_MessageAgent__clientIdWaitQueue == null) {
      this.mx_messaging_MessageAgent__clientIdWaitQueue = [];
    } else {
      this.mx_messaging_MessageAgent__clientIdWaitQueue.push(message);
      return;
    }
  }
  if (message.clientId == null)
    message.clientId = this.clientId;
  if (this.requestTimeout > 0)
    message.headers[mx.messaging.messages.AbstractMessage.REQUEST_TIMEOUT_HEADER] = this.requestTimeout;
  if (this.mx_messaging_MessageAgent__sendRemoteCredentials) {
    if (!(org.apache.royale.utils.Language.is(message, mx.messaging.messages.CommandMessage) && (org.apache.royale.utils.Language.as(message, mx.messaging.messages.CommandMessage, true).operation == mx.messaging.messages.CommandMessage.TRIGGER_CONNECT_OPERATION))) {
      message.headers[mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_HEADER] = this.mx_messaging_MessageAgent__remoteCredentials;
      message.headers[mx.messaging.messages.AbstractMessage.REMOTE_CREDENTIALS_CHARSET_HEADER] = this.mx_messaging_MessageAgent__remoteCredentialsCharset;
      this.mx_messaging_MessageAgent__sendRemoteCredentials = false;
    }
  }
  if (this.channelSet != null) {
    if (!this.connected && (this.mx_messaging_MessageAgent__channelSetMode == mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__MANUALLY_ASSIGNED_CHANNELSET))
      this.mx_messaging_MessageAgent__channelSet.connect(this);
    if (this.channelSet.connected && this.http_$$www_adobe_com$2006$flex$mx$internal__needsConfig && !this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested) {
      message.headers[mx.messaging.messages.CommandMessage.NEEDS_CONFIG_HEADER] = true;
      this.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = true;
    }
    this.channelSet.send(this, message);
    this.mx_messaging_MessageAgent_monitorRpcMessage(message, message);
  } else if (this.destination != null && this.destination.length > 0) {
    this.initChannelSet(message);
    if (this.channelSet != null) {
      this.channelSet.send(this, message);
      this.mx_messaging_MessageAgent_monitorRpcMessage(message, message);
    }
  } else {
    var /** @type {string} */ msg = this.mx_messaging_MessageAgent_resourceManager.getString("messaging", "destinationNotSet");
    throw new mx.messaging.errors.InvalidDestinationError(msg);
  }
};


/**
 * This function should be overriden by sublasses to implement reauthentication due to
 * server session time-out behavior specific to them. In general, it should follow disconnect, 
 * connect, resend message pattern.
 *
 *  @asparam msg The message that caused the fault and should be resent once we have
 *  disconnected/connected causing reauthentication.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3
 * @export
 * @param {mx.messaging.messages.IMessage} msg
 */
mx.messaging.MessageAgent.prototype.reAuthorize = function(msg) {
  if (this.channelSet != null)
    this.channelSet.disconnectAll();
  this.internalSend(msg);
};


/**
 *  @asprivate
 * @private
 * @return {mx.messaging.Channel}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent_getCurrentChannel = function() {
  return this.channelSet != null ? this.channelSet.currentChannel : null;
};


/**
 *  @asprivate
 * @private
 * @return {boolean}
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent_isCurrentChannelNotNull = function() {
  return this.mx_messaging_MessageAgent_getCurrentChannel() != null;
};


/**
 * Monitor a rpc message that is being send
 * @private
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.messaging.messages.IMessage} actualMessage
 */
mx.messaging.MessageAgent.prototype.mx_messaging_MessageAgent_monitorRpcMessage = function(message, actualMessage) {
  if (mx.netmon.NetworkMonitor.isMonitoring()) {
    if (org.apache.royale.utils.Language.is(message, mx.messaging.messages.ErrorMessage)) {
      mx.netmon.NetworkMonitor.monitorFault(actualMessage, mx.messaging.events.MessageFaultEvent.createEvent(org.apache.royale.utils.Language.as(message, mx.messaging.messages.ErrorMessage, true)));
    } else if (org.apache.royale.utils.Language.is(message, mx.messaging.messages.AcknowledgeMessage)) {
      mx.netmon.NetworkMonitor.monitorResult(message, mx.messaging.events.MessageEvent.createEvent(mx.messaging.events.MessageEvent.RESULT, actualMessage));
    } else {
      mx.netmon.NetworkMonitor.monitorInvocation(this.http_$$www_adobe_com$2006$flex$mx$internal__getNetmonId(), message, this);
    }
  }
};


/**
 * Return the id for the NetworkMonitor.
 * @asprivate
 * @export
 * @return {string}
 */
mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__getNetmonId = function() {
  return null;
};


mx.messaging.MessageAgent.prototype.get__authenticated = function() {
  return this.mx_messaging_MessageAgent__authenticated;
};


mx.messaging.MessageAgent.prototype.get__channelSet = function() {
  return this.mx_messaging_MessageAgent__channelSet;
};


mx.messaging.MessageAgent.prototype.set__channelSet = function(value) {
  this.http_$$www_adobe_com$2006$flex$mx$internal__internalSetChannelSet(value);
  this.mx_messaging_MessageAgent__channelSetMode = mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__MANUALLY_ASSIGNED_CHANNELSET;
};


mx.messaging.MessageAgent.prototype.get__clientId = function() {
  return this.mx_messaging_MessageAgent__clientId;
};


mx.messaging.MessageAgent.prototype.get__connected = function() {
  return this.mx_messaging_MessageAgent__connected;
};


mx.messaging.MessageAgent.prototype.get__destination = function() {
  return this.mx_messaging_MessageAgent__destination;
};


mx.messaging.MessageAgent.prototype.set__destination = function(value) {
  if ((value == null) || value.length == 0)
    return;
  if (this.mx_messaging_MessageAgent__destination != value) {
    if ((this.mx_messaging_MessageAgent__channelSetMode == mx.messaging.MessageAgent.http_$$www_adobe_com$2006$flex$mx$internal__AUTO_CONFIGURED_CHANNELSET) && (this.channelSet != null)) {
      this.channelSet.disconnect(this);
      this.channelSet = null;
    }
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "destination", this.mx_messaging_MessageAgent__destination, value);
    this.mx_messaging_MessageAgent__destination = value;
    this.dispatchEvent(event);
    if (mx.logging.Log.isInfo())
      this._log.info("'{0}' {2} set destination to '{1}'.", this.id, this.mx_messaging_MessageAgent__destination, this._agentType);
  }
};


mx.messaging.MessageAgent.prototype.get__id = function() {
  return this.mx_messaging_MessageAgent__id;
};


mx.messaging.MessageAgent.prototype.set__id = function(value) {
  if (this.mx_messaging_MessageAgent__id != value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "id", this.mx_messaging_MessageAgent__id, value);
    this.mx_messaging_MessageAgent__id = value;
    this.dispatchEvent(event);
  }
};


mx.messaging.MessageAgent.prototype.get__requestTimeout = function() {
  return this.mx_messaging_MessageAgent__requestTimeout;
};


mx.messaging.MessageAgent.prototype.set__requestTimeout = function(value) {
  if (this.mx_messaging_MessageAgent__requestTimeout != value) {
    var /** @type {mx.events.PropertyChangeEvent} */ event = mx.events.PropertyChangeEvent.createUpdateEvent(this, "requestTimeout", this.mx_messaging_MessageAgent__requestTimeout, value);
    this.mx_messaging_MessageAgent__requestTimeout = value;
    this.dispatchEvent(event);
  }
};


mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__channelSetMode = function() {
  return this.mx_messaging_MessageAgent__channelSetMode;
};


mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__needsConfig = function() {
  return this.mx_messaging_MessageAgent__needsConfig;
};


mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__needsConfig = function(value) {
  if (this.mx_messaging_MessageAgent__needsConfig == value)
    return;
  this.mx_messaging_MessageAgent__needsConfig = value;
  if (this.mx_messaging_MessageAgent__needsConfig) {
    var /** @type {mx.messaging.ChannelSet} */ cs = this.channelSet;
    try {
      this.disconnect();
    } finally {
      this.http_$$www_adobe_com$2006$flex$mx$internal__internalSetChannelSet(cs);
    }
  }
};


Object.defineProperties(mx.messaging.MessageAgent.prototype, /** @lends {mx.messaging.MessageAgent.prototype} */ {
/**
  * @export
  * @type {boolean} */
authenticated: {
get: mx.messaging.MessageAgent.prototype.get__authenticated},
/**
  * @export
  * @type {mx.messaging.ChannelSet} */
channelSet: {
get: mx.messaging.MessageAgent.prototype.get__channelSet,
set: mx.messaging.MessageAgent.prototype.set__channelSet},
/**
  * @export
  * @type {string} */
clientId: {
get: mx.messaging.MessageAgent.prototype.get__clientId},
/**
  * @export
  * @type {boolean} */
connected: {
get: mx.messaging.MessageAgent.prototype.get__connected},
/**
  * @export
  * @type {string} */
destination: {
get: mx.messaging.MessageAgent.prototype.get__destination,
set: mx.messaging.MessageAgent.prototype.set__destination},
/**
  * @export
  * @type {string} */
id: {
get: mx.messaging.MessageAgent.prototype.get__id,
set: mx.messaging.MessageAgent.prototype.set__id},
/**
  * @export
  * @type {number} */
requestTimeout: {
get: mx.messaging.MessageAgent.prototype.get__requestTimeout,
set: mx.messaging.MessageAgent.prototype.set__requestTimeout},
/**
  * @export
  * @type {number} */
http_$$www_adobe_com$2006$flex$mx$internal__channelSetMode: {
get: mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__channelSetMode},
/**
  * @export
  * @type {boolean} */
http_$$www_adobe_com$2006$flex$mx$internal__needsConfig: {
get: mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__get__needsConfig,
set: mx.messaging.MessageAgent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__set__needsConfig}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.MessageAgent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MessageAgent', qName: 'mx.messaging.MessageAgent', kind: 'class' }], interfaces: [mx.core.IMXMLObject] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.MessageAgent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'http://www.adobe.com/2006/flex/mx/internal::configRequested': { type: 'Boolean', get_set: function (/** mx.messaging.MessageAgent */ inst, /** * */ v) {return v !== undefined ? inst.http_$$www_adobe_com$2006$flex$mx$internal__configRequested = v : inst.http_$$www_adobe_com$2006$flex$mx$internal__configRequested;}}
      };
    },
    accessors: function () {
      return {
        'authenticated': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'channelSet': { type: 'mx.messaging.ChannelSet', access: 'readwrite', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'clientId': { type: 'String', access: 'readonly', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'connected': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'destination': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'id': { type: 'String', access: 'readwrite', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'requestTimeout': { type: 'int', access: 'readwrite', declaredBy: 'mx.messaging.MessageAgent', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'propertyChange' } ] } ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::channelSetMode': { type: 'int', access: 'readonly', declaredBy: 'mx.messaging.MessageAgent'},
        'http://www.adobe.com/2006/flex/mx/internal::needsConfig': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.messaging.MessageAgent'}
      };
    },
    methods: function () {
      return {
        'MessageAgent': { type: '', declaredBy: 'mx.messaging.MessageAgent'},
        'http://www.adobe.com/2006/flex/mx/internal::setAuthenticated': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'Boolean', false ,'String', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::internalSetChannelSet': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.ChannelSet', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::setClientId': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'String', false ]; }},
        'acknowledge': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.messages.AcknowledgeMessage', false ,'mx.messaging.messages.IMessage', false ]; }},
        'disconnect': { type: 'void', declaredBy: 'mx.messaging.MessageAgent'},
        'fault': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.messages.ErrorMessage', false ,'mx.messaging.messages.IMessage', false ]; }},
        'channelConnectHandler': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.events.ChannelEvent', false ]; }},
        'channelDisconnectHandler': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.events.ChannelEvent', false ]; }},
        'channelFaultHandler': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.events.ChannelFaultEvent', false ]; }},
        'initialized': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'Object', false ,'String', false ]; }},
        'logout': { type: 'void', declaredBy: 'mx.messaging.MessageAgent'},
        'setCredentials': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }},
        'setRemoteCredentials': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'String', false ,'String', false ,'String', true ]; }},
        'hasPendingRequestForMessage': { type: 'Boolean', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::internalSetCredentials': { type: 'void', declaredBy: 'mx.messaging.MessageAgent', parameters: function () { return [ 'String', false ]; }},
        'http://www.adobe.com/2006/flex/mx/internal::getNetmonId': { type: 'String', declaredBy: 'mx.messaging.MessageAgent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.MessageAgent.prototype.ROYALE_COMPILE_FLAGS = 26;
