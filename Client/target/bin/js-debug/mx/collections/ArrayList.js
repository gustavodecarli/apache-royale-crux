/**
 * Generated by Apache Royale Compiler from mx/collections/ArrayList.as
 * mx.collections.ArrayList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.collections.ArrayList');
/* Royale Dependency List: mx.events.CollectionEvent,mx.events.CollectionEventKind,mx.events.PropertyChangeEvent,mx.events.PropertyChangeEventKind,mx.resources.IResourceManager,mx.resources.ResourceManager,mx.utils.ArrayUtil,org.apache.royale.events.IEventDispatcher,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.utils.UIDUtil,org.apache.royale.utils.net.IDataInput,org.apache.royale.utils.net.IDataOutput,org.apache.royale.utils.Language,XML*/

goog.require('mx.collections.IList');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.utils.net.IExternalizable');



/**
 *  Construct a new ArrayList using the specified array as its source.
 *  If no source is specified an empty array will be used.
 *
 *  @asparam source The Array to use as a source for the ArrayList.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {mx.collections.IList}
 * @implements {org.apache.royale.utils.net.IExternalizable}
 * @param {Array=} source
 */
mx.collections.ArrayList = function(source) {
  source = typeof source !== 'undefined' ? source : null;
  
  this.mx_collections_ArrayList_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.collections.ArrayList.base(this, 'constructor');
  this.mx_collections_ArrayList_disableEvents();
  this.source = source;
  this.mx_collections_ArrayList_enableEvents();
};
goog.inherits(mx.collections.ArrayList, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.ArrayList', mx.collections.ArrayList);


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList_resourceManager;


/**
 * @private
 * @type {number}
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList__dispatchEvents = 0;


/**
 * @private
 * @type {Array}
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList__source;


/**
 * @private
 * @type {string}
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList__uid;


/**
 *  Get the item at the specified index.
 *
 *  @asparam  index the index in the list from which to retrieve the item
 *  @asparam  prefetch int indicating both the direction and amount of items
 *          to fetch during the request should the item not be local.
 *  @asreturn the item at that index, null if there is none
 *  @throws ItemPendingError if the data for that index needs to be
 *                           loaded from a remote location
 *  @throws RangeError if the index &lt; 0 or index &gt;= length
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @param {number=} prefetch
 * @return {Object}
 */
mx.collections.ArrayList.prototype.getItemAt = function(index, prefetch) {
  prefetch = typeof prefetch !== 'undefined' ? prefetch : 0;
  if (index < 0 || index >= this.length) {
    var /** @type {string} */ message = this.mx_collections_ArrayList_resourceManager.getString("collections", "outOfBounds", [index]);
    throw new RangeError(message);
  }
  return this.source[index];
};


/**
 *  Place the item at the specified index.
 *  If an item was already at that index the new item will replace it and it
 *  will be returned.
 *
 *  @asparam  item the new value for the index
 *  @asparam  index the index at which to place the item
 *  @asreturn the item that was replaced, null if none
 *  @throws RangeError if index is less than 0 or greater than or equal to length
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 * @return {Object}
 */
mx.collections.ArrayList.prototype.setItemAt = function(item, index) {
  if (index < 0 || index >= this.length) {
    var /** @type {string} */ message = this.mx_collections_ArrayList_resourceManager.getString("collections", "outOfBounds", [index]);
    throw new RangeError(message);
  }
  var /** @type {Object} */ oldItem = this.source[index];
  this.source[index] = item;
  this.stopTrackUpdates(oldItem);
  this.startTrackUpdates(item);
  if (this.mx_collections_ArrayList__dispatchEvents == 0) {
    var /** @type {boolean} */ hasCollectionListener = this.hasEventListener(mx.events.CollectionEvent.COLLECTION_CHANGE);
    var /** @type {boolean} */ hasPropertyListener = this.hasEventListener(mx.events.PropertyChangeEvent.PROPERTY_CHANGE);
    var /** @type {mx.events.PropertyChangeEvent} */ updateInfo;
    if (hasCollectionListener || hasPropertyListener) {
      updateInfo = new mx.events.PropertyChangeEvent(mx.events.PropertyChangeEvent.PROPERTY_CHANGE);
      updateInfo.kind = mx.events.PropertyChangeEventKind.UPDATE;
      updateInfo.oldValue = oldItem;
      updateInfo.newValue = item;
      updateInfo.property = index;
    }
    if (hasCollectionListener) {
      var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
      event.kind = mx.events.CollectionEventKind.REPLACE;
      event.location = index;
      event.items.push(updateInfo);
      this.dispatchEvent(event);
    }
    if (hasPropertyListener) {
      this.dispatchEvent(updateInfo);
    }
  }
  return oldItem;
};


/**
 *  Add the specified item to the end of the list.
 *  Equivalent to addItemAt(item, length);
 *
 *  @asparam item the item to add
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.ArrayList.prototype.addItem = function(item) {
  this.addItemAt(item, this.length);
};


/**
 *  Add the item at the specified index.
 *  Any item that was after this index is moved out by one.
 *
 *  @asparam item the item to place at the index
 *  @asparam index the index at which to place the item
 *  @throws RangeError if index is less than 0 or greater than the length
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {number} index
 */
mx.collections.ArrayList.prototype.addItemAt = function(item, index) {
  
/**
 * @const
 * @type {number}
 */
var spliceUpperBound = this.length;
  if (index < spliceUpperBound && index > 0) {
    this.source.splice(index, 0, item);
  } else if (index == spliceUpperBound) {
    this.source.push(item);
  } else if (index == 0) {
    this.source.unshift(item);
  } else {
    var /** @type {string} */ message = this.mx_collections_ArrayList_resourceManager.getString("collections", "outOfBounds", [index]);
    throw new RangeError(message);
  }
  this.startTrackUpdates(item);
  this.mx_collections_ArrayList_internalDispatchEvent(mx.events.CollectionEventKind.ADD, item, index);
};


/**
 *  @copy mx.collections.ListCollectionView#addAll()
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.IList} addList
 */
mx.collections.ArrayList.prototype.addAll = function(addList) {
  this.addAllAt(addList, this.length);
};


/**
 *  @copy mx.collections.ListCollectionView#addAllAt()
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.collections.IList} addList
 * @param {number} index
 */
mx.collections.ArrayList.prototype.addAllAt = function(addList, index) {
  
/**
 * @const
 * @type {number}
 */
var addListLength = addList.length;
  if (addListLength == 0)
    return;
  
/**
 * @const
 * @type {Array}
 */
var addedItems = [];
  this.mx_collections_ArrayList_disableEvents();
  for (var /** @type {number} */ i = 0; i < addListLength; i++) {
    var /** @type {Object} */ item = addList.getItemAt(i);
    this.addItemAt(item, (i + index) >> 0);
    addedItems.push(item);
  }
  this.mx_collections_ArrayList_enableEvents();
  if (this.mx_collections_ArrayList__dispatchEvents == 0) {
    
/**
 * @const
 * @type {mx.events.CollectionEvent}
 */
var event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.ADD;
    event.location = index;
    event.items = addedItems;
    this.dispatchEvent(event);
  }
};


/**
 *  Return the index of the item if it is in the list such that
 *  getItemAt(index) == item.
 *  Note that in this implementation the search is linear and is therefore
 *  O(n).
 *
 *  @asparam item the item to find
 *  @asreturn the index of the item, -1 if the item is not in the list.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @return {number}
 */
mx.collections.ArrayList.prototype.getItemIndex = function(item) {
  return mx.utils.ArrayUtil.getItemIndex(item, this.source);
};


/**
 *  Removes the specified item from this list, should it exist.
 *
 *  @asparam  item Object reference to the item that should be removed.
 *  @asreturn Boolean indicating if the item was removed.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @return {boolean}
 */
mx.collections.ArrayList.prototype.removeItem = function(item) {
  var /** @type {number} */ index = this.getItemIndex(item);
  var /** @type {boolean} */ result = index >= 0;
  if (result)
    this.removeItemAt(index);
  return result;
};


/**
 *  Remove the item at the specified index and return it.
 *  Any items that were after this index are now one index earlier.
 *
 *  @asparam index The index from which to remove the item.
 *  @asreturn The item that was removed.
 *  @throws RangeError if index &lt; 0 or index &gt;= length.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {number} index
 * @return {Object}
 */
mx.collections.ArrayList.prototype.removeItemAt = function(index) {
  
/**
 * @const
 * @type {number}
 */
var spliceUpperBound = (this.length - 1) >> 0;
  var /** @type {Object} */ removed;
  if (index > 0 && index < spliceUpperBound) {
    removed = this.source.splice(index, 1)[0];
  } else if (index == spliceUpperBound) {
    removed = this.source.pop();
  } else if (index == 0) {
    removed = this.source.shift();
  } else {
    var /** @type {string} */ message = this.mx_collections_ArrayList_resourceManager.getString("collections", "outOfBounds", [index]);
    throw new RangeError(message);
  }
  this.stopTrackUpdates(removed);
  this.mx_collections_ArrayList_internalDispatchEvent(mx.events.CollectionEventKind.REMOVE, removed, index);
  return removed;
};


/**
 *  Remove all items from the list.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 */
mx.collections.ArrayList.prototype.removeAll = function() {
  if (this.length > 0) {
    var /** @type {number} */ len = this.length;
    for (var /** @type {number} */ i = 0; i < len; i++) {
      this.stopTrackUpdates(this.source[i]);
    }
    this.source.splice(0, this.length);
    this.mx_collections_ArrayList_internalDispatchEvent(mx.events.CollectionEventKind.RESET);
  }
};


/**
 *  Notify the view that an item has been updated.
 *  This is useful if the contents of the view do not implement
 *  <code>IEventDispatcher</code>.
 *  If a property is specified the view may be able to optimize its
 *  notification mechanism.
 *  Otherwise it may choose to simply refresh the whole view.
 *
 *  @asparam item The item within the view that was updated.
 *
 *  @asparam property A String, QName, or int
 *  specifying the property that was updated.
 *
 *  @asparam oldValue The old value of that property.
 *  (If property was null, this can be the old value of the item.)
 *
 *  @asparam newValue The new value of that property.
 *  (If property was null, there's no need to specify this
 *  as the item is assumed to be the new value.)
 *
 *  @see mx.events.CollectionEvent
 *  @see mx.core.IPropertyChangeNotifier
 *  @see mx.events.PropertyChangeEvent
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 * @param {Object=} property
 * @param {Object=} oldValue
 * @param {Object=} newValue
 */
mx.collections.ArrayList.prototype.itemUpdated = function(item, property, oldValue, newValue) {
  property = typeof property !== 'undefined' ? property : null;
  oldValue = typeof oldValue !== 'undefined' ? oldValue : null;
  newValue = typeof newValue !== 'undefined' ? newValue : null;
  var /** @type {mx.events.PropertyChangeEvent} */ event = new mx.events.PropertyChangeEvent(mx.events.PropertyChangeEvent.PROPERTY_CHANGE);
  event.kind = mx.events.PropertyChangeEventKind.UPDATE;
  event.source = item;
  event.property = property;
  event.oldValue = oldValue;
  event.newValue = newValue;
  if (!property) {
    this.stopTrackUpdates(oldValue);
    this.startTrackUpdates(newValue);
  }
  this.itemUpdateHandler(event);
};


/**
 *  Return an Array that is populated in the same order as the IList
 *  implementation.
 *
 *  @asreturn An Array populated in the same order as the IList
 *  implementation.
 *
 *  @throws ItemPendingError if the data is not yet completely loaded
 *  from a remote location
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @return {Array}
 */
mx.collections.ArrayList.prototype.toArray = function() {
  return this.source.concat();
};


/**
 *  Ensures that only the source property is serialized.
 *  @asprivate
 * @export
 * @param {org.apache.royale.utils.net.IDataInput} input
 */
mx.collections.ArrayList.prototype.readExternal = function(input) {
  this.source = input.readObject();
};


/**
 *  Ensures that only the source property is serialized.
 *  @asprivate
 * @export
 * @param {org.apache.royale.utils.net.IDataOutput} output
 */
mx.collections.ArrayList.prototype.writeExternal = function(output) {
  output.writeObject(this.mx_collections_ArrayList__source);
};


/**
 *  Pretty prints the contents of this ArrayList to a string and returns it.
 *
 *  @asreturn A String containing the contents of the ArrayList.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.collections.ArrayList.prototype.toString = function() {
  if (this.source)
    return this.source.toString();
  else
    return org.apache.royale.reflection.getQualifiedClassName(this);
};


/**
 *  Enables event dispatch for this list.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList_enableEvents = function() {
  this.mx_collections_ArrayList__dispatchEvents++;
  if (this.mx_collections_ArrayList__dispatchEvents > 0)
    this.mx_collections_ArrayList__dispatchEvents = 0;
};


/**
 *  Disables event dispatch for this list.
 *  To re-enable events call enableEvents(), enableEvents() must be called
 *  a matching number of times as disableEvents().
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList_disableEvents = function() {
  this.mx_collections_ArrayList__dispatchEvents--;
};


/**
 *  Dispatches a collection event with the specified information.
 *
 *  @asparam kind String indicates what the kind property of the event should be
 *  @asparam item Object reference to the item that was added or removed
 *  @asparam location int indicating where in the source the item was added.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @private
 * @param {string} kind
 * @param {Object=} item
 * @param {number=} location
 */
mx.collections.ArrayList.prototype.mx_collections_ArrayList_internalDispatchEvent = function(kind, item, location) {
  item = typeof item !== 'undefined' ? item : null;
  location = typeof location !== 'undefined' ? location : -1;
  if (this.mx_collections_ArrayList__dispatchEvents == 0) {
    if (this.hasEventListener(mx.events.CollectionEvent.COLLECTION_CHANGE)) {
      var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
      event.kind = kind;
      if (kind != mx.events.CollectionEventKind.RESET && kind != mx.events.CollectionEventKind.REFRESH)
        event.items.push(item);
      event.location = location;
      this.dispatchEvent(event);
    }
    if (this.hasEventListener(mx.events.PropertyChangeEvent.PROPERTY_CHANGE) && (kind == mx.events.CollectionEventKind.ADD || kind == mx.events.CollectionEventKind.REMOVE)) {
      var /** @type {mx.events.PropertyChangeEvent} */ objEvent = new mx.events.PropertyChangeEvent(mx.events.PropertyChangeEvent.PROPERTY_CHANGE);
      objEvent.property = location;
      if (kind == mx.events.CollectionEventKind.ADD)
        objEvent.newValue = item;
      else
        objEvent.oldValue = item;
      this.dispatchEvent(objEvent);
    }
  }
};


/**
 *  Called when any of the contained items in the list dispatches a
 *  <code>PropertyChangeEvent</code>.
 *  Wraps it in a <code>CollectionEventKind.UPDATE</code> object.
 *
 *  @asparam event The event object for the <code>PropertyChangeEvent</code>.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.events.PropertyChangeEvent} event
 */
mx.collections.ArrayList.prototype.itemUpdateHandler = function(event) {
  this.mx_collections_ArrayList_internalDispatchEvent(mx.events.CollectionEventKind.UPDATE, event);
  if (this.mx_collections_ArrayList__dispatchEvents == 0 && this.hasEventListener(mx.events.PropertyChangeEvent.PROPERTY_CHANGE)) {
    var /** @type {mx.events.PropertyChangeEvent} */ objEvent = org.apache.royale.utils.Language.as(event.cloneEvent(), mx.events.PropertyChangeEvent, true);
    var /** @type {number} */ index = (this.getItemIndex(event.target)) >>> 0;
    objEvent.property = index.toString() + "." + event.property;
    this.dispatchEvent(objEvent);
  }
};


/**
 *  If the item is an IEventDispatcher, watch it for updates.
 *  This method is called by the <code>addItemAt()</code> method,
 *  and when the source is initially assigned.
 *
 *  @asparam item The item passed to the <code>addItemAt()</code> method.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.ArrayList.prototype.startTrackUpdates = function(item) {
  if (item && org.apache.royale.utils.Language.is(item, org.apache.royale.events.IEventDispatcher)) {
    org.apache.royale.utils.Language.as(item, org.apache.royale.events.IEventDispatcher, true).addEventListener(mx.events.PropertyChangeEvent.PROPERTY_CHANGE, org.apache.royale.utils.Language.closure(this.itemUpdateHandler, this, 'itemUpdateHandler'), false);
  }
};


/**
 *  If the item is an IEventDispatcher, stop watching it for updates.
 *  This method is called by the <code>removeItemAt()</code> and
 *  <code>removeAll()</code> methods, and before a new
 *  source is assigned.
 *
 *  @asparam item The item passed to the <code>removeItemAt()</code> method.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {Object} item
 */
mx.collections.ArrayList.prototype.stopTrackUpdates = function(item) {
  if (item && org.apache.royale.utils.Language.is(item, org.apache.royale.events.IEventDispatcher)) {
    org.apache.royale.utils.Language.as(item, org.apache.royale.events.IEventDispatcher, true).removeEventListener(mx.events.PropertyChangeEvent.PROPERTY_CHANGE, org.apache.royale.utils.Language.closure(this.itemUpdateHandler, this, 'itemUpdateHandler'));
  }
};


mx.collections.ArrayList.prototype.get__length = function() {
  if (this.source)
    return (this.source.length) >> 0;
  else
    return 0;
};


mx.collections.ArrayList.prototype.get__source = function() {
  return this.mx_collections_ArrayList__source;
};


mx.collections.ArrayList.prototype.set__source = function(s) {
  var /** @type {number} */ i = 0;
  var /** @type {number} */ len = 0;
  //var /** @type {number} */ i = 0;
  //var /** @type {number} */ len = 0;
  if (this.mx_collections_ArrayList__source && this.mx_collections_ArrayList__source.length) {
    len = (this.mx_collections_ArrayList__source.length) >> 0;
    for (i = 0; i < len; i++) {
      this.stopTrackUpdates(this.mx_collections_ArrayList__source[i]);
    }
  }
  this.mx_collections_ArrayList__source = s ? s : [];
  len = (this.mx_collections_ArrayList__source.length) >> 0;
  for (i = 0; i < len; i++) {
    this.startTrackUpdates(this.mx_collections_ArrayList__source[i]);
  }
  if (this.mx_collections_ArrayList__dispatchEvents == 0) {
    var /** @type {mx.events.CollectionEvent} */ event = new mx.events.CollectionEvent(mx.events.CollectionEvent.COLLECTION_CHANGE);
    event.kind = mx.events.CollectionEventKind.RESET;
    this.dispatchEvent(event);
  }
};


mx.collections.ArrayList.prototype.get__uid = function() {
  if (!this.mx_collections_ArrayList__uid) {
    this.mx_collections_ArrayList__uid = org.apache.royale.utils.UIDUtil.createUID();
  }
  return this.mx_collections_ArrayList__uid;
};


mx.collections.ArrayList.prototype.set__uid = function(value) {
  this.mx_collections_ArrayList__uid = value;
};


Object.defineProperties(mx.collections.ArrayList.prototype, /** @lends {mx.collections.ArrayList.prototype} */ {
/**
  * @export
  * @type {number} */
length: {
get: mx.collections.ArrayList.prototype.get__length},
/**
  * @export
  * @type {Array} */
source: {
get: mx.collections.ArrayList.prototype.get__source,
set: mx.collections.ArrayList.prototype.set__source},
/**
  * @export
  * @type {string} */
uid: {
get: mx.collections.ArrayList.prototype.get__uid,
set: mx.collections.ArrayList.prototype.set__uid}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.ArrayList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ArrayList', qName: 'mx.collections.ArrayList', kind: 'class' }], interfaces: [mx.collections.IList, org.apache.royale.utils.net.IExternalizable] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.ArrayList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'length': { type: 'int', access: 'readonly', declaredBy: 'mx.collections.ArrayList', metadata: function () { return [ { name: 'Bindable', args: [ { key: '', value: 'collectionChange' } ] } ]; }},
        'source': { type: 'Array', access: 'readwrite', declaredBy: 'mx.collections.ArrayList'},
        'uid': { type: 'String', access: 'readwrite', declaredBy: 'mx.collections.ArrayList'}
      };
    },
    methods: function () {
      return {
        'ArrayList': { type: '', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Array', true ]; }},
        'getItemAt': { type: 'Object', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'int', false ,'int', true ]; }},
        'setItemAt': { type: 'Object', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'addItem': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ]; }},
        'addItemAt': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ,'int', false ]; }},
        'addAll': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'mx.collections.IList', false ]; }},
        'addAllAt': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'mx.collections.IList', false ,'int', false ]; }},
        'getItemIndex': { type: 'int', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ]; }},
        'removeItem': { type: 'Boolean', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ]; }},
        'removeItemAt': { type: 'Object', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'int', false ]; }},
        'removeAll': { type: 'void', declaredBy: 'mx.collections.ArrayList'},
        'itemUpdated': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'Object', false ,'Object', true ,'Object', true ,'Object', true ]; }},
        'toArray': { type: 'Array', declaredBy: 'mx.collections.ArrayList'},
        'readExternal': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'org.apache.royale.utils.net.IDataInput', false ]; }},
        'writeExternal': { type: 'void', declaredBy: 'mx.collections.ArrayList', parameters: function () { return [ 'org.apache.royale.utils.net.IDataOutput', false ]; }},
        'toString': { type: 'String', declaredBy: 'mx.collections.ArrayList'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.ArrayList.prototype.ROYALE_COMPILE_FLAGS = 26;
