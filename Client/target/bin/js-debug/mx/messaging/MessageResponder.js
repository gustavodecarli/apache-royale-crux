/**
 * Generated by Apache Royale Compiler from mx/messaging/MessageResponder.as
 * mx.messaging.MessageResponder
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.MessageResponder');
/* Royale Dependency List: mx.messaging.Channel,mx.messaging.MessageAgent,mx.messaging.messages.ErrorMessage,mx.messaging.messages.IMessage,mx.resources.IResourceManager,mx.resources.ResourceManager,org.apache.royale.events.Event,org.apache.royale.utils.Timer,org.apache.royale.utils.Language,XML*/

goog.require('mx.net.Responder');



/**
 *  Constructs a MessageResponder to handle the response for the specified
 *  Message for the specified MessageAgent.
 *
 *  @asparam agent The MessageAgent sending the Message.
 * 
 *  @asparam message The Message being sent.
 * 
 *  @asparam channel The Channel used to send. 
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @constructor
 * @extends {mx.net.Responder}
 * @param {mx.messaging.MessageAgent} agent
 * @param {mx.messaging.messages.IMessage} message
 * @param {mx.messaging.Channel=} channel
 */
mx.messaging.MessageResponder = function(agent, message, channel) {
  channel = typeof channel !== 'undefined' ? channel : null;
  
  this.mx_messaging_MessageResponder_resourceManager = mx.resources.ResourceManager.getInstance();
  mx.messaging.MessageResponder.base(this, 'constructor', org.apache.royale.utils.Language.closure(this.result, this, 'result'), org.apache.royale.utils.Language.closure(this.status, this, 'status'));
  this.mx_messaging_MessageResponder__agent = agent;
  this.mx_messaging_MessageResponder__channel = channel;
  this.mx_messaging_MessageResponder__message = message;
  this.mx_messaging_MessageResponder__requestTimedOut = false;
};
goog.inherits(mx.messaging.MessageResponder, mx.net.Responder);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.MessageResponder', mx.messaging.MessageResponder);


/**
 * @private
 * @type {boolean}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder__requestTimedOut;


/**
 * @private
 * @type {org.apache.royale.utils.Timer}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder__requestTimer;


/**
 * @private
 * @type {mx.resources.IResourceManager}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder_resourceManager;


/**
 * @private
 * @type {mx.messaging.MessageAgent}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder__agent;


/**
 * @private
 * @type {mx.messaging.Channel}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder__channel;


/**
 * @private
 * @type {mx.messaging.messages.IMessage}
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder__message;


/**
 *  @asprivate 
 *  Starts a timer to monitor a request timeout. If the timer hits the
 *  specified requestTimeout before a response is returned, 
 *  <code>requestTimedOut()</code> is invoked and any subsequent 
 *  response is ignored by this responder.
 * 
 *  @asparam requestTimeout The amount of time in seconds to allow a request
 *                        to run before timing it out.
 * @export
 * @param {number} requestTimeout
 */
mx.messaging.MessageResponder.prototype.startRequestTimeout = function(requestTimeout) {
  this.mx_messaging_MessageResponder__requestTimer = new org.apache.royale.utils.Timer(requestTimeout * 1000, 1);
  this.mx_messaging_MessageResponder__requestTimer.addEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.mx_messaging_MessageResponder_timeoutRequest, this, 'timeoutRequest'));
  this.mx_messaging_MessageResponder__requestTimer.start();
};


/**
 *  Called by the channel that created this MessageResponder when a
 *  response returns from the destination.
 *  This method performs core result processing and then invokes the
 *  <code>resultHandler()</code> method that subclasses may override to
 *  perform any necessary custom processing.
 *
 *  @asparam message The result Message returned by the destination.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @param {mx.messaging.messages.IMessage} message
 */
mx.messaging.MessageResponder.prototype.result = function(message) {
  if (!this.mx_messaging_MessageResponder__requestTimedOut) {
    if (this.mx_messaging_MessageResponder__requestTimer != null) {
      this.mx_messaging_MessageResponder_releaseTimer();
    }
    this.resultHandler(message);
  }
};


/**
 *  Called by the channel that created this MessageResponder when a fault
 *  response returns from the destination.
 *  This method performs core result processing and then invokes the
 *  <code>statusHandler()</code> method that subclasses may override to
 *  perform any necessary custom processing.
 * 
 *  @asparam message The fault Message returned by the destination.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @param {mx.messaging.messages.IMessage} message
 */
mx.messaging.MessageResponder.prototype.status = function(message) {
  if (!this.mx_messaging_MessageResponder__requestTimedOut) {
    if (this.mx_messaging_MessageResponder__requestTimer != null) {
      this.mx_messaging_MessageResponder_releaseTimer();
    }
    this.statusHandler(message);
  }
};


/**
 *  Constructs an ErrorMessage that can be passed to the associated 
 *  MessageAgent's callbacks upon a request timeout.
 *
 *  @asreturn Returns an ErrorMessage that can be passed to the associated
 *  MessageAgent's callbacks upon a request timeout.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @return {mx.messaging.messages.ErrorMessage}
 */
mx.messaging.MessageResponder.prototype.createRequestTimeoutErrorMessage = function() {
  var /** @type {mx.messaging.messages.ErrorMessage} */ errorMsg = new mx.messaging.messages.ErrorMessage();
  errorMsg.correlationId = this.message.messageId;
  errorMsg.faultCode = "Client.Error.RequestTimeout";
  errorMsg.faultString = this.mx_messaging_MessageResponder_resourceManager.getString("messaging", "requestTimedOut");
  errorMsg.faultDetail = this.mx_messaging_MessageResponder_resourceManager.getString("messaging", "requestTimedOut.details");
  return errorMsg;
};


/**
 *  Subclasses must override this method to perform custom processing of
 *  the result and invoke the proper callbacks on the associated 
 *  MessageAgent.
 * 
 *  @asparam message The result Message returned by the destination.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @param {mx.messaging.messages.IMessage} message
 */
mx.messaging.MessageResponder.prototype.resultHandler = function(message) {
};


/**
 *  Subclasses must override this method to handle a request timeout and 
 *  invoke the proper callbacks on the associated MessageAgent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 */
mx.messaging.MessageResponder.prototype.requestTimedOut = function() {
};


/**
 *  Subclasses must override this method to perform custom processing of
 *  the status and invoke the proper callbacks on the associated 
 *  MessageAgent.
 * 
 *  @asparam message The fault Message returned by the destination.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion BlazeDS 4
 *  @productversion LCDS 3 
 * @export
 * @param {mx.messaging.messages.IMessage} message
 */
mx.messaging.MessageResponder.prototype.statusHandler = function(message) {
};


/**
 *  @asprivate
 *  Helper callback that flags the request as timed out before delegating
 *  to custom timeout processing.
 * @private
 * @param {org.apache.royale.events.Event} event
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder_timeoutRequest = function(event) {
  this.mx_messaging_MessageResponder__requestTimedOut = true;
  this.mx_messaging_MessageResponder_releaseTimer();
  this.requestTimedOut();
};


/**
 *  @asprivate
 *  Utility method to shutdown the request timeout Timer.
 * @private
 */
mx.messaging.MessageResponder.prototype.mx_messaging_MessageResponder_releaseTimer = function() {
  this.mx_messaging_MessageResponder__requestTimer.stop();
  this.mx_messaging_MessageResponder__requestTimer.removeEventListener(org.apache.royale.utils.Timer.TIMER, org.apache.royale.utils.Language.closure(this.mx_messaging_MessageResponder_timeoutRequest, this, 'timeoutRequest'));
  this.mx_messaging_MessageResponder__requestTimer = null;
};


mx.messaging.MessageResponder.prototype.get__agent = function() {
  return this.mx_messaging_MessageResponder__agent;
};


mx.messaging.MessageResponder.prototype.get__channel = function() {
  return this.mx_messaging_MessageResponder__channel;
};


mx.messaging.MessageResponder.prototype.get__message = function() {
  return this.mx_messaging_MessageResponder__message;
};


mx.messaging.MessageResponder.prototype.set__message = function(value) {
  this.mx_messaging_MessageResponder__message = value;
};


Object.defineProperties(mx.messaging.MessageResponder.prototype, /** @lends {mx.messaging.MessageResponder.prototype} */ {
/**
  * @export
  * @type {mx.messaging.MessageAgent} */
agent: {
get: mx.messaging.MessageResponder.prototype.get__agent},
/**
  * @export
  * @type {mx.messaging.Channel} */
channel: {
get: mx.messaging.MessageResponder.prototype.get__channel},
/**
  * @export
  * @type {mx.messaging.messages.IMessage} */
message: {
get: mx.messaging.MessageResponder.prototype.get__message,
set: mx.messaging.MessageResponder.prototype.set__message}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.MessageResponder.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MessageResponder', qName: 'mx.messaging.MessageResponder', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.MessageResponder.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'agent': { type: 'mx.messaging.MessageAgent', access: 'readonly', declaredBy: 'mx.messaging.MessageResponder'},
        'channel': { type: 'mx.messaging.Channel', access: 'readonly', declaredBy: 'mx.messaging.MessageResponder'},
        'message': { type: 'mx.messaging.messages.IMessage', access: 'readwrite', declaredBy: 'mx.messaging.MessageResponder'}
      };
    },
    methods: function () {
      return {
        'MessageResponder': { type: '', declaredBy: 'mx.messaging.MessageResponder', parameters: function () { return [ 'mx.messaging.MessageAgent', false ,'mx.messaging.messages.IMessage', false ,'mx.messaging.Channel', true ]; }},
        'startRequestTimeout': { type: 'void', declaredBy: 'mx.messaging.MessageResponder', parameters: function () { return [ 'int', false ]; }},
        'result': { type: 'void', declaredBy: 'mx.messaging.MessageResponder', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ]; }},
        'status': { type: 'void', declaredBy: 'mx.messaging.MessageResponder', parameters: function () { return [ 'mx.messaging.messages.IMessage', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.MessageResponder.prototype.ROYALE_COMPILE_FLAGS = 26;
