/**
 * Generated by Apache Royale Compiler from org/apache/royale/crux/utils/event/EventHandler.as
 * org.apache.royale.crux.utils.event.EventHandler
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.crux.utils.event.EventHandler');
/* Royale Dependency List: mx.rpc.AsyncToken,org.apache.royale.crux.metadata.EventHandlerMetadataTag,org.apache.royale.crux.reflection.MetadataHostMethod,org.apache.royale.crux.reflection.MethodParameter,org.apache.royale.crux.reflection.TypeCache,org.apache.royale.crux.reflection.TypeDescriptor,org.apache.royale.crux.utils.async.AsyncTokenOperation,org.apache.royale.crux.utils.async.IAsynchronousEvent,org.apache.royale.crux.utils.async.IAsynchronousOperation,org.apache.royale.events.Event,org.apache.royale.reflection.TypeDefinition,org.apache.royale.reflection.VariableDefinition,org.apache.royale.reflection.getQualifiedClassName,org.apache.royale.reflection.utils.getMembersWithNameMatch,org.apache.royale.utils.Language*/




/**
 * Constructor
 * @constructor
 * @param {org.apache.royale.crux.metadata.EventHandlerMetadataTag} metadataTag
 * @param {Function} method
 * @param {Object} eventClass
 */
org.apache.royale.crux.utils.event.EventHandler = function(metadataTag, method, eventClass) {
  this._metadataTag = metadataTag;
  this._method = method;
  this._eventClass = eventClass;
  this.verifyTag();
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.crux.utils.event.EventHandler', org.apache.royale.crux.utils.event.EventHandler);


/**
 * @protected
 * @type {org.apache.royale.crux.metadata.EventHandlerMetadataTag}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype._metadataTag;


/**
 * @protected
 * @type {Function}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype._method;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype._eventClass;


/**
 * @protected
 * @type {string}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype._eventClassName;


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype._domain;


/**
 * @protected
 * @type {org.apache.royale.crux.reflection.MetadataHostMethod}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.hostMethod;


/**
 * HandleEvent
 *
 * @asparam event The Event to handle.
 * @export
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.handleEvent = function(event) {
  if ((this.eventClass != null) && !org.apache.royale.utils.Language.is(event, this.eventClass))
    return;
  var /** @type {*} */ result = null;
  if (this.metadataTag.properties != null) {
    if (this.validateEvent(event, this.metadataTag))
      result = this.method.apply(null, this.getEventArgs(event, this.metadataTag.properties));
  } else if (this.hostMethod.requiredParameterCount <= 1) {
    if (this.hostMethod.parameterCount > 0 && org.apache.royale.utils.Language.is(event, this.getParameterType(0)))
      result = this.method.apply(null, [event]);
    else
      result = this.method.call(null);
  }
  if (org.apache.royale.utils.Language.is(event, org.apache.royale.crux.utils.async.IAsynchronousEvent) && org.apache.royale.utils.Language.as(event, org.apache.royale.crux.utils.async.IAsynchronousEvent, true).step != null) {
    if (org.apache.royale.utils.Language.is(result, org.apache.royale.crux.utils.async.IAsynchronousOperation))
      org.apache.royale.utils.Language.as(event, org.apache.royale.crux.utils.async.IAsynchronousEvent, true).step.addAsynchronousOperation(org.apache.royale.utils.Language.as(result, org.apache.royale.crux.utils.async.IAsynchronousOperation));
    else if (org.apache.royale.utils.Language.is(result, mx.rpc.AsyncToken))
      org.apache.royale.utils.Language.as(event, org.apache.royale.crux.utils.async.IAsynchronousEvent, true).step.addAsynchronousOperation(new org.apache.royale.crux.utils.async.AsyncTokenOperation(org.apache.royale.utils.Language.as(result, mx.rpc.AsyncToken)));
  }
  if (this.metadataTag.stopPropagation)
    event.stopPropagation();
  if (this.metadataTag.stopImmediatePropagation)
    event.stopImmediatePropagation();
};


/**
 * @protected
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.verifyTag = function() {
  this.hostMethod = org.apache.royale.utils.Language.as(this.metadataTag.host, org.apache.royale.crux.reflection.MetadataHostMethod, true);
  if (this.metadataTag.properties == null && this.hostMethod.requiredParameterCount > 0) {
    var /** @type {org.apache.royale.crux.reflection.TypeDescriptor} */ eventClassDescriptor = org.apache.royale.crux.reflection.TypeCache.getTypeDescriptor(this.eventClass);
    var /** @type {string} */ parameterTypeName = org.apache.royale.reflection.getQualifiedClassName(this.getParameterType(0));
    if (eventClassDescriptor.satisfiesType(parameterTypeName) == false)
      throw new Error(this.metadataTag.asTag + " is invalid. If you do not specify a properties attribute your method must either accept no arguments or an object compatible with the type specified in the tag.");
  }
  if (this.metadataTag.properties != null && (this.metadataTag.properties.length < this.hostMethod.requiredParameterCount || this.metadataTag.properties.length > this.hostMethod.parameterCount))
    throw new Error("The properties attribute of " + this.metadataTag.asTag + " is not compatible with the method signature of " + this.hostMethod.name + "().");
};


/**
 * @protected
 * @type {Object}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.accessChains;


/**
 * Validate Event
 *
 * Evalutes an Event to ensure it has all of the required properties specified in the [EventHandler] tag, if applicable.
 *
 * @asparam event The Event to validate.
 * @asparam properties The required properties specified in the [EventHandler] tag.
 * @asreturns A Boolean value indicating whether the event has all of the required properties specified in the [EventHandler] tag.
 * @protected
 * @param {org.apache.royale.events.Event} event
 * @param {org.apache.royale.crux.metadata.EventHandlerMetadataTag} metadataTag
 * @return {boolean}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.validateEvent = function(event, metadataTag) {
  if (!this.accessChains) {
    this.accessChains = {};
    var /** @type {org.apache.royale.crux.reflection.TypeDescriptor} */ eventClassDescriptor = org.apache.royale.crux.reflection.TypeCache.getTypeDescriptor(this.eventClass);
    var /** @type {org.apache.royale.reflection.TypeDefinition} */ eventDefinition = eventClassDescriptor.typeDefinition;
    this._eventClassName = eventDefinition.qualifiedName;
    var foreachiter0_target = metadataTag.properties;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var property = foreachiter0_target[foreachiter0];
    {
      var /** @type {Array} */ chain = property.split(".");
      var /** @type {Array} */ accessChain = [];
      var /** @type {org.apache.royale.reflection.TypeDefinition} */ definition = eventDefinition;
      while (chain.length) {
        var /** @type {string} */ prop = org.apache.royale.utils.Language.string(chain.shift());
        var /** @type {Array} */ search = org.apache.royale.reflection.utils.getMembersWithNameMatch(definition.variables, prop);
        if (search.length == 0)
          org.apache.royale.reflection.utils.getMembersWithNameMatch(definition.accessors, prop, search);
        if (search.length != 1) {
          throw new Error("Unable to handle event: " + property + " does not exist as a property of " + eventClassDescriptor.className + ".");
        }
        var /** @type {org.apache.royale.reflection.VariableDefinition} */ varDef = search[0];
        accessChain.push(varDef);
        if (chain.length) {
          definition = varDef.type;
        }
      }
      this.accessChains[property] = accessChain;
    }}
    
  }
  var foreachiter1_target = metadataTag.properties;
  for (var foreachiter1 in foreachiter1_target) 
  {
  property = foreachiter1_target[foreachiter1];
  {
    accessChain = this.accessChains[property];
    var /** @type {Object} */ o = event;
    if (accessChain.length > 1) {
      var /** @type {number} */ index = 0;
      var /** @type {number} */ l = (accessChain.length - 1) >> 0;
      while (index < l) {
        if (o == null) {
          throw new Error("Unable to handle event: " + varDef.name + " is null as a property of " + this._eventClassName + " as defined in " + metadataTag.asTag + ".");
        }
        varDef = accessChain[index];
        o = varDef.getValue(o);
      }
    }
  }}
  
  return true;
};


/**
 * Get Event Arguments
 *
 * @asparam event
 * @asparam properties
 * @protected
 * @param {org.apache.royale.events.Event} event
 * @param {Array} properties
 * @return {Array}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.getEventArgs = function(event, properties) {
  var /** @type {Array} */ args = [];
  var foreachiter2_target = properties;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var property = foreachiter2_target[foreachiter2];
  {
    var /** @type {org.apache.royale.reflection.VariableDefinition} */ varDef;
    var /** @type {Array} */ chain = this.accessChains[property];
    var /** @type {number} */ l = (chain.length) >>> 0;
    if (l == 1) {
      varDef = chain[0];
      args[args.length] = org.apache.royale.utils.Language.as(chain[0], org.apache.royale.reflection.VariableDefinition, true).getValue(event);
    } else {
      var /** @type {Object} */ o = event;
      for (var /** @type {number} */ i = 0; i < l; i++) {
        o = org.apache.royale.utils.Language.as(chain[i], org.apache.royale.reflection.VariableDefinition, true).getValue(o);
      }
      args[args.length] = o;
    }
  }}
  
  return args;
};


/**
 * Get Parameter Type
 *
 * @asparam parameterIndex The index of parameter of the event handler method.
 * @asreturns The type for the specified parameter.
 * @protected
 * @param {number} parameterIndex
 * @return {Object}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.getParameterType = function(parameterIndex) {
  var /** @type {Array} */ parameters = this.hostMethod.parameters;
  if (parameterIndex < parameters.length)
    return org.apache.royale.utils.Language.as(parameters[parameterIndex], org.apache.royale.crux.reflection.MethodParameter).type;
  return null;
};


org.apache.royale.crux.utils.event.EventHandler.prototype.get__metadataTag = function() {
  return this._metadataTag;
};


org.apache.royale.crux.utils.event.EventHandler.prototype.get__method = function() {
  return this._method;
};


org.apache.royale.crux.utils.event.EventHandler.prototype.get__eventClass = function() {
  return this._eventClass;
};


org.apache.royale.crux.utils.event.EventHandler.prototype.get__domain = function() {
  return this._domain;
};


Object.defineProperties(org.apache.royale.crux.utils.event.EventHandler.prototype, /** @lends {org.apache.royale.crux.utils.event.EventHandler.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.crux.metadata.EventHandlerMetadataTag} */
metadataTag: {
get: org.apache.royale.crux.utils.event.EventHandler.prototype.get__metadataTag},
/**
  * @export
  * @type {Function} */
method: {
get: org.apache.royale.crux.utils.event.EventHandler.prototype.get__method},
/**
  * @export
  * @type {Object} */
eventClass: {
get: org.apache.royale.crux.utils.event.EventHandler.prototype.get__eventClass},
/**
  * @export
  * @type {Object} */
domain: {
get: org.apache.royale.crux.utils.event.EventHandler.prototype.get__domain}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventHandler', qName: 'org.apache.royale.crux.utils.event.EventHandler', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'metadataTag': { type: 'org.apache.royale.crux.metadata.EventHandlerMetadataTag', access: 'readonly', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler'},
        'method': { type: 'Function', access: 'readonly', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler'},
        'eventClass': { type: 'Class', access: 'readonly', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler'},
        'domain': { type: 'Object', access: 'readonly', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler'}
      };
    },
    methods: function () {
      return {
        'EventHandler': { type: '', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler', parameters: function () { return [ 'org.apache.royale.crux.metadata.EventHandlerMetadataTag', false ,'Function', false ,'Class', false ]; }},
        'handleEvent': { type: 'void', declaredBy: 'org.apache.royale.crux.utils.event.EventHandler', parameters: function () { return [ 'org.apache.royale.events.Event', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.crux.utils.event.EventHandler.prototype.ROYALE_COMPILE_FLAGS = 10;

//# sourceMappingURL=./EventHandler.js.map
