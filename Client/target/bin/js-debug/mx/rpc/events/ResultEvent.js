/**
 * Generated by Apache Royale Compiler from mx/rpc/events/ResultEvent.as
 * mx.rpc.events.ResultEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.rpc.events.ResultEvent');
/* Royale Dependency List: mx.core.mx_internal,mx.messaging.messages.AbstractMessage,mx.messaging.messages.IMessage,mx.rpc.AsyncToken,org.apache.royale.events.Event,org.apache.royale.utils.Language,XML*/

goog.require('mx.rpc.events.AbstractEvent');



/**
 * Creates a new ResultEvent.
 * @asparam type The event type; indicates the action that triggered the event.
 * @asparam bubbles Specifies whether the event can bubble up the display list hierarchy.
 * @asparam cancelable Specifies whether the behavior associated with the event can be prevented.
 * @asparam result Object that holds the actual result of the call.
 * @asparam token Token that represents the call to the method. Used in the asynchronous completion token pattern.
 * @asparam message Source Message of the result.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @constructor
 * @extends {mx.rpc.events.AbstractEvent}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {Object=} result
 * @param {mx.rpc.AsyncToken=} token
 * @param {mx.messaging.messages.IMessage=} message
 */
mx.rpc.events.ResultEvent = function(type, bubbles, cancelable, result, token, message) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : false;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : true;
  result = typeof result !== 'undefined' ? result : null;
  token = typeof token !== 'undefined' ? token : null;
  message = typeof message !== 'undefined' ? message : null;
  mx.rpc.events.ResultEvent.base(this, 'constructor', type, bubbles, cancelable, token, message);
  if (message != null && message.headers != null)
    this.mx_rpc_events_ResultEvent__statusCode = (org.apache.royale.utils.Language.as(message.headers[mx.messaging.messages.AbstractMessage.STATUS_CODE_HEADER], org.apache.royale.utils.Language.synthType('int'))) >> 0;
  this.mx_rpc_events_ResultEvent__result = result;
};
goog.inherits(mx.rpc.events.ResultEvent, mx.rpc.events.AbstractEvent);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.rpc.events.ResultEvent', mx.rpc.events.ResultEvent);


/**
 * @export
 * @const
 * @type {string}
 */
mx.rpc.events.ResultEvent.RESULT = "result";


/**
 * @asprivate
 * @export
 * @param {Object=} result
 * @param {mx.rpc.AsyncToken=} token
 * @param {mx.messaging.messages.IMessage=} message
 * @return {mx.rpc.events.ResultEvent}
 */
mx.rpc.events.ResultEvent.createEvent = function(result, token, message) {
  result = typeof result !== 'undefined' ? result : null;
  token = typeof token !== 'undefined' ? token : null;
  message = typeof message !== 'undefined' ? message : null;
  return new mx.rpc.events.ResultEvent(mx.rpc.events.ResultEvent.RESULT, false, true, result, token, message);
};


/**
 * Because this event can be re-dispatched we have to implement clone to
 * return the appropriate type, otherwise we will get just the standard
 * event type.
 * @asprivate
 * @export
 * @override
 */
mx.rpc.events.ResultEvent.prototype.clone = function() {
  return new mx.rpc.events.ResultEvent(this.type, this.bubbles, this.cancelable, this.result, this.token, this.message);
};


/**
 * Returns a string representation of the ResultEvent.
 *
 * @asreturn String representation of the ResultEvent.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @override
 */
mx.rpc.events.ResultEvent.prototype.toString = function() {
  return this.formatToString("ResultEvent", "messageId", "type", "bubbles", "cancelable", "eventPhase");
};


/**
 * @export
 * @override
 */
mx.rpc.events.ResultEvent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__callTokenResponders = function() {
  if (this.token != null)
    this.token.http_$$www_adobe_com$2006$flex$mx$internal__applyResult(this);
};


/**
 * @export
 * @param {Object} r
 */
mx.rpc.events.ResultEvent.prototype.http_$$www_adobe_com$2006$flex$mx$internal__setResult = function(r) {
  this.mx_rpc_events_ResultEvent__result = r;
};


/**
 * @private
 * @type {Object}
 */
mx.rpc.events.ResultEvent.prototype.mx_rpc_events_ResultEvent__result;


/**
 * @private
 * @type {Object}
 */
mx.rpc.events.ResultEvent.prototype.mx_rpc_events_ResultEvent__headers;


/**
 * @private
 * @type {number}
 */
mx.rpc.events.ResultEvent.prototype.mx_rpc_events_ResultEvent__statusCode = 0;


mx.rpc.events.ResultEvent.prototype.get__headers = function() {
  return this.mx_rpc_events_ResultEvent__headers;
};


mx.rpc.events.ResultEvent.prototype.set__headers = function(value) {
  this.mx_rpc_events_ResultEvent__headers = value;
};


mx.rpc.events.ResultEvent.prototype.get__result = function() {
  return this.mx_rpc_events_ResultEvent__result;
};


mx.rpc.events.ResultEvent.prototype.get__statusCode = function() {
  return this.mx_rpc_events_ResultEvent__statusCode;
};


Object.defineProperties(mx.rpc.events.ResultEvent.prototype, /** @lends {mx.rpc.events.ResultEvent.prototype} */ {
/**
  * @export
  * @type {Object} */
headers: {
get: mx.rpc.events.ResultEvent.prototype.get__headers,
set: mx.rpc.events.ResultEvent.prototype.set__headers},
/**
  * @export
  * @type {Object} */
result: {
get: mx.rpc.events.ResultEvent.prototype.get__result},
/**
  * @export
  * @type {number} */
statusCode: {
get: mx.rpc.events.ResultEvent.prototype.get__statusCode}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.rpc.events.ResultEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ResultEvent', qName: 'mx.rpc.events.ResultEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.rpc.events.ResultEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'headers': { type: 'Object', access: 'readwrite', declaredBy: 'mx.rpc.events.ResultEvent'},
        'result': { type: 'Object', access: 'readonly', declaredBy: 'mx.rpc.events.ResultEvent'},
        'statusCode': { type: 'int', access: 'readonly', declaredBy: 'mx.rpc.events.ResultEvent'}
      };
    },
    methods: function () {
      return {
        'ResultEvent': { type: '', declaredBy: 'mx.rpc.events.ResultEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'Object', true ,'mx.rpc.AsyncToken', true ,'mx.messaging.messages.IMessage', true ]; }},
        '|createEvent': { type: 'mx.rpc.events.ResultEvent', declaredBy: 'mx.rpc.events.ResultEvent', parameters: function () { return [ 'Object', true ,'mx.rpc.AsyncToken', true ,'mx.messaging.messages.IMessage', true ]; }},
        'clone': { type: 'org.apache.royale.events.Event', declaredBy: 'mx.rpc.events.ResultEvent'},
        'toString': { type: 'String', declaredBy: 'mx.rpc.events.ResultEvent'},
        'http://www.adobe.com/2006/flex/mx/internal::callTokenResponders': { type: 'void', declaredBy: 'mx.rpc.events.ResultEvent'},
        'http://www.adobe.com/2006/flex/mx/internal::setResult': { type: 'void', declaredBy: 'mx.rpc.events.ResultEvent', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.rpc.events.ResultEvent.prototype.ROYALE_COMPILE_FLAGS = 26;
