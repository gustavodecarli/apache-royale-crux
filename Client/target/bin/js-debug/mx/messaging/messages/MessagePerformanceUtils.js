/**
 * Generated by Apache Royale Compiler from mx/messaging/messages/MessagePerformanceUtils.as
 * mx.messaging.messages.MessagePerformanceUtils
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.messaging.messages.MessagePerformanceUtils');
/* Royale Dependency List: mx.messaging.messages.MessagePerformanceInfo,org.apache.royale.utils.Language,XML*/




/**
 * Constructor
 * 
 * Creates an MPUtils instance with information from the MPI headers
 * of the passed in message
 * 
 * @asparam message The message whose MPI headers will be used in retrieving
 * MPI information
 *
 * @langversion 3.0
 * @playerversion Flash 9
 * @playerversion AIR 1.1
 * @productversion BlazeDS 4
 * @productversion LCDS 3         
 * @constructor
 * @param {Object} message
 */
mx.messaging.messages.MessagePerformanceUtils = function(message) {
  ;
  this.mpii = org.apache.royale.utils.Language.as(message.headers[mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_IN], mx.messaging.messages.MessagePerformanceInfo);
  this.mpio = org.apache.royale.utils.Language.as(message.headers[mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_OUT], mx.messaging.messages.MessagePerformanceInfo);
  if (this.mpio == null || (this.mpii == null && message.headers[mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_PUSH] == null)) {
    throw new Error("Message is missing MPI headers.  Verify that all participants have it enabled.");
  }
  if (this.pushedMessageFlag)
    this.mpip = org.apache.royale.utils.Language.as(message.headers[mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_PUSH], mx.messaging.messages.MessagePerformanceInfo);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.messaging.messages.MessagePerformanceUtils', mx.messaging.messages.MessagePerformanceUtils);


/**
 * @export
 * @type {mx.messaging.messages.MessagePerformanceInfo}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.mpii;


/**
 * @export
 * @type {mx.messaging.messages.MessagePerformanceInfo}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.mpio;


/**
 * @export
 * @type {mx.messaging.messages.MessagePerformanceInfo}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.mpip;


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_IN = "DSMPII";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_OUT = "DSMPIO";


/**
 * @export
 * @const
 * @type {string}
 */
mx.messaging.messages.MessagePerformanceUtils.MPI_HEADER_PUSH = "DSMPIP";


/**
 *  Returns a summary of all information available in MPI.  
 *  For example:
 * 
 * <pre>
 *      var mpiutil:MessagePerformanceUtils = new MessagePerformanceUtils(message);                     
 *      Alert.show(mpiutil.prettyPrint(), "MPI Output", Alert.NONMODAL);
 * </pre>            
 * 
 * @asreturn String containing a summary of all information available in MPI
 *
 * @langversion 3.0
 * @playerversion Flash 9
 * @playerversion AIR 1.1
 * @productversion BlazeDS 4
 * @productversion LCDS 3          
 * @export
 * @return {string}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.prettyPrint = function() {
  var /** @type {string} */ alertString = String("");
  if (this.messageSize != 0)
    alertString += "Original message size(B): " + this.messageSize + "\n";
  if (this.responseMessageSize != 0)
    alertString += "Response message size(B): " + this.responseMessageSize + "\n";
  if (this.totalTime != 0)
    alertString += "Total time (s): " + (this.totalTime / 1000) + "\n";
  if (this.networkRTT != 0)
    alertString += "Network Roundtrip time (s): " + (this.networkRTT / 1000) + "\n";
  if (this.serverProcessingTime != 0)
    alertString += "Server processing time (s): " + (this.serverProcessingTime / 1000) + "\n";
  if (this.serverAdapterTime != 0)
    alertString += "Server adapter time (s): " + (this.serverAdapterTime / 1000) + "\n";
  if (this.serverNonAdapterTime != 0)
    alertString += "Server non-adapter time (s): " + (this.serverNonAdapterTime / 1000) + "\n";
  if (this.serverAdapterExternalTime != 0)
    alertString += "Server adapter external time (s): " + (this.serverAdapterExternalTime / 1000) + "\n";
  if (this.pushedMessageFlag) {
    alertString += "PUSHED MESSAGE INFORMATION:\n";
    if (this.totalPushTime != 0)
      alertString += "Total push time (s): " + (this.totalPushTime / 1000) + "\n";
    if (this.pushOneWayTime != 0)
      alertString += "Push one way time (s): " + (this.pushOneWayTime / 1000) + "\n";
    if (this.originatingMessageSize != 0)
      alertString += "Originating Message size (B): " + this.originatingMessageSize + "\n";
    if (this.serverPollDelay != 0)
      alertString += "Server poll delay (s): " + (this.serverPollDelay / 1000) + "\n";
  }
  return alertString;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__totalTime = function() {
  if (this.mpii == null)
    return 0;
  else
    return this.mpio.receiveTime - this.mpii.sendTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverProcessingTime = function() {
  if (this.pushedMessageFlag) {
    return this.mpip.serverPrePushTime - this.mpip.receiveTime;
  } else {
    return this.mpio.sendTime - this.mpii.receiveTime;
  }
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverPrePushTime = function() {
  if (this.mpii == null)
    return 0;
  if (this.mpii.serverPrePushTime == 0)
    return this.serverProcessingTime;
  return this.mpii.serverPrePushTime - this.mpii.receiveTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverAdapterTime = function() {
  if (this.pushedMessageFlag) {
    if (this.mpip == null)
      return 0;
    if (this.mpip.serverPreAdapterTime == 0 || this.mpip.serverPostAdapterTime == 0)
      return 0;
    return this.mpip.serverPostAdapterTime - this.mpip.serverPreAdapterTime;
  } else {
    if (this.mpii == null)
      return 0;
    if (this.mpii.serverPreAdapterTime == 0 || this.mpii.serverPostAdapterTime == 0)
      return 0;
    return this.mpii.serverPostAdapterTime - this.mpii.serverPreAdapterTime;
  }
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverAdapterExternalTime = function() {
  if (this.pushedMessageFlag) {
    if (this.mpip == null)
      return 0;
    if (this.mpip.serverPreAdapterExternalTime == 0 || this.mpip.serverPostAdapterExternalTime == 0)
      return 0;
    return this.mpip.serverPostAdapterExternalTime - this.mpip.serverPreAdapterExternalTime;
  } else {
    if (this.mpii == null)
      return 0;
    if (this.mpii.serverPreAdapterExternalTime == 0 || this.mpii.serverPostAdapterExternalTime == 0)
      return 0;
    return this.mpii.serverPostAdapterExternalTime - this.mpii.serverPreAdapterExternalTime;
  }
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverPollDelay = function() {
  if (this.mpip == null)
    return 0;
  if (this.mpip.serverPrePushTime == 0 || this.mpio.sendTime == 0)
    return 0;
  return this.mpio.sendTime - this.mpip.serverPrePushTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverNonAdapterTime = function() {
  return this.serverProcessingTime - this.serverAdapterTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__networkRTT = function() {
  if (!this.pushedMessageFlag)
    return this.totalTime - this.serverProcessingTime;
  else
    return 0;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverSendTime = function() {
  return this.mpio.sendTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__clientReceiveTime = function() {
  return this.mpio.receiveTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__messageSize = function() {
  if (this.mpii == null)
    return 0;
  else
    return this.mpii.messageSize;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__responseMessageSize = function() {
  return this.mpio.messageSize;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__pushedMessageFlag = function() {
  return this.mpio.pushedFlag;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__totalPushTime = function() {
  return this.clientReceiveTime - this.originatingMessageSentTime - this.mx_messaging_messages_MessagePerformanceUtils_pushedOverheadTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__pushOneWayTime = function() {
  return this.clientReceiveTime - this.serverSendTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__originatingMessageSentTime = function() {
  return this.mpip.sendTime;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__originatingMessageSize = function() {
  return this.mpip.messageSize;
};


mx.messaging.messages.MessagePerformanceUtils.prototype.get__mx_messaging_messages_MessagePerformanceUtils_pushedOverheadTime = function() {
  return this.mpip.overheadTime;
};


Object.defineProperties(mx.messaging.messages.MessagePerformanceUtils.prototype, /** @lends {mx.messaging.messages.MessagePerformanceUtils.prototype} */ {
/**
  * @export
  * @type {number} */
totalTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__totalTime},
/**
  * @export
  * @type {number} */
serverProcessingTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverProcessingTime},
/**
  * @export
  * @type {number} */
serverPrePushTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverPrePushTime},
/**
  * @export
  * @type {number} */
serverAdapterTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverAdapterTime},
/**
  * @export
  * @type {number} */
serverAdapterExternalTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverAdapterExternalTime},
/**
  * @export
  * @type {number} */
serverPollDelay: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverPollDelay},
/**
  * @export
  * @type {number} */
serverNonAdapterTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverNonAdapterTime},
/**
  * @export
  * @type {number} */
networkRTT: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__networkRTT},
/**
  * @export
  * @type {number} */
serverSendTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__serverSendTime},
/**
  * @export
  * @type {number} */
clientReceiveTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__clientReceiveTime},
/**
  * @export
  * @type {number} */
messageSize: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__messageSize},
/**
  * @export
  * @type {number} */
responseMessageSize: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__responseMessageSize},
/**
  * @export
  * @type {boolean} */
pushedMessageFlag: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__pushedMessageFlag},
/**
  * @export
  * @type {number} */
totalPushTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__totalPushTime},
/**
  * @export
  * @type {number} */
pushOneWayTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__pushOneWayTime},
/**
  * @export
  * @type {number} */
originatingMessageSentTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__originatingMessageSentTime},
/**
  * @export
  * @type {number} */
originatingMessageSize: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__originatingMessageSize},
/**
  * @type {number} */
mx_messaging_messages_MessagePerformanceUtils_pushedOverheadTime: {
get: mx.messaging.messages.MessagePerformanceUtils.prototype.get__mx_messaging_messages_MessagePerformanceUtils_pushedOverheadTime}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MessagePerformanceUtils', qName: 'mx.messaging.messages.MessagePerformanceUtils', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'mpii': { type: 'mx.messaging.messages.MessagePerformanceInfo', get_set: function (/** mx.messaging.messages.MessagePerformanceUtils */ inst, /** * */ v) {return v !== undefined ? inst.mpii = v : inst.mpii;}},
        'mpio': { type: 'mx.messaging.messages.MessagePerformanceInfo', get_set: function (/** mx.messaging.messages.MessagePerformanceUtils */ inst, /** * */ v) {return v !== undefined ? inst.mpio = v : inst.mpio;}},
        'mpip': { type: 'mx.messaging.messages.MessagePerformanceInfo', get_set: function (/** mx.messaging.messages.MessagePerformanceUtils */ inst, /** * */ v) {return v !== undefined ? inst.mpip = v : inst.mpip;}}
      };
    },
    accessors: function () {
      return {
        'totalTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverProcessingTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverPrePushTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverAdapterTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverAdapterExternalTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverPollDelay': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverNonAdapterTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'networkRTT': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'serverSendTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'clientReceiveTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'messageSize': { type: 'int', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'responseMessageSize': { type: 'int', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'pushedMessageFlag': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'totalPushTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'pushOneWayTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'originatingMessageSentTime': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'},
        'originatingMessageSize': { type: 'Number', access: 'readonly', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'}
      };
    },
    methods: function () {
      return {
        'MessagePerformanceUtils': { type: 'void', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils', parameters: function () { return [ 'Object', false ]; }},
        'prettyPrint': { type: 'String', declaredBy: 'mx.messaging.messages.MessagePerformanceUtils'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.messaging.messages.MessagePerformanceUtils.prototype.ROYALE_COMPILE_FLAGS = 26;
