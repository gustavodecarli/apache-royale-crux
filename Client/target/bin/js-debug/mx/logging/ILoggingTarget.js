/**
 * Generated by Apache Royale Compiler from mx/logging/ILoggingTarget.as
 * mx.logging.ILoggingTarget
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.logging.ILoggingTarget');
/* Royale Dependency List: mx.logging.ILogger,XML*/




/**
 * @interface
 */
mx.logging.ILoggingTarget = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.logging.ILoggingTarget', mx.logging.ILoggingTarget);
/**  * @type {Array}
 */mx.logging.ILoggingTarget.prototype.filters;
/**  * @type {number}
 */mx.logging.ILoggingTarget.prototype.level;
/**
 *  Sets up this target with the specified logger.
 *  This allows this target to receive log events from the specified logger.
 *  
 *  <p><b>Note:</b> This method is called by the framework
 *  and should not be called by you directly.</p>
 *  
 *  @asparam logger The ILogger that this target listens to.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.logging.ILogger} logger
 */
mx.logging.ILoggingTarget.prototype.addLogger = function(logger) {
};
/**
 *  Stops this target from receiving events from the specified logger.
 *  
 *  <p><b>Note:</b> This method is called by the framework
 *  and should not be called by you directly.</p>
 *
 *  @asparam logger The ILogger that this target ignores.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 * @export
 * @param {mx.logging.ILogger} logger
 */
mx.logging.ILoggingTarget.prototype.removeLogger = function(logger) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.logging.ILoggingTarget.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ILoggingTarget', qName: 'mx.logging.ILoggingTarget', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.logging.ILoggingTarget.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'filters': { type: 'Array', access: 'readwrite', declaredBy: 'mx.logging.ILoggingTarget'},
        'level': { type: 'int', access: 'readwrite', declaredBy: 'mx.logging.ILoggingTarget'}
      };
    },
    methods: function () {
      return {
        'addLogger': { type: 'void', declaredBy: 'mx.logging.ILoggingTarget', parameters: function () { return [ 'mx.logging.ILogger', false ]; }},
        'removeLogger': { type: 'void', declaredBy: 'mx.logging.ILoggingTarget', parameters: function () { return [ 'mx.logging.ILogger', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.logging.ILoggingTarget.prototype.ROYALE_COMPILE_FLAGS = 26;
