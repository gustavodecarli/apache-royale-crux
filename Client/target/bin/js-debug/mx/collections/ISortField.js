/**
 * Generated by Apache Royale Compiler from mx/collections/ISortField.as
 * mx.collections.ISortField
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('mx.collections.ISortField');
/* Royale Dependency List: XML*/



/**
 * @interface
 */
mx.collections.ISortField = function() {
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('mx.collections.ISortField', mx.collections.ISortField);
/**  * @type {number}
 */mx.collections.ISortField.prototype.arraySortOnOptions;
/**  * @type {Function}
 */mx.collections.ISortField.prototype.compareFunction;
/**  * @type {boolean}
 */mx.collections.ISortField.prototype.descending;
/**  * @type {string}
 */mx.collections.ISortField.prototype.name;
/**  * @type {Object}
 */mx.collections.ISortField.prototype.numeric;
/**  * @type {string}
 */mx.collections.ISortField.prototype.sortCompareType;
/**  * @type {boolean}
 */mx.collections.ISortField.prototype.usingCustomCompareFunction;
/**
 *  A helper function called by the <code>Sort</code> class to set the
 *  default comparison function to perform a comparison based on
 *  one of three things: whether or not a custom compare function has
 *  been set, the data type for the specified field or the the value of the
 *  numeric property. If the the <code>numeric</code> property is true,
 *  then a numeric comparison will be performed when sorting.
 *
 *  @asparam obj The object that contains the data. If the field name has
 *  been set with the name property, then the name will be used to access
 *  the data value from this object. Otherwise the object itself will
 *  be used as the data value.
 *
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 4.5
 * @export
 * @param {Object} obj
 */
mx.collections.ISortField.prototype.initializeDefaultCompareFunction = function(obj) {
};
mx.collections.ISortField.prototype.reverse = function() {
};
/**
 *  This changes the internal compare function used by the <code>SortField</code> based
 *  on the value of <code>sortCompareType</code>.
 *
 *  @deprecated A future release of Apache Flex SDK will remove this function in favour of
 *  making ISortField instances immutable.
 * 
 *  @asreturn true for successfully matched or false for failure to match the <code>sortCompareType</code>.
 * 
 *  @langversion 3.0
 *  @playerversion Flash 11.8
 *  @playerversion AIR 3.8
 *  @productversion Flex 4.11
 * @export
 * @return {boolean}
 */
mx.collections.ISortField.prototype.updateSortCompareType = function() {
};
/**
 *  Returns true if the object has the field required by this <code>ISortField</code> instance.
 *  In  the case of <code>ComplexSortField</code>, returns true if the object has a field with
 *  an identical name to the first part of the <code>namePath</code>.
 *
 *  @asreturn true if the object has the field required by this <code>ISortField</code> instance.
 *
 *  @langversion 3.0
 *  @playerversion Flash 11.8
 *  @playerversion AIR 3.8
 *  @productversion Flex 4.15
 * @export
 * @param {Object} object
 * @return {boolean}
 */
mx.collections.ISortField.prototype.objectHasSortField = function(object) {
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
mx.collections.ISortField.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ISortField', qName: 'mx.collections.ISortField', kind: 'interface' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
mx.collections.ISortField.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'arraySortOnOptions': { type: 'int', access: 'readonly', declaredBy: 'mx.collections.ISortField'},
        'compareFunction': { type: 'Function', access: 'readwrite', declaredBy: 'mx.collections.ISortField'},
        'descending': { type: 'Boolean', access: 'readwrite', declaredBy: 'mx.collections.ISortField'},
        'name': { type: 'String', access: 'readwrite', declaredBy: 'mx.collections.ISortField'},
        'numeric': { type: 'Object', access: 'readwrite', declaredBy: 'mx.collections.ISortField'},
        'sortCompareType': { type: 'String', access: 'readwrite', declaredBy: 'mx.collections.ISortField'},
        'usingCustomCompareFunction': { type: 'Boolean', access: 'readonly', declaredBy: 'mx.collections.ISortField'}
      };
    },
    methods: function () {
      return {
        'initializeDefaultCompareFunction': { type: 'void', declaredBy: 'mx.collections.ISortField', parameters: function () { return [ 'Object', false ]; }},
        'reverse': { type: 'void', declaredBy: 'mx.collections.ISortField'},
        'updateSortCompareType': { type: 'Boolean', declaredBy: 'mx.collections.ISortField'},
        'objectHasSortField': { type: 'Boolean', declaredBy: 'mx.collections.ISortField', parameters: function () { return [ 'Object', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
mx.collections.ISortField.prototype.ROYALE_COMPILE_FLAGS = 26;
