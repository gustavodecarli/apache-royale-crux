/**
 * Generated by Apache Royale Compiler from org/apache/royale/net/remoting/amf/AMFBinaryData.as
 * org.apache.royale.net.remoting.amf.AMFBinaryData
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('org.apache.royale.net.remoting.amf.AMFBinaryData');
/* Royale Dependency List: org.apache.royale.reflection.getClassByAlias,org.apache.royale.reflection.getDefinitionByName,org.apache.royale.reflection.getDynamicFields,org.apache.royale.utils.net.IDynamicPropertyWriter,org.apache.royale.utils.net.IExternalizable,org.apache.royale.utils.Language*/
goog.provide('org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext');
goog.provide('org.apache.royale.net.remoting.amf.AMFBinaryData.Traits');

goog.require('org.apache.royale.utils.BinaryData');
goog.require('org.apache.royale.utils.net.IDataInput');
goog.require('org.apache.royale.utils.net.IDataOutput');
goog.require('org.apache.royale.utils.net.IDynamicPropertyOutput');



/**
 * @constructor
 * @extends {org.apache.royale.utils.BinaryData}
 * @implements {org.apache.royale.utils.net.IDataInput}
 * @implements {org.apache.royale.utils.net.IDataOutput}
 * @param {Object=} bytes
 */
org.apache.royale.net.remoting.amf.AMFBinaryData = function(bytes) {
  bytes = typeof bytes !== 'undefined' ? bytes : null;
  org.apache.royale.net.remoting.amf.AMFBinaryData.base(this, 'constructor', bytes);
};
goog.inherits(org.apache.royale.net.remoting.amf.AMFBinaryData, org.apache.royale.utils.BinaryData);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.net.remoting.amf.AMFBinaryData', org.apache.royale.net.remoting.amf.AMFBinaryData);


/**
 * @private
 * @type {org.apache.royale.utils.net.IDynamicPropertyWriter}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData._propertyWriter;


/**
 * @private
 * @type {org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext;


/**
 * @export
 * @param {*} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.writeObject = function(v) {
  if (!this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext)
    this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext = new org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext(this);
  this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext.dynamicPropertyWriter = org.apache.royale.net.remoting.amf.AMFBinaryData._propertyWriter;
  this._position = (this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext.writeObjectExternal(v, (this._position) >>> 0, org.apache.royale.utils.Language.closure(this.mergeInToArrayBuffer, this, 'mergeInToArrayBuffer'))) >> 0;
  var /** @type {Error} */ err = this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext.getError();
  if (err) {
    throw new Error(err.message);
  }
};


/**
 * @export
 * @return {*}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.readObject = function() {
  if (!this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext)
    this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext = new org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext(this);
  var /** @type {*} */ value = this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext.readObjectExternal();
  var /** @type {Error} */ err = this.org_apache_royale_net_remoting_amf_AMFBinaryData__serializationContext.getError();
  if (err) {
    throw new Error(err.message);
  }
  return value;
};


org.apache.royale.net.remoting.amf.AMFBinaryData.get__dynamicPropertyWriter = function() {
  return org.apache.royale.net.remoting.amf.AMFBinaryData._propertyWriter;
  
};


org.apache.royale.net.remoting.amf.AMFBinaryData.set__dynamicPropertyWriter = function(value) {
  org.apache.royale.net.remoting.amf.AMFBinaryData._propertyWriter = value;
  
};


Object.defineProperties(org.apache.royale.net.remoting.amf.AMFBinaryData, /** @lends {org.apache.royale.net.remoting.amf.AMFBinaryData} */ {
/**
  * @export
  * @type {org.apache.royale.utils.net.IDynamicPropertyWriter} */
dynamicPropertyWriter: {
get: org.apache.royale.net.remoting.amf.AMFBinaryData.get__dynamicPropertyWriter,
set: org.apache.royale.net.remoting.amf.AMFBinaryData.set__dynamicPropertyWriter}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AMFBinaryData', qName: 'org.apache.royale.net.remoting.amf.AMFBinaryData', kind: 'class' }], interfaces: [org.apache.royale.utils.net.IDataInput, org.apache.royale.utils.net.IDataOutput] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        '|dynamicPropertyWriter': { type: 'org.apache.royale.utils.net.IDynamicPropertyWriter', access: 'readwrite', declaredBy: 'org.apache.royale.net.remoting.amf.AMFBinaryData'}
      };
    },
    methods: function () {
      return {
        'AMFBinaryData': { type: '', declaredBy: 'org.apache.royale.net.remoting.amf.AMFBinaryData', parameters: function () { return [ 'Object', true ]; }},
        'writeObject': { type: 'void', declaredBy: 'org.apache.royale.net.remoting.amf.AMFBinaryData', parameters: function () { return [ '*', false ]; }},
        'readObject': { type: '*', declaredBy: 'org.apache.royale.net.remoting.amf.AMFBinaryData'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.prototype.ROYALE_COMPILE_FLAGS = 10;



/**
 * @royaleignorecoercion Class
 * @constructor
 * @extends {org.apache.royale.utils.BinaryData}
 * @implements {org.apache.royale.utils.net.IDataInput}
 * @implements {org.apache.royale.utils.net.IDataOutput}
 * @implements {org.apache.royale.utils.net.IDynamicPropertyOutput}
 * @param {org.apache.royale.net.remoting.amf.AMFBinaryData} ownerReference
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext = function(ownerReference) {
  
  this.SerializationContext_nothing = {};
  this.SerializationContext_owner = ownerReference;
  this.reset();
  if (!org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlChecked) {
    org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlChecked = true;
    try {
      org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass =  /** @type {Object|null} */ (org.apache.royale.reflection.getDefinitionByName('XML'));
    } catch (e) {
    }
  }
  org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.base(this, 'constructor');
};
goog.inherits(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext, org.apache.royale.utils.BinaryData);


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF0_AMF3 = 0x11;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_OBJECT_ENCODING = 0x3;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_UNDEFINED = 0x0;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_NULL = 0x1;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_FALSE = 0x2;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_TRUE = 0x3;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_INTEGER = 0x4;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DOUBLE = 0x5;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_STRING = 0x6;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_XMLDOCUMENT = 0x7;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DATE = 0x8;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_ARRAY = 0x9;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_OBJECT = 0xa;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_XML = 0xb;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BYTEARRAY = 0xc;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_INT = 0xd;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_UINT = 0xe;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_DOUBLE = 0xf;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_OBJECT = 0x10;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DICTIONARY = 0x11;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.UINT29_MASK = 0x1fffffff;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.INT28_MAX_VALUE = 268435455;


/**
 * @private
 * @const
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.INT28_MIN_VALUE = -268435456;


/**
 * @private
 * @const
 * @type {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.EMPTY_STRING = "";


/**
 * @private
 * @type {org.apache.royale.net.remoting.amf.AMFBinaryData}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_owner;


/**
 * @type {org.apache.royale.utils.net.IDynamicPropertyWriter}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.dynamicPropertyWriter;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeBuffer;


/**
 * @private
 * @type {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_objects;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_traits;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_strings;


/**
 * @private
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_stringCount = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_traitCount = 0;


/**
 * @private
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_objectCount = 0;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeMode = false;


/**
 * @private
 * @type {ArrayBuffer}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext__numbers;


/**
 * @private
 * @type {DataView}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext__numberView;


/**
 * @private
 * @type {Uint8Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext__numberBytes;


/**
 * @private
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlChecked;


/**
 * @private
 * @type {Error}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext__error;


/**
 * @return {Error}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.getError = function() {
  var /** @type {Error} */ _err = this.SerializationContext__error;
  this.SerializationContext__error = null;
  return _err;
};


/**
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.reset = function() {
  this.SerializationContext_writeBuffer = [];
  this.SerializationContext_objects = [];
  this.SerializationContext_traits = {};
  this.SerializationContext_strings = {};
  this.SerializationContext_stringCount = 0;
  this.SerializationContext_traitCount = 0;
  this.SerializationContext_objectCount = 0;
};


/**
 * used internally as an override to return the writeBuffer Array for use to mimic Uint8Array during writing.
 * Array is used because it is not usually known what the byte allocation should be in advance,
 * and length is not mutable with javascript typed arrays, so 'growing' the buffer with each write is not
 * a good strategy for performance.
 * The assumption is that, while write access is slower for individual elements, increasing the length of
 * the 'buffer' is not, and that using Array will be more performant.
 * @royaleignorecoercion Uint8Array
 * @protected
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.getTypedArray = function() {
  return this.SerializationContext_writeMode ? this.SerializationContext_writeBuffer : org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.superClass_.getTypedArray.apply(this);
};


/**
 * @protected
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.getDataView = function() {
  if (!this.SerializationContext_writeMode)
    return org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.superClass_.getDataView.apply(this);
  if (!this.SerializationContext__numberView) {
    this.SerializationContext__numbers = new ArrayBuffer(8);
    this.SerializationContext__numberView = new DataView(this.SerializationContext__numbers);
    this.SerializationContext__numberBytes = new Uint8Array(this.SerializationContext__numbers);
  }
  return this.SerializationContext__numberView;
};


/**
 * @protected
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.setBufferSize = function(newSize) {
  this._len = newSize;
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeByte = function(byte) {
  this.SerializationContext_writeBuffer[this._position++] = byte & 255;
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeByteAt = function(idx, byte) {
  while (idx > this._len) {
    this.SerializationContext_writeBuffer[this._len++] = 0;
  }
  this.SerializationContext_writeBuffer[idx] = byte & 255;
};


/**
 * @param {number} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeUInt29 = function(v) {
  
/**
 * @const
 * @type {Function}
 */
var write = org.apache.royale.utils.Language.closure(this.writeByte, this, 'writeByte');
  if (v < 128) {
    write(v);
  } else if (v < 16384) {
    write(((v >> 7) & 127) | 128);
    write(v & 127);
  } else if (v < 2097152) {
    write(((v >> 14) & 127) | 128);
    write(((v >> 7) & 127) | 128);
    write(v & 127);
  } else if (v < 0x40000000) {
    write(((v >> 22) & 127) | 128);
    write(((v >> 15) & 127) | 128);
    write(((v >> 8) & 127) | 128);
    write(v & 255);
  } else {
    throw "Integer out of range: " + v;
  }
};


/**
 * @protected
 * @param {Array} array
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.addByteSequence = function(array) {
  var /** @type {number} */ length = (array.length) >>> 0;
  if (this._position == this._len) {
    this.SerializationContext_writeBuffer = this.SerializationContext_writeBuffer.concat(array);
    this._len = (this._len + length) >>> 0;
  } else {
    if (this._position + length > this._len) {
      this.SerializationContext_writeBuffer.length = this._position;
      this.SerializationContext_writeBuffer = this.SerializationContext_writeBuffer.concat(array);
      this._len = (this._position + length) >>> 0;
      if (this._len != this.SerializationContext_writeBuffer.length) {
        throw new Error('code review');
      }
    } else {
      this.SerializationContext_writeBuffer = this.SerializationContext_writeBuffer.slice(0, this._position).concat(array, this.SerializationContext_writeBuffer.slice(this._position + length));
      if (this._len != this.SerializationContext_writeBuffer.length) {
        throw new Error('code review');
      }
    }
  }
  this._position += (length) >> 0;
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeBytes = function(bytes, offset, length) {
  offset = typeof offset !== 'undefined' ? offset : 0;
  length = typeof length !== 'undefined' ? length : 0;
  if (length == 0)
    length = (bytes.byteLength - offset) >>> 0;
  if (!length)
    return;
  var /** @type {Uint8Array} */ src = new Uint8Array(bytes, offset, offset + length);
  var /** @type {Array} */ srcArray = [].slice.call(src);
  this.addByteSequence(srcArray);
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeUTF = function(str) {
  var /** @type {Uint8Array} */ utcBytes = this.getUTFBytes(str, true);
  var /** @type {Array} */ srcArray = [].slice.call(utcBytes);
  this.addByteSequence(srcArray);
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeUTFBytes = function(str) {
  var /** @type {Uint8Array} */ utcBytes = this.getUTFBytes(str, false);
  var /** @type {Array} */ srcArray = [].slice.call(utcBytes);
  this.addByteSequence(srcArray);
};


/**
 * @protected
 * @param {number} byteCount
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.copyNumericBytes = function(byteCount) {
  var /** @type {Uint8Array} */ arr = this.getTypedArray();
  var /** @type {Uint8Array} */ numbers = this.SerializationContext__numberBytes;
  var /** @type {number} */ idx = 0;
  while (byteCount--) {
    arr[this._position++] = numbers[idx++];
  }
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeFloat = function(val) {
  this.getDataView().setFloat32(0, val, false);
  this.copyNumericBytes(4);
};


/**
 * @override
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeDouble = function(val) {
  this.getDataView().setFloat64(0, val, false);
  this.copyNumericBytes(8);
};


/**
 * @private
 * @param {string} string
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeAMF_UTF = function(string) {
  var /** @type {Uint8Array} */ utcBytes = this.getUTFBytes(string, false);
  var /** @type {Array} */ srcArray = [].slice.call(utcBytes);
  this.writeUInt29(((srcArray.length << 1) | 1) >>> 0);
  this.addByteSequence(srcArray);
};


/**
 * @private
 * @param {string} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeStringWithoutType = function(v) {
  if (v.length == 0) {
    this.writeUInt29(1);
  } else {
    if (!this.SerializationContext_stringByReference(v)) {
      this.SerializationContext_writeAMF_UTF(v);
    }
  }
};


/**
 * @private
 * @param {string} v
 * @return {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_stringByReference = function(v) {
  
/**
 * @const
 * @type {*}
 */
var strIndex = this.SerializationContext_strings[v];
  
/**
 * @const
 * @type {boolean}
 */
var found = strIndex !== undefined;
  if (found) {
    
/**
 * @const
 * @type {number}
 */
var ref = (strIndex) >>> 0;
    this.writeUInt29((ref << 1) >>> 0);
  } else {
    this.SerializationContext_strings[v] = this.SerializationContext_stringCount++;
  }
  return found;
};


/**
 * @param {Object} v
 * @return {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.objectByReference = function(v) {
  
/**
 * @const
 * @type {number}
 */
var ref = (this.SerializationContext_objects.indexOf(v)) >> 0;
  
/**
 * @const
 * @type {boolean}
 */
var found = ref !== -1;
  if (found) {
    this.writeUInt29((ref << 1) >>> 0);
  } else {
    this.SerializationContext_objects.push(v);
    this.SerializationContext_objectCount++;
  }
  return found;
};


/**
 * @private
 * @param {Array} props
 * @param {string} alias
 * @return {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_traitsByReference = function(props, alias) {
  
/**
 * @const
 * @type {string}
 */
var s = alias + "|" + props.join("|");
  
/**
 * @const
 * @type {*}
 */
var traitsIndex = this.SerializationContext_traits[s];
  
/**
 * @const
 * @type {boolean}
 */
var found = traitsIndex !== undefined;
  if (found) {
    
/**
 * @const
 * @type {number}
 */
var ref = (traitsIndex) >>> 0;
    this.writeUInt29(((ref << 2) | 1) >>> 0);
  } else {
    this.SerializationContext_traits[s] = this.SerializationContext_traitCount++;
  }
  return found;
};


/**
 * @private
 * @param {number} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeAmfInt = function(v) {
  if (v >= org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.INT28_MIN_VALUE && v <= org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.INT28_MAX_VALUE) {
    v = v & org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.UINT29_MASK;
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_INTEGER);
    this.writeUInt29((v) >>> 0);
  } else {
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DOUBLE);
    this.writeDouble(v);
  }
};


/**
 * @private
 * @param {Date} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeDate = function(v) {
  this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DATE);
  if (!this.objectByReference(v)) {
    this.writeUInt29(1);
    this.writeDouble(v.getTime());
  }
};


/**
 * @private
 * @param {Object} fieldSet
 * @param {Object} accessChecks
 * @param {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} localTraits
 * @param {boolean=} asAccessors
 * @param {boolean=} excludeTransient
 * @return {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_filterSerializableMembers = function(fieldSet, accessChecks, localTraits, asAccessors, excludeTransient) {
  asAccessors = typeof asAccessors !== 'undefined' ? asAccessors : false;
  excludeTransient = typeof excludeTransient !== 'undefined' ? excludeTransient : true;
  var /** @type {number} */ l = 0;
  //var /** @type {number} */ l = 0;
  var /** @type {Array} */ metas;
  var /** @type {boolean} */ exclude;
  var /** @type {string} */ fieldName;
  
/**
 * @const
 * @type {Array}
 */
var into = localTraits.props;
  for (fieldName in fieldSet) {
    if (fieldName.charAt(0) == '|')
      continue;
    if (fieldName.indexOf('::') != -1)
      continue;
    var /** @type {Object} */ field = fieldSet[fieldName];
    exclude = false;
    if (asAccessors) {
      exclude = field.access != 'readwrite';
      if (exclude && into.indexOf(fieldName) == -1) {
        if (accessChecks[fieldName] && accessChecks[fieldName] != field.access) {
          exclude = false;
        } else {
          if (!accessChecks[fieldName]) {
            accessChecks[fieldName] = field.access;
          }
        }
      }
    }
    if (!exclude && excludeTransient && field.metadata != null) {
      metas = field.metadata();
      l = (metas.length) >>> 0;
      while (l--) {
        if (metas[l].name == 'Transient') {
          exclude = true;
        }
      }
      if (exclude && into.indexOf(fieldName) != -1) {
        into.splice(into.indexOf(fieldName), 1);
      }
    }
    if (!exclude) {
      var /** @type {Object} */ nullValues = localTraits.nullValues;
      if (field.type == 'Number') {
        nullValues[fieldName] = Number.NaN;
      } else if (field.type == 'Boolean') {
        nullValues[fieldName] = false;
      } else if (field.type == 'int' || field.type == 'uint') {
        nullValues[fieldName] = 0;
      } else if (field.type == '*') {
        nullValues[fieldName] = undefined;
      } else {
        nullValues[fieldName] = null;
      }
      into.push(fieldName);
      if (asAccessors) {
        localTraits.getterSetters[fieldName] = org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.createInstanceAccessorGetterSetter(fieldName);
      } else {
        localTraits.getterSetters[fieldName] = org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.createInstanceVariableGetterSetter(field.get_set, org.apache.royale.utils.Language.string(field.type));
      }
    }
  }
  return into;
};


/**
 * @private
 * @const
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_nothing;


/**
 * @private
 * @param {Object} reflectionInfo
 * @param {Object} accessChecks
 * @param {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} localTraits
 * @return {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_populateSerializableMembers = function(reflectionInfo, accessChecks, localTraits) {
  if (!reflectionInfo)
    return localTraits.props;
  var /** @type {Object} */ fields = reflectionInfo.variables ? reflectionInfo.variables() : this.SerializationContext_nothing;
  this.SerializationContext_filterSerializableMembers(fields, accessChecks, localTraits, false, true);
  fields = reflectionInfo.accessors ? reflectionInfo.accessors() : this.SerializationContext_nothing;
  this.SerializationContext_filterSerializableMembers(fields, accessChecks, localTraits, true, true);
  return localTraits.props;
};


/**
 * @private
 * @param {Object} instance
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_getLocalTraitsInfo = function(instance) {
  var /** @type {Object} */ classInfo = instance.ROYALE_CLASS_INFO;
  var /** @type {Object} */ originalClassInfo;
  var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ localTraits;
  if (classInfo) {
    localTraits = classInfo.localTraits;
    if (localTraits) {
      localTraits.alias = org.apache.royale.utils.Language.string(classInfo.alias || '');
      return classInfo.localTraits;
    }
    originalClassInfo = classInfo;
    localTraits = new org.apache.royale.net.remoting.amf.AMFBinaryData.Traits();
    var /** @type {string} */ alias = org.apache.royale.utils.Language.string(classInfo.alias);
    if (alias)
      localTraits.alias = alias;
    else
      localTraits.alias = '';
    localTraits.qName = org.apache.royale.utils.Language.string(classInfo.names[0].qName);
    localTraits.isDynamic = Boolean(classInfo.names[0].isDynamic);
    localTraits.externalizable = org.apache.royale.utils.Language.is(instance, org.apache.royale.utils.net.IExternalizable);
    if (localTraits.externalizable) {
      localTraits.count = 0;
    } else {
      var /** @type {Object} */ accessChecks = {};
      var /** @type {Object} */ c = instance;
      while (classInfo) {
        var /** @type {Object} */ reflectionInfo = c.ROYALE_REFLECTION_INFO();
        this.SerializationContext_populateSerializableMembers(reflectionInfo, accessChecks, localTraits);
        if (!c.constructor.superClass_ || !c.constructor.superClass_.ROYALE_CLASS_INFO)
          break;
        classInfo = c.constructor.superClass_.ROYALE_CLASS_INFO;
        c = c.constructor.superClass_;
      }
      localTraits.count = (localTraits.props.length) >>> 0;
      localTraits.props.sort();
    }
    originalClassInfo.localTraits = localTraits;
  } else {
    if (Object == instance.constructor) {
      localTraits = org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.getBaseObjectTraits();
    } else {
      var /** @type {Array} */ anonFields = [];
      for (var /** @type {string} */ key in instance) {
        if (key !== "") {
          anonFields.push(key);
        }
      }
      localTraits = org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.getDynObjectTraits(anonFields);
    }
    localTraits.props.sort();
  }
  return localTraits;
};


/**
 * @param {*} v
 * @param {number} position
 * @param {Function} mergeIntoOwner
 * @return {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeObjectExternal = function(v, position, mergeIntoOwner) {
  this.SerializationContext_writeMode = true;
  this._position = 0;
  this._len = 0;
  try {
    this.writeObject(v);
  } catch (e) {
    this.SerializationContext__error = e;
  }
  var /** @type {Uint8Array} */ output = new Uint8Array(this.SerializationContext_writeBuffer);
  this.reset();
  this.SerializationContext_writeMode = false;
  return (mergeIntoOwner(position, output)) >>> 0;
};


/**
 * @royaleignorecoercion Class
 * @royaleignorecoercion String
 * @royaleignorecoercion Number
 * @royaleignorecoercion Array
 * @param {*} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeObject = function(v) {
  if (v == null) {
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_NULL);
    return;
  }
  if (this.SerializationContext_isFunctionValue(v)) {
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_UNDEFINED);
    return;
  }
  if (org.apache.royale.utils.Language.is(v, String)) {
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_STRING);
    this.SerializationContext_writeStringWithoutType(v);
  } else if (org.apache.royale.utils.Language.is(v, Number)) {
    var /** @type {number} */ n = v;
    if (n === +n && n === (n | 0)) {
      this.SerializationContext_writeAmfInt((n) >> 0);
    } else {
      this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DOUBLE);
      this.writeDouble(n);
    }
  } else if (org.apache.royale.utils.Language.is(v, Boolean)) {
    this.writeByte((v ? org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_TRUE : org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_FALSE));
  } else if (org.apache.royale.utils.Language.is(v, Date)) {
    this.SerializationContext_writeDate(org.apache.royale.utils.Language.as(v, Date));
  } else if (org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass && org.apache.royale.utils.Language.is(v, org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass)) {
    this.SerializationContext_writeXML(v);
  } else {
    if (org.apache.royale.utils.Language.is(v, Array)) {
      if (v.toString().indexOf("[Vector") == 0)
        this.SerializationContext_writeVector(v);
      else
        this.SerializationContext_writeArray(v);
    }
    else
      this.SerializationContext_writeObjectVariant(v);
  }
};


/**
 * @private
 * @param {Object} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeXML = function(v) {
  this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_XML);
  if (!this.objectByReference(v)) {
    var /** @type {string} */ source = org.apache.royale.utils.Language.string(v.toXMLString());
    this.SerializationContext_writeAMF_UTF(source);
  }
};


/**
 *
 * @royaleignorecoercion BinaryData
 * @royaleignorecoercion ArrayBuffer
 * @private
 * @param {Object} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeObjectVariant = function(v) {
  if (org.apache.royale.utils.Language.is(v, org.apache.royale.net.remoting.amf.AMFBinaryData) || org.apache.royale.utils.Language.is(v, org.apache.royale.utils.BinaryData)) {
    this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BYTEARRAY);
    if (!this.objectByReference(v)) {
      var /** @type {org.apache.royale.utils.BinaryData} */ binaryData = org.apache.royale.utils.Language.as(v, org.apache.royale.utils.BinaryData);
      var /** @type {number} */ len = (binaryData.length) >>> 0;
      this.writeUInt29(((len << 1) | 1) >>> 0);
      this.writeBytes(binaryData.data);
    }
    return;
  }
  this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_OBJECT);
  if (!this.objectByReference(v)) {
    
/**
 * @const
 * @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
var localTraits = this.SerializationContext_getLocalTraitsInfo(v);
    if (localTraits.externalizable && !localTraits.alias) {
      throw new Error("ArgumentError: Error #2004: One of the parameters is invalid.");
    }
    this.SerializationContext_writeTypedObject(v, localTraits);
  }
};


/**
 * This serialization context is passed as the 2nd parameter to an IDynamicPropertyWriter
 * implementation's writeDynamicProperties method call. The resolved properties are written here
 * @asparam name property name
 * @asparam value property value
 * @param {string} name
 * @param {*} value
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.writeDynamicProperty = function(name, value) {
  this.SerializationContext_writeStringWithoutType(name);
  this.writeObject(value);
};


/**
 * @private
 * @param {Object} v
 * @param {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} localTraits
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeTypedObject = function(v, localTraits) {
  var /** @type {string} */ encodedName = localTraits.alias && localTraits.alias.length ? localTraits.alias : ']:' + localTraits.qName + ":[";
  if (!this.SerializationContext_traitsByReference(localTraits.props, encodedName)) {
    this.writeUInt29((3 | (localTraits.externalizable ? 4 : 0) | (localTraits.isDynamic ? 8 : 0) | (localTraits.count << 4)) >>> 0);
    this.SerializationContext_writeStringWithoutType(localTraits.alias);
    if (!localTraits.externalizable) {
      var /** @type {number} */ l = localTraits.count;
      for (var /** @type {number} */ i = 0; i < l; i++) {
        this.SerializationContext_writeStringWithoutType(org.apache.royale.utils.Language.string(localTraits.props[i]));
      }
    }
  }
  if (localTraits.externalizable) {
    v.writeExternal(this);
  } else {
    l = localTraits.count;
    for (i = 0; i < l; i++) {
      var /** @type {*} */ val = localTraits.getterSetters[localTraits.props[i]].getValue(v);
      if (val === null || val === undefined) {
        val = localTraits.nullValues[localTraits.props[i]];
        if (val === undefined && localTraits.getterSetters[localTraits.props[i]].getValue(v) === null) {
          val = null;
        }
      }
      this.writeObject(val);
    }
    if (localTraits.isDynamic) {
      if (this.dynamicPropertyWriter != null) {
        this.dynamicPropertyWriter.writeDynamicProperties(v, this);
      } else {
        var /** @type {Array} */ dynFields = org.apache.royale.reflection.getDynamicFields(v);
        i = 0;
        l = (dynFields.length) >>> 0;
        for (; i < l; i++) {
          val = v[dynFields[i]];
          if (this.SerializationContext_isFunctionValue(val)) {
            continue;
          }
          this.SerializationContext_writeStringWithoutType(org.apache.royale.utils.Language.string(dynFields[i]));
          this.writeObject(val);
        }
      }
      this.SerializationContext_writeStringWithoutType(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.EMPTY_STRING);
    }
  }
};


/**
 * @private
 * @type {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext__comparator;


/**
 * javascript does not differentiate between 'Class' and 'Function'
 * So in javascript : Object instanceof Function is true, in flash it is not (Object instanceof Class *is* true).
 * The function below is an attempt to discriminate between a pure function and a 'constructor' function
 * @asparam value the value to inspect
 * @asreturn true if considered to be a 'pure' function value (not a constructor)
 * @private
 * @param {*} value
 * @return {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_isFunctionValue = function(value) {
  var self = this;
  if (value instanceof Function) {
    var /** @type {string} */ comparator = this.SerializationContext__comparator;
    var /** @type {Array} */ checkBase;
    if (!comparator) {
      checkBase = Object.getOwnPropertyNames(function() {
      });
      if (checkBase.indexOf('name') != -1) {
        checkBase.splice(checkBase.indexOf('name'), 1);
      }
      this.SerializationContext__comparator = comparator = checkBase.join(",");
    }
    checkBase = Object.getOwnPropertyNames(value);
    if (checkBase.indexOf('name') != -1) {
      checkBase.splice(checkBase.indexOf('name'), 1);
    }
    var /** @type {string} */ check = checkBase.join(",");
    return check == comparator;
  }
  return false;
};


/**
 *
 * @royaleignorecoercion String
 * @private
 * @param {Array} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeArray = function(v) {
  this.writeByte(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_ARRAY);
  var /** @type {number} */ len = (v.length) >>> 0;
  var /** @type {number} */ i = 0;
  var /** @type {number} */ akl = 0;
  if (!this.objectByReference(v)) {
    var /** @type {number} */ denseLength = len;
    var /** @type {Array} */ keys = Object.keys(v);
    var /** @type {number} */ kl = (keys.length) >>> 0;
    var /** @type {Function} */ isFunctionValue = org.apache.royale.utils.Language.closure(this.SerializationContext_isFunctionValue, this, 'isFunctionValue');
    if (kl != len || ((keys[kl - 1] >> 0).toString() !== keys[kl - 1]) || v.some(isFunctionValue)) {
      if (len) {
        for (i = 0; i < len; i++) {
          if (keys[i] != "" + i)
            break;
          if (isFunctionValue(v[i]))
            break;
        }
        denseLength = i;
        keys.splice(0, denseLength);
      }
      akl = (keys.length) >>> 0;
    }
    this.writeUInt29(((denseLength << 1) | 1) >>> 0);
    if (akl) {
      for (i = 0; i < akl; i++) {
        var /** @type {*} */ val = v[keys[i]];
        if (isFunctionValue(val)) {
          continue;
        }
        this.SerializationContext_writeStringWithoutType(keys[i]);
        this.writeObject(val);
      }
    }
    this.SerializationContext_writeStringWithoutType(org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.EMPTY_STRING);
    if (denseLength) {
      for (i = 0; i < denseLength; i++) {
        this.writeObject(v[i]);
      }
    }
  }
};


/**
 * @private
 * @param {Object} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_writeVector = function(v) {
  var /** @type {number} */ i = 0;
  this.writeByte((v.type) >> 0);
  //var /** @type {number} */ i = 0;
  var /** @type {number} */ len = (v.length) >>> 0;
  if (!this.objectByReference(v)) {
    this.writeUInt29(((len << 1) | 1) >>> 0);
    this.writeBoolean(!!(v.fixed));
  }
  if (v.type == org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_OBJECT) {
    var /** @type {string} */ className = "";
    if (len > 0) {
      className = org.apache.royale.utils.Language.string(v[0].constructor.name);
    }
    this.SerializationContext_writeStringWithoutType(className);
    for (i = 0; i < len; i++) {
      this.writeObject(v[i]);
    }
  } else if (v.type == org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_INT) {
    for (i = 0; i < len; i++) {
      this.writeInt((v[i]) >> 0);
    }
  } else if (v.type == org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_UINT) {
    for (i = 0; i < len; i++) {
      this.writeUnsignedInt((v[i]) >>> 0);
    }
  } else if (v.type == org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_DOUBLE) {
    for (i = 0; i < len; i++) {
      this.writeDouble(Number(v[i]));
    }
  }
};


/**
 * @return {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readUInt29 = function() {
  
/**
 * @const
 * @type {Function}
 */
var read = org.apache.royale.utils.Language.closure(this.readUnsignedByte, this, 'readUnsignedByte');
  var /** @type {number} */ b = (read() & 255) >>> 0;
  if (b < 128) {
    return (b) >> 0;
  }
  var /** @type {number} */ value = ((b & 127) << 7) >>> 0;
  b = (read() & 255) >>> 0;
  if (b < 128)
    return (value | b);
  value = ((value | (b & 127)) << 7) >>> 0;
  b = (read() & 255) >>> 0;
  if (b < 128)
    return (value | b);
  value = ((value | (b & 127)) << 8) >>> 0;
  b = (read() & 255) >>> 0;
  return (value | b);
};


/**
 *
 * @royaleignorecoercion ArrayBuffer
 * @return {*}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readObjectExternal = function() {
  if (this.ba != this.SerializationContext_owner.data) {
    this.ba = this.SerializationContext_owner.data;
    this._typedArray = new Uint8Array(this.ba);
  }
  this._position = (this.SerializationContext_owner.position) >> 0;
  this._len = (this.SerializationContext_owner.length) >>> 0;
  try {
    var /** @type {*} */ result = this.readObject();
  } catch (e) {
    this.SerializationContext__error = e;
  }
  this.reset();
  this.SerializationContext_owner.position = (this._position) >>> 0;
  return result;
};


/**
 * @return {*}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readObject = function() {
  var /** @type {number} */ amfType = this.readUnsignedByte();
  return this.SerializationContext_readObjectValue(amfType);
};


/**
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readXML = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0)
    return this.SerializationContext_getObject((ref >> 1) >>> 0); else {
    var /** @type {number} */ len = ((ref >> 1)) >>> 0;
    var /** @type {string} */ stringSource = this.readUTFBytes(len);
    if (!org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass) {
      throw new Error("XML class is not linked in, as required for deserialization");
    }
    var /** @type {Object} */ xml = new org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext._xmlClass(stringSource);
    this.SerializationContext_rememberObject(xml);
    return xml;
  }
};


/**
 * @return {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readString = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0) {
    return this.SerializationContext_getString((ref >> 1) >>> 0);
  } else {
    var /** @type {number} */ len = ((ref >> 1)) >>> 0;
    if (len == 0) {
      return org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.EMPTY_STRING;
    }
    var /** @type {string} */ str = this.readUTFBytes(len);
    this.SerializationContext_rememberString(str);
    return str;
  }
};


/**
 * @private
 * @param {string} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_rememberString = function(v) {
  this.SerializationContext_strings[this.SerializationContext_stringCount++] = v;
};


/**
 * @private
 * @param {number} v
 * @return {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_getString = function(v) {
  return org.apache.royale.utils.Language.string(this.SerializationContext_strings[v]);
};


/**
 * @private
 * @param {number} v
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_getObject = function(v) {
  return this.SerializationContext_objects[v];
};


/**
 * @private
 * @param {number} v
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_getTraits = function(v) {
  return org.apache.royale.utils.Language.as(this.SerializationContext_traits[v], org.apache.royale.net.remoting.amf.AMFBinaryData.Traits);
};


/**
 * @private
 * @param {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_rememberTraits = function(v) {
  this.SerializationContext_traits[this.SerializationContext_traitCount++] = v;
};


/**
 * @private
 * @param {Object} v
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_rememberObject = function(v) {
  this.SerializationContext_objects.push(v);
};


/**
 * @private
 * @param {number} ref
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_readTraits = function(ref) {
  var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ ti;
  if ((ref & 3) == 1) {
    ti = this.SerializationContext_getTraits((ref >> 2) >>> 0);
    return ti;
  } else {
    ti = new org.apache.royale.net.remoting.amf.AMFBinaryData.Traits();
    ti.externalizable = ((ref & 4) == 4);
    ti.isDynamic = ((ref & 8) == 8);
    ti.count = ((ref >> 4)) >>> 0;
    var /** @type {string} */ className = this.readString();
    if (className != null && className != "") {
      ti.alias = className;
    }
    for (var /** @type {number} */ i = 0; i < ti.count; i++) {
      ti.props.push(this.readString());
    }
    this.SerializationContext_rememberTraits(ti);
    return ti;
  }
};


/**
 * @private
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_readScriptObject = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0) {
    return this.SerializationContext_getObject((ref >> 1) >>> 0);
  } else {
    var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ decodedTraits = this.SerializationContext_readTraits(ref);
    var /** @type {Object} */ obj;
    var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ localTraits;
    if (decodedTraits.alias) {
      var /** @type {Object} */ c = org.apache.royale.reflection.getClassByAlias(decodedTraits.alias);
      if (c) {
        obj = new c();
        localTraits = this.SerializationContext_getLocalTraitsInfo(obj);
      } else {
        obj = {};
      }
    } else {
      obj = {};
    }
    this.SerializationContext_rememberObject(obj);
    if (decodedTraits.externalizable) {
      obj.readExternal(this);
    } else {
      
/**
 * @const
 * @type {number}
 */
var l = (decodedTraits.props.length) >>> 0;
      var /** @type {boolean} */ hasProp;
      for (var /** @type {number} */ i = 0; i < l; i++) {
        var /** @type {*} */ fieldValue = this.readObject();
        var /** @type {string} */ prop = org.apache.royale.utils.Language.string(decodedTraits.props[i]);
        hasProp = !!(localTraits && (localTraits.hasProp(prop) || localTraits.isDynamic));
        if (hasProp) {
          localTraits.getterSetters[prop].setValue(obj, fieldValue);
        } else {
          if (!localTraits) {
            obj[prop] = fieldValue;
          } else {
            if (goog.DEBUG) {
              org.apache.royale.utils.Language.trace('ReferenceError: Error #1056: Cannot create property ' + prop + ' on ' + decodedTraits.alias);
            }
          }
        }
      }
      if (decodedTraits.isDynamic) {
        for (;;) {
          var /** @type {string} */ name = this.readString();
          if (name == null || name.length == 0) {
            break;
          }
          obj[name] = this.readObject();
        }
      }
    }
    return obj;
  }
};


/**
 * @royaleignorecoercion Array
 * @return {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readArray = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0)
    return this.SerializationContext_getObject((ref >> 1) >>> 0);
  var /** @type {number} */ denseLength = ((ref >> 1)) >>> 0;
  var /** @type {Array} */ array = [];
  this.SerializationContext_rememberObject(array);
  while (true) {
    var /** @type {string} */ name = this.readString();
    if (!name)
      break;
    array[name] = this.readObject();
  }
  for (var /** @type {number} */ i = 0; i < denseLength; i++) {
    array[i] = this.readObject();
  }
  return array;
};


/**
 * @royaleignorecoercion Array
 * @return {Date}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readDate = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0)
    return org.apache.royale.utils.Language.as(this.SerializationContext_getObject((ref >> 1) >>> 0), Date);
  var /** @type {number} */ time = this.readDouble();
  var /** @type {Date} */ date = new Date(time);
  this.SerializationContext_rememberObject(date);
  return date;
};


/**
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.readByteArray = function() {
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0)
    return org.apache.royale.utils.Language.as(this.SerializationContext_getObject((ref >> 1) >>> 0), org.apache.royale.net.remoting.amf.AMFBinaryData); else {
    var /** @type {number} */ len = ((ref >> 1)) >>> 0;
    var /** @type {Uint8Array} */ bytes = new Uint8Array(len);
    bytes.set(new Uint8Array(this.ba, this._position, len));
    this._position += (len) >> 0;
    var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData} */ ba = new org.apache.royale.net.remoting.amf.AMFBinaryData(bytes.buffer);
    this.SerializationContext_rememberObject(ba);
    return ba;
  }
};


/**
 * @private
 * @param {number} type
 * @param {Array} array
 * @param {boolean} fixed
 * @return {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_toVector = function(type, array, fixed) {
  return array;
};


/**
 * @private
 * @param {number} amfType
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_readAmf3Vector = function(amfType) {
  var /** @type {number} */ i = 0;
  var /** @type {number} */ ref = (this.readUInt29()) >>> 0;
  if ((ref & 1) == 0)
    return this.SerializationContext_getObject((ref >> 1) >>> 0);
  var /** @type {number} */ len = ((ref >> 1)) >>> 0;
  var /** @type {Array} */ vector = this.SerializationContext_toVector(amfType, [], this.readBoolean());
  //var /** @type {number} */ i = 0;
  if (amfType === org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_OBJECT) {
    this.readString();
    for (i = 0; i < len; i++)
      vector.push(this.readObject());
  } else if (amfType === org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_INT) {
    for (i = 0; i < len; i++)
      vector.push(this.readInt());
  } else if (amfType === org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_UINT) {
    for (i = 0; i < len; i++)
      vector.push(this.readUnsignedInt());
  } else if (amfType === org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_DOUBLE) {
    for (i = 0; i < len; i++)
      vector.push(this.readDouble());
  }
  this.SerializationContext_rememberObject(vector);
  return vector;
};


/**
 * @private
 * @param {number} amfType
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.prototype.SerializationContext_readObjectValue = function(amfType) {
  var /** @type {number} */ u = 0;
  var /** @type {Object} */ value = null;
  //var /** @type {number} */ u = 0;
  switch (amfType) {
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_STRING:
      value = this.readString();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_OBJECT:
      try {
        value = this.SerializationContext_readScriptObject();
      } catch (e) {
        throw new Error("Failed to deserialize: " + e);
      }
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_ARRAY:
      value = this.readArray();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_FALSE:
      value = false;
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BOOLEAN_TRUE:
      value = true;
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_INTEGER:
      u = (this.readUInt29()) >>> 0;
      value = (u << 3) >> 3;
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DOUBLE:
      value = this.readDouble();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_UNDEFINED:
    
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_NULL:
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_DATE:
      value = this.readDate();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_BYTEARRAY:
      value = this.readByteArray();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_XML:
      value = this.readXML();
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_INT:
    
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_UINT:
    
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_DOUBLE:
    
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF3_VECTOR_OBJECT:
      value = this.SerializationContext_readAmf3Vector(amfType);
      break;
    case org.apache.royale.net.remoting.amf.AMFBinaryData.SerializationContext.AMF0_AMF3:
      value = this.readObject();
      break;
    default:
      throw new Error("Unsupported AMF type: " + amfType);
  }
  return value;
};


/**
 * @constructor
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits = function() {

this.props = [];
this.nullValues = {};
this.getterSetters = {};
};


/**
 * @param {Function} reflectionFunction
 * @param {string} type
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.createInstanceVariableGetterSetter = function(reflectionFunction, type) {
  var /** @type {Object} */ ret = {setValue:function(inst, value) {
    reflectionFunction(inst, value);
  }};
  if (type == "*") {
    ret.getValue = function(inst) {
      return reflectionFunction(inst, reflectionFunction);
    };
  } else {
    ret.getValue = function(inst) {
      return reflectionFunction(inst);
    };
  }
  return ret;
};


/**
 * @param {string} fieldName
 * @return {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.createInstanceAccessorGetterSetter = function(fieldName) {
  return {getValue:function(inst) {
    return inst[fieldName];
  }, setValue:function(inst, value) {
    inst[fieldName] = value;
  }};
};


/**
 * @private
 * @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits._emtpy_object;


/**
 * @param {Array} fields
 * @param {string} qName
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.getClassTraits = function(fields, qName) {
  var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ traits = new org.apache.royale.net.remoting.amf.AMFBinaryData.Traits();
  traits.qName = '[Class] ' + qName;
  traits.isDynamic = true;
  traits.externalizable = false;
  traits.props = fields;
  return traits;
};


/**
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.getBaseObjectTraits = function() {
  if (org.apache.royale.net.remoting.amf.AMFBinaryData.Traits._emtpy_object)
    return org.apache.royale.net.remoting.amf.AMFBinaryData.Traits._emtpy_object;
  var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ traits = org.apache.royale.net.remoting.amf.AMFBinaryData.Traits._emtpy_object = new org.apache.royale.net.remoting.amf.AMFBinaryData.Traits();
  traits.qName = 'Object';
  traits.externalizable = false;
  traits.isDynamic = true;
  return traits;
};


/**
 * @param {Array} fields
 * @return {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.getDynObjectTraits = function(fields) {
  var /** @type {org.apache.royale.net.remoting.amf.AMFBinaryData.Traits} */ traits;
  traits = new org.apache.royale.net.remoting.amf.AMFBinaryData.Traits();
  traits.qName = 'Object';
  traits.externalizable = false;
  traits.isDynamic = true;
  traits.props = fields;
  return traits;
};


/**
 * @type {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.alias = '';


/**
 * @type {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.qName;


/**
 * @type {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.externalizable;


/**
 * @type {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.isDynamic;


/**
 * @type {number}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.count = 0;


/**
 * @type {Array}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.props;


/**
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.nullValues;


/**
 * @type {Object}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.getterSetters;


/**
 * @param {string} prop
 * @return {boolean}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.hasProp = function(prop) {
  return this.props.indexOf(prop) != -1;
};


/**
 * @return {string}
 */
org.apache.royale.net.remoting.amf.AMFBinaryData.Traits.prototype.toString = function() {
  if (goog.DEBUG) {
    return 'Traits for \'' + this.qName + '\'\n' + 'alias: \'' + this.alias + '\'\n' + 'externalizable:' + Boolean(this.externalizable) + '\n' + 'isDynamic:' + Boolean(this.isDynamic) + '\n' + 'count:' + this.count + '\n' + 'props:\n\t' + this.props.join('\n\t');
  } else {
    return 'Traits';
  }
};
